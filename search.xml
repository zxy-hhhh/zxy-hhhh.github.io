<?xml version="1.0" encoding="utf-8"?>
<search>
    
    
    <entry>
        <title><![CDATA[ZJOI2018历史]]></title>
        <url>http://zxy-hhhh.cn/2019/03/15/luogu-4338/</url>
        <content type="html"><![CDATA[<p>好久没写数据结构了，LCT都不会了</p>
<a id="more"></a>
<h1 id="ZJOI2018历史"><a href="#ZJOI2018历史" class="headerlink" title="ZJOI2018历史"></a>ZJOI2018历史</h1><p><a href="https://www.luogu.org/problemnew/show/P4338" target="_blank" rel="noopener">链接</a></p>
<p>设$v_x$为$x$的崛起次数，$s_x$为$x$及其子树的$v_x$之和，$son_x$表示$x$的儿子，$fa_x$表示$x$的父亲</p>
<h2 id="先不管修改"><a href="#先不管修改" class="headerlink" title="先不管修改"></a>先不管修改</h2><p>考虑对每一个点$x​$计算贡献。</p>
<p>可以发现，只有当两次崛起来自于$x$的不同子树时才会产生贡献，然后考虑如何构造，对于一个点$x$，肯定把来自不同子树的崛起放在相邻位置最优。</p>
<p>那么如何计算一个$x​$的答案，就相当计算($a_i​$为$sz_{son_x}​$或$v_x​$)</p>
<blockquote>
<p>​    一共有m个不同色球，每种球有$a_i​$个，一共有$s​$个球把这些球排成一列，最大化$\sum\limits_{i=1}^s [col_i!=col_{i-1}]​$（中括号表示条件真时值为$1​$否则为$0​$）</p>
</blockquote>
<p>然后发现$ans=min\{s-1,(s-max\{a_i\})*2\}$<del>不会证，自己yy一下吧</del></p>
<p>然后直接$dfs$一遍就可以算出每个点的$ans$了</p>
<h2 id="有了修改怎么办"><a href="#有了修改怎么办" class="headerlink" title="有了修改怎么办"></a>有了修改怎么办</h2><p>先求出开始的答案，计算每次修改产生的改变</p>
<p>考虑上面那个柿子在何时取到后半部分，设$mx=max\{a_i\}$，取到后半部分时$mx*2&gt;=s+1$</p>
<p>然后用一种神仙的$LCT$方法来维护</p>
<p>考虑若$sz_x*2&gt;sz_{fa_x}$时$fa_x$向$x$连一条重链，否则连轻边。</p>
<p>因为当在重链上跳时，不会修改答案</p>
<p>只有跳到轻边时才会修改答案。</p>
<p>用$LCT$维护这个东西，重链在$splay$上条，轻边暴力跳，并修改轻重链信息，当每次跳一条轻边时$sz$会增大一倍，所以轻边最多跳$log_2\ sz_1$次，复杂度<del>大概</del>为$nlogn$。</p>
<h2 id="一些实现相关"><a href="#一些实现相关" class="headerlink" title="一些实现相关"></a>一些实现相关</h2><p>关于$LCT$维护$sz$，可以在$LCT$上把轻边信息也维护上，在修改轻重链时是有点细节</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这份代码好像有点锅，开了$O_2$会$RE$，不开$O2$就好了（雾</p>
<p>如果有大爷知道哪里锅了，欢迎私聊</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/03/15</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">-1</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f*_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></span><br><span class="line">ll s[maxn],lv[maxn],val[maxn];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">2</span>][maxn],fa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> !(ch[<span class="number">0</span>][fa[x]]==x||ch[<span class="number">1</span>][fa[x]]==x);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs (ch[1][x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls (ch[0][x])</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;s[x]=s[ls]+s[rs]+val[x]+lv[x];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=fa[x],z=fa[y],d=ch[<span class="number">1</span>][y]==x;</span><br><span class="line">    <span class="keyword">if</span> (!isroot(y)) ch[ch[<span class="number">1</span>][z]==y][z]=x;</span><br><span class="line">    fa[y]=x,fa[x]=z;</span><br><span class="line">    fa[ch[!d][x]]=y,ch[d][y]=ch[!d][x];</span><br><span class="line">    ch[!d][x]=y;</span><br><span class="line">    pushup(y),pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;!isroot(x);) &#123;</span><br><span class="line">        <span class="keyword">int</span> y=fa[x],z=fa[y];</span><br><span class="line">        <span class="keyword">if</span> (!isroot(y))&#123;</span><br><span class="line">            <span class="keyword">if</span> ((ch[<span class="number">1</span>][y]==x)^(ch[<span class="number">1</span>][z]==y)) rotate(x);</span><br><span class="line">            <span class="keyword">else</span> rotate(y);</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> FA)</span> </span>&#123;</span><br><span class="line">    fa[x]=FA;</span><br><span class="line">    s[x]=val[x];</span><br><span class="line">    ll mx=val[x];</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    cross(i,x) <span class="keyword">if</span> (to[i]!=FA) &#123;</span><br><span class="line">        dfs(to[i],x);</span><br><span class="line">        s[x]+=s[to[i]];</span><br><span class="line">        <span class="keyword">if</span> (s[to[i]]&gt;mx) p=to[i],mx=s[to[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((mx&lt;&lt;<span class="number">1</span>)&gt;=s[x]+<span class="number">1</span>) &#123;</span><br><span class="line">        ans+=(s[x]-mx)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (p!=<span class="number">0</span>) lv[x]=s[x]-val[x]-mx,rs=p;</span><br><span class="line">        <span class="keyword">else</span> lv[x]=s[x]-val[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> ans+=s[x]<span class="number">-1</span>,lv[x]=s[x]-val[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rs) <span class="keyword">return</span> (s[x]-s[ls]-s[rs])&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((val[x]&lt;&lt;<span class="number">1</span>)&gt;s[x]-s[ls]) <span class="keyword">return</span> (s[x]-s[ls]-val[x])&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> s[x]-s[ls]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    splay(x);</span><br><span class="line">    ans-=calc(x);</span><br><span class="line">    s[x]+=v,val[x]+=v;</span><br><span class="line">    <span class="keyword">if</span> ((s[rs]&lt;&lt;<span class="number">1</span>)&lt;=s[x]-s[ls]) lv[x]+=s[rs],s[x]-=s[rs],rs=<span class="number">0</span>;</span><br><span class="line">    pushup(x);</span><br><span class="line">    ans+=calc(x);</span><br><span class="line">    <span class="keyword">int</span> y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(y=x,x=fa[x];x;y=x,x=fa[x]) &#123;</span><br><span class="line">        splay(x),ans-=calc(x);</span><br><span class="line">        s[x]+=v,lv[x]+=v;</span><br><span class="line">        <span class="keyword">if</span> ((s[rs]&lt;&lt;<span class="number">1</span>)&lt;=s[x]-s[ls]) lv[x]+=s[rs],rs=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((s[y]&lt;&lt;<span class="number">1</span>)&gt;s[x]-s[ls]) lv[x]-=s[y],rs=y;</span><br><span class="line">        pushup(x);</span><br><span class="line">        ans+=calc(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n=rd(),m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,n) val[i]=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y),add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    wrt(ans,<span class="string">'\n'</span>);</span><br><span class="line">    rep(_i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),v=rd();</span><br><span class="line">        update(x,v);</span><br><span class="line">        wrt(ans,<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LCT </tag>
            
            <tag> 构造 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[玩游戏]]></title>
        <url>http://zxy-hhhh.cn/2019/03/15/luogu-4705/</url>
        <content type="html"><![CDATA[<p>这应该是省选前我写的最后一道多项式（模拟赛除外</p>
<h1 id="玩游戏"><a href="#玩游戏" class="headerlink" title="玩游戏"></a>玩游戏</h1><p><a href="https://www.luogu.org/problemnew/show/P4705" target="_blank" rel="noopener">传送门</a></p>
<p>对于每个$t$求$\sum\limits_{i=1}^n\sum\limits_{j=1}^m\sum\limits_{k=0}^t\binom{t}{k}a_i^kb_j^{t-k}$</p>
<script type="math/tex; mode=display">
\sum\limits_{k=0}^t\binom{t}{k}\sum\limits_{i=1}^n\sum\limits_{j=1}^ma_i^{k}b_j^{t-k}\\
=\sum\limits_{k=0}^t\binom{t}{k}\sum\limits_{i=1}^na_i^{k}\sum\limits_{j=1}^mb_j^{t-k}\\
\text{设}s_k=\sum\limits_{i=1}^na_i^k，S_k=\sum\limits_{i=1}^nb_i^k\\
\text{所以柿子就是}\sum\limits_{k=0}^t\binom{t}{k}s_kS_{t-k}=t!\sum\limits_{k=0}^t\frac{s_k}{k!}\frac{S_{t-k}}{(t-k)!}</script><p>这个东西直接卷积就好了，考虑$s$怎么求</p>
<p>设$f(x)=\sum\limits_{k=0}^{\infty}\sum\limits_{i=1}^na_i^kx^k​$</p>
<p>显然，$s_k$为$f(x)$的第$k$项系数</p>
<script type="math/tex; mode=display">
f(x)=\sum\limits_{i=1}^n\sum\limits_{k=0}^{\infty} a_i^kx^k\\
\text{生成函数}f(x)=\sum\limits_{i=1}^n\frac{1}{1-a_ix}\\</script><p>实际上到这步就可以了，这个$f(x)$可以直接分治$NTT$求</p>
<script type="math/tex; mode=display">
\frac{A}{B}+\frac{C}{D}=\frac{AD+BC}{BD}</script><p>但是上面那个柿子常数巨大。。。如果你的$NTT$不够优美，你就$GG$了(<a href="http://zxy-hhhh.cn/2019/01/09/Polynomial/">这里</a>有一个我的板子，大概可以过吧)</p>
<h2 id="一个常数较小的解法"><a href="#一个常数较小的解法" class="headerlink" title="一个常数较小的解法"></a>一个常数较小的解法</h2><script type="math/tex; mode=display">
\text{考虑到}(ln(1-ax))'=\frac{-a}{1-ax}\\
\text{设}g(x)=\sum\limits_{i=1}^n\frac{-a_i}{1-a_ix}\\
g(x)=\sum\limits_{i=1}^n ln(1-a_ix)'\\
=(\sum\limits_{i=1}^nln(1-a_ix))'\\
=(ln[\prod\limits_{i=1}^n(1-a_i)])'</script><p>然后$g$就可以分治$NTT$了，然后考虑怎么求$f$，先给结论</p>
<script type="math/tex; mode=display">
f(x)=-xg(x)+n</script><p>证明考虑还原生成函数</p>
<p>$g$对于每个$a$的数列为$-a,-a^2x,-a^3x^2,-a^4x^3…$</p>
<p>然后发现$f$是$1,ax,a^2x^2,a^3x^3…$</p>
<p>相当于把$g$右移一位然后补上$0$次项</p>
<h2 id="莫得代码"><a href="#莫得代码" class="headerlink" title="莫得代码"></a>莫得代码</h2>]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[SDOI2017遗忘的集合]]></title>
        <url>http://zxy-hhhh.cn/2019/03/14/luogu-3784/</url>
        <content type="html"><![CDATA[<p>毒瘤</p>
<h1 id="SDOI2017-遗忘的集合"><a href="#SDOI2017-遗忘的集合" class="headerlink" title="[SDOI2017]遗忘的集合"></a>[SDOI2017]遗忘的集合</h1><p><a href="https://www.luogu.org/problemnew/show/P3784" target="_blank" rel="noopener">链接</a></p>
<p>一个显然的柿子$F(x)=\prod\limits_{i=1}^n(\frac{1}{1-x^i})^{t_i}$</p>
<p>$t_i$表示是否出现值为$0$或$1$</p>
<p>然后开始推柿子</p>
<script type="math/tex; mode=display">
-ln(F(x))=\sum\limits_{i=1}^{n}t_iln(1-x^i)\\
设G(x)=ln(1-x^i)\\
G'(x)=-\frac{ix^{i-1}}{1-x^i}\\
因为\frac{1}{1-x^i}=\sum\limits_{j=0}^{\infty}x^{ij}\\
G'(x)=\sum\limits_{j=0}^{\infty}-ix^{ij+i-1}\\
G(x)=\sum\limits_{j=0}^{\infty}-\frac{ix^{ij+i}}{ij+i}\\
=-\sum\limits_{j=0}^{\infty}\frac{x^{i(j+1)}}{j+1}\\
=-\sum\limits_{j=1}^{\infty}\frac{x^{ij}}{j}\\
ln(F(x))=\sum\limits_{i=1}^nt_i\sum\limits_{j=1}^{\lfloor\frac{n}{i}\rfloor}\frac{x^{ij}}{j}\\
=\sum\limits_{T=1}^nx^T\sum\limits_{i=1}^{\lfloor\frac{n}{T}\rfloor}t_i\frac{i}{T}</script><p>然后因为题目给定了$F$，所以$ln(F(x))$可以直接求出，相当于是对于每个$T$，知道了$\sum\limits_{i=1}^{\lfloor\frac{n}{T}\rfloor}t_i\frac{i}{T}$，然后$t_i$直接xje反演一下就可以了。</p>
<h2 id="然后这题特别毒瘤一点，要-MTT-，所以"><a href="#然后这题特别毒瘤一点，要-MTT-，所以" class="headerlink" title="然后这题特别毒瘤一点，要$MTT$，所以"></a>然后这题特别毒瘤一点，要$MTT$，所以</h2><p>莫得代码</p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多项式,毒瘤 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[图的价值]]></title>
        <url>http://zxy-hhhh.cn/2019/03/06/bzoj5093/</url>
        <content type="html"><![CDATA[<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5093" target="_blank" rel="noopener">题目</a></p>
<p>首先可以单独计算一个点的贡献，最后乘上$n$。</p>
<p>那么我们可以列出柿子：</p>
<script type="math/tex; mode=display">
ans=n2^{\binom{n-1}{2}}\sum\limits_{i=0}^{n-1}\binom{n-1}{i}i^k</script><p>考虑它的意义：取出一个点，枚举它的度数，其他点可以随便连</p>
<p>然后这个式子并过不来这题</p>
<p>这个$\sum$前面部分处理起来比较方便，考虑化后面部分。</p>
<p>考虑一个柿子：</p>
<script type="math/tex; mode=display">
n^k=\sum\limits_{i=0}^kS(k,i)\binom{n}{i}i!</script><p>证明：左边表示把$k$个球放入n个不同的盒子中的方案数，右边表示枚举有$i$个盒子非空的方案，两者相等。（组合意义）</p>
<p>实际上这个式子的枚举上界因为$n$，但是改为$k$结果不变</p>
<p>知道这个柿子之后就可以化简</p>
<script type="math/tex; mode=display">
\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\sum\limits_{j=0}^kS(k,j)\binom{i}{j}j!\\
=\sum\limits_{j=0}^kS(k,j)j!\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\binom{i}{j}</script><p>然后</p>
<script type="math/tex; mode=display">
\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\binom{i}{j}=\binom{n-1}{j}2^{n-1-j}</script><p>证明：左边为$n-1$个人中选$i$个，$i$个中再轩$j$个，右边为先选出$j$个人，然后其他人是否被选择皆可（组合意义）</p>
<p>然后</p>
<script type="math/tex; mode=display">
\sum\limits_{j=0}^kS(k,j)j!\binom{n-1}{j}2^{n-1-j}\\
=\sum\limits_{j=0}^k S(k,j)\frac{(n-1)!}{(n-1-j)!}2^{n-1-j}</script><p>然后用$NTT$算出斯特林数后即可</p>
<p>复杂度$O(klogk)$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/03/06</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">-1</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f*_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 800005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inv2 499122177</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g 3</span></span><br><span class="line"><span class="keyword">int</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> lim,l,r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> type = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type) &#123;</span><br><span class="line">        lim = <span class="number">1</span>, l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (lim &lt;= len) lim &lt;&lt;= <span class="number">1</span>, l++;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        lim = <span class="number">1</span> &lt;&lt; len, l = len;</span><br><span class="line">    rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) r[i] = ((r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + mod : (x &gt;= mod ? x - mod : x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, ll k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, x = <span class="number">1l</span>l * x * x % mod)</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = <span class="number">1l</span>l * ans * x % mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) <span class="keyword">if</span> (i &lt; r[i]) swap(a[i], a[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; lim; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> Wn = qpow(g, (mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">-1</span>) Wn = qpow(Wn, mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lim; j += R)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, w = <span class="number">1</span>; k &lt; mid; k++, w = <span class="number">1l</span>l * w * Wn % mod) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[j + k], y = <span class="number">1l</span>l * w * a[j + mid + k] % mod;</span><br><span class="line">                a[j + k] = Mod(x + y);</span><br><span class="line">                a[j + mid + k] = Mod(x - y);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = qpow(lim, mod - <span class="number">2</span>);</span><br><span class="line">        rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) a[i] = <span class="number">1l</span>l * a[i] * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> F[maxn],G[maxn],fac[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n=rd(),k=rd();</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,k) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    rep(i,<span class="number">0</span>,k) &#123;</span><br><span class="line">        F[i]=<span class="number">1l</span>l*((i&amp;<span class="number">1</span>)?<span class="number">998244352</span>:<span class="number">1</span>)*qpow(fac[i],mod<span class="number">-2</span>)%mod;</span><br><span class="line">        G[i]=<span class="number">1l</span>l*qpow(i,k)*qpow(fac[i],mod<span class="number">-2</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    init(k+k);</span><br><span class="line">    NTT(F,<span class="number">1</span>),NTT(G,<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) s[i]=<span class="number">1l</span>l*F[i]*G[i]%mod;</span><br><span class="line">    NTT(s,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,sn=<span class="number">1</span>,s2=qpow(<span class="number">2</span>,n<span class="number">-1</span>);</span><br><span class="line">    ans=<span class="number">1l</span>l*s[<span class="number">0</span>]*s2%mod;</span><br><span class="line">    rep(i,<span class="number">1</span>,k) &#123;</span><br><span class="line">        s2=<span class="number">1l</span>l*s2*inv2%mod;</span><br><span class="line">        sn=<span class="number">1l</span>l*sn*(n-i)%mod;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*s[i]*sn%mod*s2)%mod;</span><br><span class="line">       <span class="comment">// wrt(ans,'\n');</span></span><br><span class="line">    &#125;</span><br><span class="line">    wrt(<span class="number">1l</span>l*ans*n%mod*qpow(<span class="number">2</span>,<span class="number">1l</span>l*(n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">2</span>)%mod,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0211]]></title>
        <url>http://zxy-hhhh.cn/2019/02/11/contest0211/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[杜教筛]]></title>
        <url>http://zxy-hhhh.cn/2019/01/17/dujiaoshai/</url>
        <content type="html"><![CDATA[<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>内容总结自</p>
<p><a href="https://acfcacfca.blog.luogu.org/dls-tql(AcF&#39;s" target="_blank" rel="noopener">https://acfcacfca.blog.luogu.org/dls-tql(AcF&#39;s</a> Blog)</p>
<h2 id="常规做法"><a href="#常规做法" class="headerlink" title="常规做法"></a>常规做法</h2><p>杜教筛用于解决求$S(n)=\sum\limits_{i=1}^nf(i)$的问题</p>
<p>有一种常规做法：</p>
<p>找一个数论函数$g$，</p>
<script type="math/tex; mode=display">
\begin{align}
\sum\limits_{i=1}^n (f*g)i\\
=\sum\limits_{i=1}^n\sum\limits_{d|i}f(\frac{i}{d})g(d)\\
=\sum\limits_{d=1}^n g(d) \sum\limits_{i=1}^{\lfloor\frac{n}{d}\rfloor} f(i)\\
=\sum\limits_{d=1}^n g(d)S(\frac{n}{d})\\
=g(1)S(n)+\sum\limits_{d=2}^n g(d)S(\frac{n}{d})
\end{align}</script><p>我们要求的是$S(n)$，</p>
<p>$\sum\limits_{i=1}^n (f*g)i=g(1)S(n)+\sum\limits_{d=2}^n g(d)S(\frac{n}{d})$</p>
<p>$g(1)S(n)=\sum\limits_{i=1}^n (f*g)i-\sum\limits_{d=2}^n g(d)S(\frac{n}{d})$</p>
<p>只要能找到可以快速求$\sum\limits_{i=1}^n(f*g)i$和$g$的前缀和的$g$即可。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><script type="math/tex; mode=display">
\begin{align}
S(n)=\sum\limits_{i=1}^n\mu(i)\\
\mu*I=e\\
\text{求}I\text{和}e\text{的前缀和}
\end{align}</script><script type="math/tex; mode=display">
\begin{align}
S(n)=\sum\limits_{i=1}^n\varphi(i)\\
\varphi*I=id
\text{求}id\text{和}id\text{的前缀和}
\end{align}</script><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    ll ans=sum_f_g<span class="comment">//算f*g前缀和</span></span><br><span class="line">    <span class="keyword">for</span>(ll l=<span class="number">2</span>;r&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=n/(n/l);</span><br><span class="line">        ans-=(sum_g(r)-sum_g(l<span class="number">-1</span>))*calc(n/l);</span><br><span class="line">        <span class="comment">//sum_g用于算g的前缀和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以先筛出前$n^{\frac{2}{3}}$个答案</p>
<p>复杂度为$O(n^{\frac{2}{3}})$</p>
<p>可以使用$hash$记忆化来有化复杂度</p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 杜教筛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0111]]></title>
        <url>http://zxy-hhhh.cn/2019/01/11/contest0111/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0110]]></title>
        <url>http://zxy-hhhh.cn/2019/01/10/contest0110/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[多项式]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/Polynomial/</url>
        <content type="html"><![CDATA[<p>这里是一些模板<del>然而并不会写教程</del></p>
<a id="more"></a>
<h1 id="一些求法"><a href="#一些求法" class="headerlink" title="一些求法"></a>一些求法</h1><h2 id="FFT"><a href="#FFT" class="headerlink" title="$FFT$"></a>$FFT$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> xx=<span class="number">0</span>,<span class="keyword">double</span> yy=<span class="number">0</span>)&#123;x=xx,y=yy;&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x+B.x,y+B.y);&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x-B.x,y-B.y);&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x*B.x-y*B.y,B.x*y+x*B.y);&#125;</span><br><span class="line">&#125;a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,r[maxn],l,lim;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *A,<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">if</span> (i&lt;r[i]) swap(A[i],A[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;lim;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">complex</span> <span class="title">Wn</span><span class="params">(<span class="built_in">cos</span>(Pi/mid),type*<span class="built_in">sin</span>(Pi/mid))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> R=mid&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=R)&#123;</span><br><span class="line">            <span class="function"><span class="keyword">complex</span> <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k++,w=w*Wn)&#123;</span><br><span class="line">                <span class="keyword">complex</span> x=A[j+k],y=w*A[j+mid+k];</span><br><span class="line">                A[j+k]=x+y;</span><br><span class="line">                A[j+mid+k]=x-y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NTT"><a href="#NTT" class="headerlink" title="$NTT$"></a>$NTT$</h2><p>把单位根换成原根</p>
<h2 id="分治NTT"><a href="#分治NTT" class="headerlink" title="分治NTT"></a>分治NTT</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NTT(a,<span class="number">1</span>),NTT(b,<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) a[i]=<span class="number">1l</span>l*a[i]*b[i]%mod;</span><br><span class="line">    NTT(a,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lim=<span class="number">1</span>,l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;=n)lim=lim&lt;&lt;<span class="number">1</span>,++l;</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) r[i]=((r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(l<span class="number">-1</span>))),A[i]=B[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdqNTT</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    cdqNTT(l,mid);</span><br><span class="line">    init(r-l+<span class="number">1</span>);</span><br><span class="line">    rep(i,l,mid) A[i-l]=a[i];</span><br><span class="line">    rep(i,<span class="number">0</span>,r-l) B[i]=b[i];</span><br><span class="line">    mul(A,B);</span><br><span class="line">    rep(i,mid+<span class="number">1</span>,r) a[i]-=A[i-l],a[i]=a[i]&lt;<span class="number">0</span>?a[i]+mod:a[i];</span><br><span class="line">    cdqNTT(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h2><script type="math/tex; mode=display">
n==1:
\\
f(x) \equiv c (mod\ x)\ \ \ \ \ \ c为常数
\\
f^{-1} \equiv c^{-1} (mod\ x)
\\
n>1:
\\
f(x)g(x) \equiv 1 (mod\ x^n)
\\
设
f(x)g'(x) \equiv 1 (mod\ x^{\lceil\frac{n}{2}\rceil})
\\
f(x)g(x) \equiv 1 (mod\ x^{\lceil\frac{n}{2}\rceil})
\\
以上两式相减
\\
g(x)-g'(x) \equiv 0 (mod\ x^{\lceil\frac{n}{2}\rceil})
\\
两边平方
\\
g^2(x)-2g'(x)g(x)+g'^2(x)\equiv 0(mod\ x^n)
\\
同乘f(x)
\\
g(x)\equiv 2g'(x)-f(x)g'^2(x)(mod x^n)
\\
时间复杂度:
T(n)=T(\frac{n}{2})+O(n log n)=O(n log n)</script><h2 id="MTT"><a href="#MTT" class="headerlink" title="$MTT$"></a>$MTT$</h2><p>此坑待填<del>暂时就不填了吧</del></p>
<h2 id="多项式求导"><a href="#多项式求导" class="headerlink" title="多项式求导"></a>多项式求导</h2><script type="math/tex; mode=display">
f(x)=\sum\limits_{i=0}^{\infty} a_ix^i\\
f'(x)=\sum\limits_{i=0}^{\infty} a_{i+1}*(i+1)x^i</script><h2 id="多项式积分"><a href="#多项式积分" class="headerlink" title="多项式积分"></a>多项式积分</h2><script type="math/tex; mode=display">
f(x)=\sum\limits_{i=0}^{\infty} a_ix^i\\
\int f(x)dx=\sum\limits_{i=1}^{\infty} \frac{a_{i-1}}{i}x^i</script><h2 id="多项式求对数函数"><a href="#多项式求对数函数" class="headerlink" title="多项式求对数函数"></a>多项式求对数函数</h2><script type="math/tex; mode=display">
设f(x)=ln\ x\\

B(x)=f(A(x))\\

B'(x)=f'(A(x))A'(x)=\frac{A'(x)}{A(x)}\\

B(x)=\int B'(x)dx\\</script><h2 id="多项式除法"><a href="#多项式除法" class="headerlink" title="多项式除法"></a>多项式除法</h2><p><a href="https://www.luogu.org/blog/user7035/solution-p4512" target="_blank" rel="noopener">来源</a></p>
<p>$f(x)$为$n$次多项式<br>设$f_R(x)=x^nf(\frac{1}{x})$<br>容易发现$f_R(x)$为$f(x)$翻转得来，即$f_R[i]=f[n-i]​$</p>
<p>下面开始推柿子</p>
<script type="math/tex; mode=display">
F(x)=Q(x)*G(x)+R(x)\\
x^nF(\frac{1}{x})=x^{n-m}Q(\frac{1}{x})*x^mG(\frac{1}{x})+x^nR(\frac{1}{x})\\
F_R(x)=Q_R(x)*G_R(x)+x^{n-m+1}R_R(x)\\
F_R(x)\equiv Q_R(x)*G_R(x)(\bmod x^{n-m+1})\\
Q_R(x)=F_R(x)*G_R(x)^{-1}\\
R_R=F(x)-G(x)*Q(x)</script><h2 id="多项式开根"><a href="#多项式开根" class="headerlink" title="多项式开根"></a>多项式开根</h2><p><a href="https://www.luogu.org/blog/Owencodeisking/solution-p5205" target="_blank" rel="noopener">来源</a></p>
<script type="math/tex; mode=display">
设H(x)^2 \equiv A(x) (\mod x^{\lceil \frac{n}{2} \rceil} )\\
G(x)-H(x) \equiv 0 (\mod x^{\lceil \frac{n}{2} \rceil} )\\
(G(x)-H(x))^2 \equiv 0 (\mod x^n)\\
G(x)^2-2H(x)G(x)+H(x)^2 \equiv 0(\mod x^n)\\
F(x)-2H(x)G(x)+H(x)^2\equiv 0 (\mod x^n)\\
G(x)=\frac{F(x)+H(x)^2}{2H(x)} (\mod x^n)</script><h2 id="多项式exp"><a href="#多项式exp" class="headerlink" title="多项式exp"></a>多项式exp</h2><p><a href="https://www.luogu.org/problemnew/solution/P4726" target="_blank" rel="noopener">具体看这里</a></p>
<script type="math/tex; mode=display">
设H_1(x)=e^{A(x)}(\mod x^{\lceil \frac{n}{2} \rceil})\\
牛顿迭代公式得\\
H=H_1(1-Ln(H_1)+A) (\mod x^n)</script><h2 id="多项式三角函数"><a href="#多项式三角函数" class="headerlink" title="多项式三角函数"></a>多项式三角函数</h2><p>直接</p>
<script type="math/tex; mode=display">
e^{ix}=cos(x)+isin(x)\\
e^{-ix}=cos(x)-isin(x)</script><p>然后$i$是有二次剩余的，直接当方程解出来就好了</p>
<h2 id="多项式反三角函数"><a href="#多项式反三角函数" class="headerlink" title="多项式反三角函数"></a>多项式反三角函数</h2><p>两边求导，再积分回去就好了<del>柿子懒得写了</del></p>
<p>以上两个毒瘤模板好像没什么用</p>
<h1 id="一个综合的板子"><a href="#一个综合的板子" class="headerlink" title="一个综合的板子"></a>一个综合的板子</h1><p>写的很naive</p>
<p>还是写点食用说明吧</p>
<p>​    1.支持对数$Ln$，指数$Exp$，求逆$Inv$，$k$次方$Pow$，开根$Sqrt$，四则运算，返回多项式</p>
<p>​    2.可以加减乘除一个$int$，以及一个$int$加减乘多项式</p>
<p>​    3.对数等函数可以加入一个参数$n$，表示结果对$x^n$取模</p>
<p>​    4.可以输出前$n$项（默认为全部输出），把一个数组转化为多项式</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 900005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g 3</span></span><br><span class="line"><span class="keyword">namespace</span> Polynomial &#123;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k=mod<span class="number">-2</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, x = <span class="number">1l</span>l * x * x % mod)</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = <span class="number">1l</span>l * ans * x % mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&gt;=mod?x-mod:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> lim;</span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    lim=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lim &lt;= len) lim &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;lim; i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        w[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> t=qpow(<span class="number">3</span>, (mod<span class="number">-1</span>)/i/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; ++j) w[i+j]=<span class="number">1l</span>l*w[i+j<span class="number">-1</span>]*t%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> initT(x) t##x=(*(F1+x))*(*(W+x))%mod</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> doitT(x) (*(F1+x))=(*(F0+x)+mod-t##x),(*(F0+x))+=t##x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tido 4</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DFT</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;f, <span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> n=lim)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> F[maxn];</span><br><span class="line">    f.resize(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">        F[i]=f[j];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> k=n&gt;&gt;<span class="number">1</span>; (j^=k)&lt;k; k&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i&lt;&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j+=i&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> *W=w+i;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *F0=F+j, *F1=F+j+i,k=j;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t0,t1,t2,t3;</span><br><span class="line">            <span class="keyword">for</span>(;k+tido&lt;j+i;k+=tido,W+=tido,F0+=tido,F1+=tido) &#123;</span><br><span class="line">                initT(<span class="number">0</span>); initT(<span class="number">1</span>);</span><br><span class="line">                initT(<span class="number">2</span>); initT(<span class="number">3</span>);</span><br><span class="line">                doitT(<span class="number">0</span>); doitT(<span class="number">1</span>);</span><br><span class="line">                doitT(<span class="number">2</span>); doitT(<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(; k&lt;j+i; ++k, ++W, ++F0, ++F1)&#123;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t=(*F1)*(*W)%mod;</span><br><span class="line">                (*F1)=*F0+mod-t, (*F0)+=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) f[i]=F[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> initT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> doitT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> todi</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IDFT</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;f, <span class="keyword">int</span> n=lim)</span></span>&#123;</span><br><span class="line">   <span class="comment">// f.resize(n);</span></span><br><span class="line">    reverse(f.begin()+<span class="number">1</span>, f.end());</span><br><span class="line">    DFT(f, n);</span><br><span class="line">    <span class="keyword">int</span> I=qpow(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) f[i]=<span class="number">1l</span>l*f[i]*I%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> *A,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vt,<span class="keyword">int</span> sz,<span class="keyword">int</span> L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sz&gt;<span class="keyword">int</span>(vt.size())) sz=vt.size();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz;i++) A[i]=vt[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=sz;i&lt;L;i++) A[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; intmul(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; x, pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; y,<span class="keyword">int</span> f)&#123;</span><br><span class="line">    <span class="keyword">return</span> make_pair((<span class="number">1l</span>l*x.first*y.first+<span class="number">1l</span>l*x.second*y.second%mod*f)%mod,</span><br><span class="line">                     (<span class="number">1l</span>l*x.second*y.first+<span class="number">1l</span>l*x.first*y.second)%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">intsqrt</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=<span class="number">1</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span>(qpow(a, (mod<span class="number">-1</span>)/<span class="number">2</span>)!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> x, f;</span><br><span class="line">    <span class="keyword">do</span> x=(rand())%(a<span class="number">-1</span>)+<span class="number">1</span>; <span class="keyword">while</span>(qpow(f=(<span class="number">1l</span>l*x*x-a+mod)%mod, (mod<span class="number">-1</span>)/<span class="number">2</span>)==<span class="number">1</span>);</span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ans=make_pair(<span class="number">1</span>, <span class="number">0</span>), t=make_pair(x, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=(mod+<span class="number">1</span>)/<span class="number">2</span>; i; i&gt;&gt;=<span class="number">1</span>, t=intmul(t, t, f)) </span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) ans=intmul(ans, t, f);</span><br><span class="line">    <span class="keyword">return</span> min(ans.first, mod-ans.first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Poly</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; F;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;H,<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        H.clear();</span><br><span class="line">        <span class="keyword">if</span> (n&gt;F.size()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++)</span><br><span class="line">                H.push_back(F[i]);</span><br><span class="line">            <span class="comment">// H.resize(n);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) H.push_back(F[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> Poly &amp;B) &#123;F=B.F;&#125;</span><br><span class="line">    <span class="keyword">const</span> Poly <span class="keyword">operator</span> + (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        res.F.resize(<span class="built_in">std</span>::max(F.size(),B.F.size()));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++) </span><br><span class="line">            res.F[i]=F[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            res.F[i]=Mod(res.F[i]+B.F[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> +=(<span class="keyword">const</span> Poly &amp;B) &#123;</span><br><span class="line">        <span class="keyword">if</span>(B.F.size()&gt;F.size()) F.resize(B.F.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            F[i]=Mod(B.F[i]+F[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> - (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        res.F.resize(<span class="built_in">std</span>::max(F.size(),B.F.size()));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++) </span><br><span class="line">            res.F[i]=F[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            res.F[i]=Mod(res.F[i]-B.F[i]+mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> -=(<span class="keyword">const</span> Poly &amp;B) &#123;</span><br><span class="line">        <span class="keyword">if</span>(B.F.size()&gt;F.size()) F.resize(B.F.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            F[i]=Mod(F[i]-B.F[i]+mod);</span><br><span class="line">	&#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> * (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res,temp;</span><br><span class="line">        <span class="keyword">int</span> N=F.size()+B.F.size()<span class="number">-1</span>;</span><br><span class="line">        Init(N);</span><br><span class="line">        res.F=F,temp.F=B.F;</span><br><span class="line">        DFT(res.F),DFT(temp.F);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) </span><br><span class="line">            res.F[i]=<span class="number">1l</span>l*res.F[i]*temp.F[i]%mod;</span><br><span class="line">        IDFT(res.F);</span><br><span class="line">        res.F.resize(N);</span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> *= (<span class="keyword">const</span> Poly &amp;B) &#123;</span><br><span class="line">        *<span class="keyword">this</span>=*<span class="keyword">this</span>*B;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">int</span> X=Mod(x+mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++) </span><br><span class="line">            res.F.push_back(<span class="number">1l</span>l*F[i]*X%mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> *= (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">int</span> X=Mod(x+mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++)</span><br><span class="line">            F[i]=<span class="number">1l</span>l*F[i]*X%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*<span class="keyword">this</span>)*(qpow(Mod(x+mod),mod<span class="number">-2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">int</span> p=qpow(Mod(x+mod),mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++)</span><br><span class="line">            F[i]=<span class="number">1l</span>l*F[i]*p%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res=*<span class="keyword">this</span>;</span><br><span class="line">        res.F[<span class="number">0</span>]=Mod(res.F[<span class="number">0</span>]+x),res.F[<span class="number">0</span>]=Mod(res.F[<span class="number">0</span>]+mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;F[<span class="number">0</span>]=Mod(F[<span class="number">0</span>]+x),F[<span class="number">0</span>]=Mod(F[<span class="number">0</span>]+mod);;&#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res=*<span class="keyword">this</span>;</span><br><span class="line">        res.F[<span class="number">0</span>]=Mod(res.F[<span class="number">0</span>]-x),res.F[<span class="number">0</span>]=Mod(res.F[<span class="number">0</span>]+mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> -= (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;F[<span class="number">0</span>]=Mod(F[<span class="number">0</span>]-x);F[<span class="number">0</span>]=Mod(F[<span class="number">0</span>]+mod);&#125;</span><br><span class="line">    Poly __Inv(<span class="keyword">int</span> n) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">            Poly res;</span><br><span class="line">            res.F.push_back(qpow(F[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Poly res=__Inv((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        Poly H;</span><br><span class="line">        cp(H.F,n);</span><br><span class="line">        Init(n&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        DFT(res.F),DFT(H.F);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line">            res.F[i]=<span class="number">1l</span>l*Mod(<span class="number">2</span><span class="number">-1l</span>l*res.F[i]*H.F[i]%mod+mod)*res.F[i]%mod;</span><br><span class="line">        IDFT(res.F);</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        <span class="keyword">return</span> __Inv(n);</span><br><span class="line">    &#125;      <span class="comment">//多项式求逆</span></span><br><span class="line">    Poly <span class="keyword">operator</span> / (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span> &#123;</span><br><span class="line">        Poly Gr=B,Q=*<span class="keyword">this</span>;</span><br><span class="line">        Q.R(),Gr.R();</span><br><span class="line">        <span class="keyword">int</span> N=F.size()-B.F.size()+<span class="number">1</span>;</span><br><span class="line">        Gr.F.resize(N);</span><br><span class="line">        Gr=Gr.Inv();</span><br><span class="line">        Q=Q*Gr;</span><br><span class="line">        Q.F.resize(N);</span><br><span class="line">        Q.R();</span><br><span class="line">        <span class="keyword">return</span> Q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> /= (<span class="keyword">const</span> Poly &amp;B) &#123;*<span class="keyword">this</span>=*<span class="keyword">this</span>/B;&#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> % (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span> &#123;</span><br><span class="line">        Poly Q=*<span class="keyword">this</span>/B;</span><br><span class="line">        Q*=B;</span><br><span class="line">        Q=*<span class="keyword">this</span>-Q;</span><br><span class="line">        Q.F.resize(B.F.size()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> Q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> %= (<span class="keyword">const</span> Poly &amp;B) &#123;*<span class="keyword">this</span>=*<span class="keyword">this</span>%B;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R</span><span class="params">()</span> </span>&#123;reverse(F.begin(),F.end());&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        F.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) F.push_back(Mod(a[i]+mod));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">OUT</span><span class="params">(<span class="keyword">int</span> len=<span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (len==<span class="number">-1</span>) len=F.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,F[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Derivative</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size()<span class="number">-1</span>;i++)</span><br><span class="line">            res.F.push_back(<span class="number">1l</span>l*(i+<span class="number">1</span>)*F[i+<span class="number">1</span>]%mod);</span><br><span class="line">        <span class="comment">//res.F.push_back(0);</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;      <span class="comment">//多项式求导</span></span><br><span class="line">    <span class="function">Poly <span class="title">Integral</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        Poly res,inv;</span><br><span class="line">        inv.F.resize(F.size());</span><br><span class="line">        inv.F[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;F.size();i++)&#123;</span><br><span class="line">            inv.F[i]=<span class="number">1l</span>l*(mod-mod/i)*inv.F[mod%i]%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        res.F.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;F.size();i++)</span><br><span class="line">            res.F.push_back(<span class="number">1l</span>l*inv.F[i]*F[i<span class="number">-1</span>]%mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;    <span class="comment">//多项式积分</span></span><br><span class="line">    <span class="function">Poly <span class="title">Ln</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        Poly res;</span><br><span class="line">        res=Derivative()*Inv(n);</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        res=res.Integral();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;    <span class="comment">//多项式对数函数</span></span><br><span class="line">    Poly __Sqrt(<span class="keyword">int</span> n) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">            Poly res;</span><br><span class="line">            res.push(intsqrt(F[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> Poly res,H,G;</span><br><span class="line">        res=__Sqrt((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        cp(G.F,n);</span><br><span class="line">        H=G*res.Inv(n);</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            res.F[i]=<span class="number">1l</span>l*(H.F[i]+res.F[i])*((mod+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>)%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Sqrt</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        <span class="keyword">return</span> __Sqrt(n);</span><br><span class="line">    &#125;   <span class="comment">//多项式开根</span></span><br><span class="line">    Poly __Exp(<span class="keyword">int</span> n) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            Poly res;</span><br><span class="line">            res.push(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Poly res=__Exp((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        Poly B=res.Ln(n),P;</span><br><span class="line">        cp(P.F,n);</span><br><span class="line">        B.F[<span class="number">0</span>]=Mod(F[<span class="number">0</span>]-B.F[<span class="number">0</span>]+<span class="number">1</span>+mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) B.F[i]=Mod(P.F[i]-B.F[i]+mod);</span><br><span class="line">        res*=B;</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125; <span class="comment">//多项式指数函数</span></span><br><span class="line">    <span class="function">Poly <span class="title">Exp</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        <span class="keyword">return</span> __Exp(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Pow</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> md=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (md==<span class="number">-1</span>) md=F.size();</span><br><span class="line">        <span class="keyword">return</span> (Ln(md)*k).Exp(md);</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; :: iterator it=F.end()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1l</span>l*x*(*it)%mod;</span><br><span class="line">        --it,res=Mod(res+*it);</span><br><span class="line">        <span class="keyword">for</span>(--it;it!=F.begin();--it)</span><br><span class="line">            res=(<span class="number">1l</span>l*res*x+*it)%mod;</span><br><span class="line">        res=(<span class="number">1l</span>l*res*x+(*it))%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;F.push_back(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Poly <span class="title">cos</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        <span class="keyword">int</span> I=intsqrt(mod<span class="number">-1</span>);</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">if</span> (I==<span class="number">-1</span>) <span class="keyword">return</span> res;</span><br><span class="line">        res=((*<span class="keyword">this</span>)*I).Exp(n);</span><br><span class="line">        <span class="keyword">return</span> (res+res.Inv(n))/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Poly <span class="title">sin</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        <span class="keyword">int</span> I=intsqrt(mod<span class="number">-1</span>);</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">if</span> (I==<span class="number">-1</span>) <span class="keyword">return</span> res;</span><br><span class="line">        res=((*<span class="keyword">this</span>)*I).Exp(n);</span><br><span class="line">        <span class="keyword">return</span> (res-res.Inv(n))/(<span class="number">2</span>*I%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Poly <span class="title">arcsin</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        Poly res=(*<span class="keyword">this</span>)*(*<span class="keyword">this</span>);</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        res=res*(<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line">        res=(*<span class="keyword">this</span>).Derivative()*((res.Sqrt(n)).Inv(n));</span><br><span class="line">        res.F.resize(n),res=res.Integral();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Poly <span class="title">arctan</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        Poly res=(*<span class="keyword">this</span>)*(*<span class="keyword">this</span>);</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        res=res+<span class="number">1</span>;</span><br><span class="line">        res=(*<span class="keyword">this</span>).Derivative()*(res.Inv(n));</span><br><span class="line">        res.F.resize(n),res=res.Integral();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="comment">//事实上这只是一只重载了运算符的vector</span></span><br><span class="line">Poly <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">int</span> A,<span class="keyword">const</span> Poly B) &#123;<span class="keyword">return</span> B+A;&#125;</span><br><span class="line">Poly <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">int</span> A,<span class="keyword">const</span> Poly B) &#123;<span class="keyword">return</span> B*A;&#125;</span><br><span class="line">Poly <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">int</span> A,<span class="keyword">const</span> Poly B) &#123;<span class="keyword">return</span> B*(<span class="number">-1</span>)+A;&#125;</span><br><span class="line"><span class="comment">//请在有氧环境下使用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> Polynomial::Poly;</span><br><span class="line"><span class="keyword">using</span> Polynomial::qpow;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[最短路]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/bzoj2125/</url>
        <content type="html"><![CDATA[<p>圆方树</p>
<a id="more"></a>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2125" target="_blank" rel="noopener">题目链接</a></p>
<p>建出圆方树，圆点到方点的距离为它爬到这个方点在圆方树的父亲的距离，圆点到圆点之间的距离为边长。</p>
<p>两个点的最短路长度分两种情况讨论：</p>
<p>$Lca$为圆点，那么就是树上距离</p>
<p>$Lca$为方点，那两个点就都爬到这个方点对应的环上，再求一个环上距离</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/09</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 500005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m,a[maxn],Q;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> len(x,y) (mp[make_pair(x,y)])</span></span><br><span class="line"><span class="built_in">map</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span> &gt; mp;</span><br><span class="line"><span class="keyword">namespace</span> Tree &#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(v,'\n');</span></span><br><span class="line">        nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    ll sum1[maxn&lt;&lt;<span class="number">1</span>],sum2[maxn&lt;&lt;<span class="number">1</span>],sum[maxn&lt;&lt;<span class="number">1</span>],Dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> f[maxn&lt;&lt;<span class="number">1</span>][<span class="number">20</span>],dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        dep[u]=dep[f[u][<span class="number">0</span>]]+<span class="number">1</span>,Dep[u]=Dep[f[u][<span class="number">0</span>]]+sum[u];</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(sum[u],' '),wrt(Dep[u],'\n');</span></span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">16</span>) f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        cross(i,u) f[to[i]][<span class="number">0</span>]=u,dfs(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">int</span> _lca(<span class="keyword">int</span> u,<span class="keyword">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (dep[f[u][i]]&gt;=dep[v]) u=f[u][i];</span><br><span class="line">        <span class="keyword">if</span> (u==v) <span class="keyword">return</span> u;</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (f[u][i]!=f[v][i]) u=f[u][i],v=f[v][i];</span><br><span class="line">        <span class="keyword">return</span> f[u][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (dep[f[u][i]]&gt;dep[v]) u=f[u][i];</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Lca=_lca(x,y);</span><br><span class="line">        <span class="keyword">if</span> (Lca&lt;=n) <span class="keyword">return</span> (Dep[x]+Dep[y]<span class="number">-2</span>*Dep[Lca]);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> xx=jump(x,Lca),yy=jump(y,Lca);</span><br><span class="line">            <span class="keyword">if</span> (sum1[xx]&lt;sum1[yy]) swap(xx,yy);</span><br><span class="line">            <span class="keyword">return</span> Dep[x]-Dep[xx]+Dep[y]-Dep[yy]+</span><br><span class="line">                min(sum1[xx]-sum1[yy],sum2[xx]+sum1[yy]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;</span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],val[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> L)</span> </span>&#123;</span><br><span class="line">    nx[++cnt]=hd[u],val[cnt]=L,to[cnt]=v,hd[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;dfn[u]) &#123;</span><br><span class="line">                Tree::add(u,v),top--;</span><br><span class="line">                Tree::sum[v]=val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (low[v]==dfn[u]) &#123;</span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">int</span> x=top;</span><br><span class="line">                <span class="keyword">while</span>(sta[x]!=v) Tree::add(n+tot,sta[x]),x--;</span><br><span class="line">                Tree::add(n+tot,sta[x]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">                Tree::sum1[sta[x]]=val[i];</span><br><span class="line">                rep(j,x+<span class="number">1</span>,top)</span><br><span class="line">                    Tree::sum1[sta[j]]=</span><br><span class="line">                        Tree::sum1[sta[j<span class="number">-1</span>]]+len(sta[j<span class="number">-1</span>],sta[j]);</span><br><span class="line">                Tree::sum2[sta[top]]=len(sta[top],u);</span><br><span class="line">                Tree::sum[sta[top]]=</span><br><span class="line">                    min(Tree::sum1[sta[top]],Tree::sum2[sta[top]]);</span><br><span class="line">                drp(j,top<span class="number">-1</span>,x)&#123;</span><br><span class="line">                    Tree::sum2[sta[j]]=</span><br><span class="line">                        Tree::sum2[sta[j+<span class="number">1</span>]]+len(sta[j+<span class="number">1</span>],sta[j]);</span><br><span class="line">                    Tree::sum[sta[j]]=</span><br><span class="line">                        min(Tree::sum1[sta[j]],Tree::sum2[sta[j]]);</span><br><span class="line">                &#125;</span><br><span class="line">                top=x<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"test.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"test.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    n=rd(),m=rd();Q=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd(),z=rd();</span><br><span class="line">        add(x,y,z),add(y,x,z);</span><br><span class="line">        len(x,y)=len(y,x)=z;</span><br><span class="line">    &#125;</span><br><span class="line">    tarjan(<span class="number">1</span>,<span class="number">0</span>);Tree::dfs(<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,Q)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        wrt(Tree::dis(x,y),<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[小C的独立集]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/bzoj4316/</url>
        <content type="html"><![CDATA[<p>圆方树入门</p>
<a id="more"></a>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4316" target="_blank" rel="noopener">题目链接</a></p>
<p>建出圆方树，圆点和圆点之间按正常转移，遇到圆点和方点时，把整个环拉出来，单独跑一遍$DP$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/09</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 500005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m,a[maxn];</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(v,'\n');</span></span><br><span class="line">        nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mx;</span><br><span class="line">    <span class="keyword">int</span> dp[maxn][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> Dp[maxn][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> A,<span class="keyword">int</span> B,<span class="built_in">vector</span> &lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; x)</span> </span>&#123; </span><br><span class="line">        Dp[<span class="number">0</span>][<span class="number">0</span>]=A,Dp[<span class="number">0</span>][<span class="number">1</span>]=B;</span><br><span class="line">        rep(i,<span class="number">1</span>,x.size()<span class="number">-1</span>)&#123;</span><br><span class="line">            Dp[i][<span class="number">0</span>]=max(Dp[i<span class="number">-1</span>][<span class="number">0</span>],Dp[i<span class="number">-1</span>][<span class="number">1</span>])+x[i].second;</span><br><span class="line">            Dp[i][<span class="number">1</span>]=Dp[i<span class="number">-1</span>][<span class="number">0</span>]+x[i].first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        cross(i,u)<span class="keyword">if</span> (to[i]!=fa)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span> (v&gt;n) &#123;</span><br><span class="line">                pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ans;</span><br><span class="line">                <span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; vt;</span><br><span class="line">                <span class="keyword">int</span> tt=<span class="number">0</span>;</span><br><span class="line">                cross(j,v) &#123;</span><br><span class="line">                    dfs(to[j],v);</span><br><span class="line">                    vt.push_back(make_pair(dp[to[j]][<span class="number">1</span>],dp[to[j]][<span class="number">0</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> xx=vt[<span class="number">0</span>].first,yy=vt[<span class="number">0</span>].second;</span><br><span class="line">                tt=vt.size()<span class="number">-1</span>;</span><br><span class="line">                DP(yy,xx,vt),dp[u][<span class="number">0</span>]+=max(Dp[tt][<span class="number">0</span>],Dp[tt][<span class="number">1</span>]);</span><br><span class="line">                DP(yy,<span class="number">-2333333</span>,vt),dp[u][<span class="number">1</span>]+=Dp[tt][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[u][<span class="number">0</span>]+=max(dp[v][<span class="number">0</span>],dp[v][<span class="number">1</span>]);</span><br><span class="line">                dp[u][<span class="number">1</span>]+=dp[v][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[u][<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(u,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> max(dp[u][<span class="number">0</span>],dp[u][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;  </span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]==dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v) </span><br><span class="line">                    Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">        Tree::mx=<span class="number">0</span>;</span><br><span class="line">        tarjan(i,<span class="number">0</span>),ans+=Tree::calc(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd(),m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y),add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    init(n);</span><br><span class="line">    wrt(ans,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[铁人两项]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/luogu-4630/</url>
        <content type="html"><![CDATA[<p>圆方树入门</p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P4630" target="_blank" rel="noopener">题目链接</a></p>
<p>转化一下题意，等价于求$\sum\limits_x\sum\limits_y S_{x,y}$</p>
<p>$S_{x,y}$表示$x$到$y$的所有<strong>不经过重复点的路径</strong>可能经过的点的个数</p>
<p>建出圆方树，方点权值为点双大小，圆点权值为$-1$，问题就变成了求树上所有<strong>圆点</strong>对的<strong>路径长度</strong>之和</p>
<p>路径长度定义为树上两点路径经过点的权值和（包含这两点）。</p>
<p>每个点的贡献就是经过它的路径数$×$它的权值</p>
<p><strong>注意：图不一定联通</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 600005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 600005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m;</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line">    <span class="keyword">int</span> g[maxn&lt;&lt;<span class="number">1</span>],mx;</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=u&lt;=n;</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">            <span class="keyword">int</span> x=dfs(to[i],u);</span><br><span class="line">            ans+=<span class="number">2l</span>l*g[u]*x*sum;</span><br><span class="line">            sum+=x;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=<span class="number">2l</span>l*g[u]*sum*(mx-sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;  </span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;=dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;Tree::g[n+tot]=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v) </span><br><span class="line">                    Tree::g[n+tot]++,Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) Tree::g[i]=<span class="number">-1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">        Tree::mx=<span class="number">0</span>;</span><br><span class="line">        tarjan(i,<span class="number">0</span>),Tree::dfs(i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd(),m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y),add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    init(n);</span><br><span class="line">    wrt(Tree::ans,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[圆方树]]></title>
        <url>http://zxy-hhhh.cn/2019/01/08/yuanfangshu/</url>
        <content type="html"><![CDATA[<p>出题人把序列上的题加个树剖放到树上是错误的<del>应该加个圆方树放到仙人掌上</del></p>
<p>圆方树题的整理和一个模板</p>
<a id="more"></a>
<h1 id="圆方树"><a href="#圆方树" class="headerlink" title="圆方树"></a>圆方树</h1><p>初学的话点<a href="https://www.cnblogs.com/cjyyb/p/9098400.html" target="_blank" rel="noopener">这里</a></p>
<p>然后放个建树模板</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="comment">//if (low[v]&gt;dfn[u]) Tree::add(u,v);else </span></span><br><span class="line">            <span class="comment">//仙人掌时加上句</span></span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;=dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v)</span><br><span class="line">                    Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="problems"><a href="#problems" class="headerlink" title="problems"></a>problems</h2><p><a href="http://zxy-hhhh.cn/2019/01/09/luogu-4630/">铁人两项</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/bzoj4316/">小C的独立集</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/bzoj2125">最短路</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/CF487E">tourists</a></p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[小清新数据结构题]]></title>
        <url>http://zxy-hhhh.cn/2019/01/06/luogu-3676/</url>
        <content type="html"><![CDATA[<p><del>真是小清新</del></p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3676" target="_blank" rel="noopener">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>查询以$x$为根时的所有子树的权值和的平方和，带单点修改、</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p><strong>为了表达方便，记$q$为询问的点，我们用$x$表示$1$到$q$路径上的点</strong></p>
<h3 id="可以先-O-n-的处理出以-1-为根时："><a href="#可以先-O-n-的处理出以-1-为根时：" class="headerlink" title="可以先$O(n)$的处理出以$1$为根时："></a>可以先$O(n)$的处理出以$1$为根时：</h3><p>​    答案，记为$Ans$</p>
<p>​    每颗子树的权值和，记为$S_i$</p>
<p>​    所有点权值和，记为$Sum$</p>
<p>​    点的深度，记为$dep_i$，$dep_1=1$</p>
<h3 id="考虑修改"><a href="#考虑修改" class="headerlink" title="考虑修改"></a>考虑修改</h3><p>修改点$q$，记原来值和当前值差为$d$</p>
<p>$Sum=Sum+dep_x*d$</p>
<p>$Ans=Ans-\sum\limits_x(S_x)^2+\sum\limits_x(S_x+d)^2$</p>
<p>$=Ans-\sum\limits_x(S_x)^2+\sum\limits_x(S_x)^2+2S_xd+d^2$</p>
<p>$=Ans+\sum\limits_{x}2S_xd+d^2$</p>
<p>$=Ans+2 d\sum\limits_x S_x+dep_x d^2$</p>
<p>所有$S_x=S_x+d$</p>
<h3 id="当根换为-q-时"><a href="#当根换为-q-时" class="headerlink" title="当根换为$q$时"></a>当根换为$q$时</h3><p>此时点$x$，不含点$q$，$S_x$会变为$Sum-S_{son}$，$S_{son}$表示$x$的包含点$q$的子树的大小</p>
<p>其余点不变</p>
<p>所以答案为</p>
<p>$Ans-\sum\limits_x(S_x)^2+Sum^2+\sum\limits_x(Sum-S_x)^2$</p>
<p>$=Ans+\sum\limits_x(Sum-S_x)^2-(S_x)^2+Sum^2$</p>
<p>平方差公式展开</p>
<p>$=Ans+Sum^2+\sum\limits Sum(Sum-2S_x)$</p>
<p>$=Ans+Sum^2+Sum\sum\limits Sum-2S_x$</p>
<p>$=Ans+Sum^2+Sum^2dep_x+2Sum\sum\limits S_x$</p>
<p>用树剖+树状数组维护<strong>链上加</strong>，<strong>链上求和</strong>就好了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>时间复杂度$O(nlog^2n)$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/04</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">namespace</span> Tree_Array</span><br><span class="line">&#123;</span><br><span class="line">    ll sum[maxn],Sum[maxn];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=i&amp;(-i))</span><br><span class="line">            sum[i]+=val,Sum[i]+=<span class="number">1l</span>l*x*val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=i&amp;(-i))</span><br><span class="line">            ans+=(x+<span class="number">1</span>)*sum[i]-Sum[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span> </span>&#123;add(l,x),add(r+<span class="number">1</span>,-x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> getsum(r)-getsum(l<span class="number">-1</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line">    <span class="keyword">int</span> top[maxn],sz[maxn],fa[maxn],son[maxn],dep[maxn];</span><br><span class="line">    <span class="keyword">int</span> val[maxn],a[maxn];</span><br><span class="line">    <span class="keyword">int</span> sum[maxn];</span><br><span class="line">    ll Ans,S;</span><br><span class="line">    <span class="keyword">int</span> idx[maxn],id;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dep[u]=dep[fa[u]]+<span class="number">1</span>,sz[u]=<span class="number">1</span>;sum[u]=a[u];</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa[u])&#123;</span><br><span class="line">            fa[to[i]]=u,dfs(to[i]);</span><br><span class="line">            sz[u]+=sz[to[i]],sum[u]+=sum[to[i]];</span><br><span class="line">            <span class="keyword">if</span> (sz[son[u]]&lt;sz[to[i]]) son[u]=to[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx[u]=++id;val[id]=a[u];</span><br><span class="line">        top[u]=tp;</span><br><span class="line">        <span class="keyword">if</span> (son[u]) dfs(son[u],tp);</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa[u]&amp;&amp;to[i]!=son[u]) dfs(to[i],to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(<span class="number">1</span>),dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        Tree_Array::n=id;</span><br><span class="line">        rep(i,<span class="number">1</span>,id) Tree_Array::update(idx[i],idx[i],sum[i]),Ans+=sum[i]*sum[i];</span><br><span class="line">        S=sum[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link_update</span><span class="params">(<span class="keyword">int</span> x,ll val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            Tree_Array::update(idx[top[x]],idx[x],val);</span><br><span class="line">            <span class="keyword">if</span> (top[x]==<span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">            x=fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">sigma</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            ans+=Tree_Array::query(idx[top[x]],idx[x]);</span><br><span class="line">            <span class="keyword">if</span> (top[x]==<span class="number">1</span>) <span class="keyword">return</span> ans;</span><br><span class="line">            x=fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> Ans+S*S+<span class="number">1l</span>l*dep[x]*S*S<span class="number">-2l</span>l*S*sigma(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,ll val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll delta=val-a[x],s1=sigma(x),s2=dep[x];</span><br><span class="line">        Ans+=<span class="number">2</span>*s1*delta+delta*delta*dep[x];</span><br><span class="line">        S+=delta;</span><br><span class="line">        link_update(x,delta);</span><br><span class="line">        a[x]=val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd();</span><br><span class="line">    <span class="keyword">int</span> m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y);add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=rd();</span><br><span class="line">    init();</span><br><span class="line">    rep(_i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> op=rd();</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=rd(),val=rd();</span><br><span class="line">            update(x,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x=rd();</span><br><span class="line">            wrt(query(x),<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[大森林]]></title>
        <url>http://zxy-hhhh.cn/2018/12/13/bzoj4573/</url>
        <content type="html"><![CDATA[<p>有趣的LCT题<br><a id="more"></a></p>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4573" target="_blank" rel="noopener">题目链接</a></p>
<h2 id="写在前面的一些结论："><a href="#写在前面的一些结论：" class="headerlink" title="写在前面的一些结论："></a>写在前面的一些结论：</h2><ol>
<li><p>合法的$2$操作只会在一段连续的区间内发生，所以合法$2$操作也只会在一段区间内发生，因此我们可以把更换生长节点的区间，和加点区间取并，使$2$操作一定合法</p>
</li>
<li><p>如果$2$操作一定合法，加点操作区间从l~r变为1~n并不影响答案</p>
</li>
<li><p>一个询问在该询问进入时处理，和之后处理，答案并不改变，并且只有涉及到该树的操作才会对这个询问产生影响</p>
</li>
</ol>
<p><del>结论是显然的</del></p>
<p>知道这些之后，来考虑如何解决；</p>
<h2 id="一个想法"><a href="#一个想法" class="headerlink" title="一个想法"></a>一个想法</h2><p>可以基于上面结论，产生一个<del>愚蠢的</del>想法</p>
<p>设$x$为$2$操作后的生长节点，$y$为之前的</p>
<p>将$2$操作拆成两次：</p>
<ol>
<li>在$l$处，将之后加入所有点，换到$x$下面</li>
<li>在$r+1$处,将之后加入所有点，换回$y$下面</li>
</ol>
<p>然后将询问和$2$操作按位置排序，从1~n扫一遍，依次处理就得到了$O(n^{2})$的优秀做法</p>
<h2 id="那么如何优化"><a href="#那么如何优化" class="headerlink" title="那么如何优化"></a>那么如何优化</h2><h3 id="虚点"><a href="#虚点" class="headerlink" title="虚点!!!"></a>虚点!!!</h3><p>对每一个$2$操作建一个虚点，每个虚点的父节点是前一个虚点，第一个虚点的父亲是1</p>
<p>每一次加点就加到当前最后一个虚点下面就好了。</p>
<p>每次移动就直接将该$2$操作对应的虚点及其子树移到新的生长节点下<del>然而还是T</del></p>
<h3 id="统计答案"><a href="#统计答案" class="headerlink" title="统计答案"></a>统计答案</h3><p>我们让虚点权值为0，实点为1</p>
<p>设一个点i到根路径上权值和为 $S_{i}$(包含自身权值)</p>
<p>$dis(u,v)=S_{u}+S_{v}-2S_{lca}$</p>
<p>大家举几个栗子，想象一下，就知道这是对的。<del>我不会证</del></p>
<h3 id="LCT大法吼！！！"><a href="#LCT大法吼！！！" class="headerlink" title="LCT大法吼！！！"></a>LCT大法吼！！！</h3><p>移动子树相当于换父亲，LCT就可以了。</p>
<p>但是此处<strong>LCT 不能换根</strong>，因为有虚点，不同于普通树上路径，所以根的位置对答案会产生影响。</p>
<p>此处cut操作一定是儿子cut父亲，所以直接cut掉就可以了，like this<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(u);splay(u);fa[son[u][<span class="number">0</span>]]=<span class="number">0</span>,son[u][<span class="number">0</span>]=<span class="number">0</span>;</span><br></pre></td></tr></table></figure></p>
<p>而link操作也一定是一颗树的根去link，所以也直接link就好了，像这样<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(v),splay(v),fa[v]=u;</span><br></pre></td></tr></table></figure></p>
<p>然后就愉快的A了此题，时间复杂度$O(nlogn)$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/07</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, a, b) for (int x = int(a); x &lt;= (int)(b); x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x, a, b) for (int x = int(a); x &gt;= (int)(b); x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x, a) for (int x = hd[a]; x; x = nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll _x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> _ch = getchar(), _f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(_ch) &amp;&amp; (_ch != <span class="string">'-'</span>) &amp;&amp; (_ch != EOF); _ch = getchar())</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">if</span> (_ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">        _f = <span class="number">0</span>;</span><br><span class="line">        _ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(_ch); _ch = getchar()) _x = _x * <span class="number">10</span> + _ch - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f ? _x : -_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_x &gt;= <span class="number">10</span>)</span><br><span class="line">        write(_x / <span class="number">10</span>), <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">putchar</span>(_x + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x, <span class="keyword">char</span> _p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">    write(_x);</span><br><span class="line">    <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LCT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> son[maxn][<span class="number">2</span>], val[maxn], sum[maxn], fa[maxn], cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> son[fa[x]][<span class="number">1</span>] != x &amp;&amp; son[fa[x]][<span class="number">0</span>] != x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sum[x] = sum[son[x][<span class="number">0</span>]] + sum[son[x][<span class="number">1</span>]] + val[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = fa[x], z = fa[y], d = son[y][<span class="number">1</span>] == x;</span><br><span class="line">        <span class="keyword">if</span> (!isroot(y)) son[z][son[z][<span class="number">1</span>] == y] = x;</span><br><span class="line">        fa[y] = x, fa[x] = z;</span><br><span class="line">        fa[son[x][!d]] = y, son[y][d] = son[x][!d];</span><br><span class="line">        son[x][!d] = y;</span><br><span class="line">        update(y), update(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; !isroot(x);) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = fa[x], z = fa[y];</span><br><span class="line">            <span class="keyword">if</span> (!isroot(y))</span><br><span class="line">                (son[y][<span class="number">1</span>] == x) ^ (son[z][<span class="number">1</span>] == y) ? rotate(x) : rotate(y);</span><br><span class="line">            rotate(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x; t = x, x = fa[x]) splay(x), son[x][<span class="number">1</span>] = t, update(x);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; fa[v] = u; &#125;<span class="comment">//因为先有cut所以可以不access</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        access(u);</span><br><span class="line">        splay(u);</span><br><span class="line">        fa[son[u][<span class="number">0</span>]] = <span class="number">0</span>, son[u][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Sum = <span class="number">0</span>;</span><br><span class="line">        access(x);</span><br><span class="line">        splay(x);</span><br><span class="line">        Sum += sum[x];</span><br><span class="line">        <span class="keyword">int</span> lca = access(y);</span><br><span class="line">        splay(y);</span><br><span class="line">        Sum += sum[y];</span><br><span class="line">        access(lca);</span><br><span class="line">        splay(lca);</span><br><span class="line">        Sum -= sum[lca] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changefa</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>  <span class="comment">// xxc's fahter was hje before,but now his father is me</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cut(x);</span><br><span class="line">        link(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        access(x);</span><br><span class="line">        splay(x);</span><br><span class="line">        <span class="keyword">return</span> son[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">new_node</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sum[++cnt] = x, val[cnt] = x;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; lct;</span><br><span class="line"><span class="keyword">int</span> to[maxn];</span><br><span class="line"><span class="keyword">int</span> cl[maxn], cr[maxn], ans[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, p, r, cnt, QwQ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, w, x, y, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query &amp;B) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (w &lt; B.w) || (w == B.w &amp;&amp; op &lt; B.op);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    to[<span class="number">1</span>] = lct.new_node(<span class="number">1</span>);</span><br><span class="line">    lct.link(<span class="number">1</span>, lct.new_node(<span class="number">0</span>));</span><br><span class="line">    cl[<span class="number">1</span>] = <span class="number">1</span>, cr[<span class="number">1</span>] = n;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">2</span>, w = <span class="number">1</span>;</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">            cl[++w] = rd(), cr[w] = rd();</span><br><span class="line">            lct.link(now, to[w] = lct.new_node(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd(), pre = now;</span><br><span class="line">            l = <span class="built_in">std</span>::max(l, cl[x]), r = <span class="built_in">std</span>::min(r, cr[x]);</span><br><span class="line">            <span class="keyword">if</span> (l &gt; r) <span class="keyword">continue</span>;</span><br><span class="line">            now = lct.new_node(<span class="number">0</span>);</span><br><span class="line">            Q[++cnt].op = <span class="number">1</span>, Q[cnt].w = l, Q[cnt].x = now, Q[cnt].y = to[x];</span><br><span class="line">            Q[++cnt].op = <span class="number">1</span>, Q[cnt].w = r + <span class="number">1</span>, Q[cnt].x = now, Q[cnt].y = pre;</span><br><span class="line">            lct.link(pre, now);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Q[++cnt].w = rd();</span><br><span class="line">            <span class="keyword">int</span> x = rd(), y = rd();</span><br><span class="line">            Q[cnt].op = <span class="number">2</span>, Q[cnt].x = x, Q[cnt].y = y;</span><br><span class="line">            Q[cnt].id = ++QwQ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(Q + <span class="number">1</span>, Q + <span class="number">1</span> + cnt);</span><br><span class="line">    rep(i, <span class="number">1</span>, cnt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[i].op == <span class="number">1</span>)</span><br><span class="line">            lct.changefa(Q[i].x, Q[i].y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans[Q[i].id] = lct.dis(to[Q[i].x], to[Q[i].y]);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">1</span>, QwQ) wrt(ans[i], <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> LCT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[about-zxy]]></title>
        <url>http://zxy-hhhh.cn/2018/12/06/about-zxy/</url>
        <content type="html"><![CDATA[<p>博客运行一段时间了，也有了一点文章了，该来个about me了<br><a id="more"></a></p>
<h2 id="about我的ID"><a href="#about我的ID" class="headerlink" title="about我的ID"></a>about我的ID</h2><p>我常以<strong>zxy_hhhh</strong>及<strong>地狱小鬼366</strong>(无法输入中文时为<strong>dyxg</strong>)的ID游荡于各大OJ、社交网站&amp;&amp;<del>游戏</del></p>
<h2 id="关于OI生涯"><a href="#关于OI生涯" class="headerlink" title="关于OI生涯"></a>关于OI生涯</h2><p>去年拿了个pj1=，今天tg GG了<del>不过1=还是有的</del>；<br>之后的么。。。待续</p>
<h2 id="关于博客内容"><a href="#关于博客内容" class="headerlink" title="关于博客内容"></a>关于博客内容</h2><p>一般是一些<strong>题解</strong>或者<strong>对算法/数据结构的理解</strong>。</p>
<h2 id="一些解释"><a href="#一些解释" class="headerlink" title="一些解释"></a>一些解释</h2><p>关于加密文章<del>虽然前端的加密是扯淡</del>，因为一些政治原因无法公开</p>
<p>关于访问速度问题，因为我部署在github上的，国内访问速度就。。。<br>不过，过几天我说不定会往coding上部署一份，届时访问速度就会好多了</p>
<p>头像什么的还在搞。。。</p>
<p>评论系统的话因为主题的一些原因，用了disqus，可能对不能科学上网的童鞋有些不友好。</p>
<p>还有本人码风各种变换，原因有两个</p>
<pre><code>   1. 有时候我会用vscode格式化代码
   2. 最近在改码风
</code></pre><p>过段时间去提交一下网站链接，做一下SEO吧，到时候goolge那里一定会有的<del>baidu就看心情吧</del></p>
<h2 id="如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））"><a href="#如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））" class="headerlink" title="如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））"></a>如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））</h2><hr>
<p>先写这么多吧，其他的想到了再补</p>
]]></content>
        
        
    </entry>
    
    <entry>
        <title><![CDATA[不勤劳的图书管理员]]></title>
        <url>http://zxy-hhhh.cn/2018/12/05/bzoj3110/</url>
        <content type="html"><![CDATA[<p><del>暴力可以AC</del></p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3759" target="_blank" rel="noopener">题目链接</a></p>
<p>先算出不修改时的答案；</p>
<p>对于的位置i贡献就是</p>
<p>$\Sigma_{j=1}^{j<i} a[j]+a[i]="" (v[j]="">v[i])$</i}></p>
<p>然后对于每一次修改，考虑对答案的影响就是y移到x减少的和x移到y增加的<br>而影响只会出现在(x,y)</p>
<p>具体就是：</p>
<p>(x,y)对x产生的逆序对，y对(x,y)产生的逆序对会失去</p>
<p>(x,y)对y产生的逆序对，x对(x,y)产生的逆序对会增加入答案</p>
<p>如何维护a[i]+a[j]?</p>
<p>用树套树维护<strong>(x,y)大于等于x的数</strong>的<strong>个数</strong>和<strong>这些数的和</strong></p>
<hr>
<p>不能用指针，不然空间会GG</p>
<p>要外层<strong>树状数组</strong>内层<strong>线段树</strong>，不然空间GG</p>
<p>外层<strong>线段树</strong>内层<strong>平衡树</strong>空间OK的，不过时间就呵呵了<br><del>机房某大佬卡了一上午常之后彻底弃疗，写了暴力</del></p>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/05</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lb(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], w[maxn], m, Ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span> ? (x + mod) : (x &gt;= mod ? x - mod : x); &#125;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum,ls,rs;</span><br><span class="line">&#125;tr[<span class="number">20000000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u) u = ++cnt;</span><br><span class="line">    tr[u].sum = Mod(tr[u].sum + k);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        insert(tr[u].ls, l, mid, x, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(tr[u].rs, mid + <span class="number">1</span>, r, x, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="keyword">return</span> (query(tr[u].ls, l, mid, ql, qr) + query(tr[u].rs, mid + <span class="number">1</span>, r, ql, qr)) %</span><br><span class="line">           mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> tr[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt;= n; x += lb(x)) xtree::insert(tr[x], <span class="number">1</span>, n, k, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x; x -= lb(x)) ans = Mod(ans + xtree::query(tr[x], <span class="number">1</span>, n, L, R));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mod(query(R, l, r) - query(L - <span class="number">1</span>, l, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tr1, tr2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    rep(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        w[i] = rd(), a[i] = rd();</span><br><span class="line">        tr1.update(i, w[i], a[i]), tr2.update(i, w[i], <span class="number">1</span>);</span><br><span class="line">        Ans = Mod(Ans + tr1.query(i - <span class="number">1</span>, w[i], n)),</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(i - <span class="number">1</span>, w[i], n) * a[i] % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = rd(), y = rd();</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) swap(x, y);</span><br><span class="line">        <span class="keyword">if</span> (x==y) &#123;wrt(Ans,<span class="string">'\n'</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        Ans = Mod(Ans - tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[y], n));</span><br><span class="line">        Ans = Mod(Ans + tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[x], n));</span><br><span class="line">        Ans = Mod(Ans - tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[x]));</span><br><span class="line">        Ans = Mod(Ans + tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[y]));</span><br><span class="line">        Ans = Mod(Ans - <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[y], n) * a[y] % mod);</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[x], n) * a[x] % mod);</span><br><span class="line">        Ans = Mod(Ans - <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[x]) * a[x] % mod);</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[y]) * a[y] % mod);</span><br><span class="line">        <span class="keyword">if</span> (w[x] &gt; w[y])</span><br><span class="line">            Ans -= a[x] + a[y];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Ans += a[x] + a[y];</span><br><span class="line">        Ans=Mod(Ans);</span><br><span class="line">        tr1.update(x, w[x], -a[x]), tr1.update(x, w[y], a[y]);</span><br><span class="line">        tr1.update(y, w[y], -a[y]), tr1.update(y, w[x], a[x]);</span><br><span class="line">        tr2.update(x, w[x], <span class="number">-1</span>), tr2.update(x, w[y], <span class="number">1</span>);</span><br><span class="line">        tr2.update(y, w[y], <span class="number">-1</span>), tr2.update(y, w[x], <span class="number">1</span>);</span><br><span class="line">        swap(w[x], w[y]), swap(a[x], a[y]);</span><br><span class="line">        wrt(Ans, <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//wrt(xtree::cnt,'\n');</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[初学树套树]]></title>
        <url>http://zxy-hhhh.cn/2018/12/05/tree-tao-tree/</url>
        <content type="html"><![CDATA[<p>最近写了点树套树，感觉也没那么可怕</p>
<a id="more"></a>
<h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><p>很多用于动态维护区间的一些东西，比如：区间内大于等于x的数的个数、区间前驱后继等等</p>
<p>主要思想很简单，就是 对外层树的<strong>每一个节点</strong>建一个内层树</p>
<p>具体实现方式可见例题</p>
<h2 id="来几个-栗子"><a href="#来几个-栗子" class="headerlink" title="来几个 栗子"></a>来几个 栗子</h2><p><a href="http://zxy-hhhh.cn/2018/12/03/luogu-3759/">K大数查询</a><br><a href="http://zxy-hhhh.cn/2018/12/03/bzoj3196/">二逼平衡树</a><br><a href="http://zxy-hhhh.cn/2018/12/05/bzoj3110/">不勤劳的图书管理员</a><br>先写到这里吧</p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[K大数查询]]></title>
        <url>http://zxy-hhhh.cn/2018/12/03/luogu-3759/</url>
        <content type="html"><![CDATA[<p>模板题</p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3759" target="_blank" rel="noopener">题目链接</a></p>
<p>因为有区间修改，所以外层建权值线段树，内层建区间树</p>
<p>处理修改：对所有包含c的外层树节点所对应的内层树的a~b区间+1</p>
<p>处理询问：在外层树上二分，若当前节点的<strong>右子树的内层树</strong>a~b区间和&gt;c就往左子树走，否则往右</p>
<hr>
<p>注意:</p>
<p>   区间树要<strong>标记永久化</strong>，不然如果写的不够优秀会 MLE or TLE</p>
<p>   此题luogu上时限只有1s，大部分代码<del>包括本人代码</del>会被卡常，获得0~100不等的分数。</p>
<p>   在往左子树走时要减掉右子树a~b区间和带来的贡献</p>
<hr>
<p>在具体实现的时候，我为了图方便用了<strong>指针</strong>和<strong>namespace</strong></p>
<p>如果你看不懂指针，可以往下翻，有无指针的代码</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/01</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, a, b) for (int x = int(a); x &lt;= (int)(b); x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x, a, b) for (int x = int(a); x &gt;= (int)(b); x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x, a) for (int x = hd[a]; x; x = nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> lazy;</span><br><span class="line">    ll sum;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="literal">NULL</span>) u = <span class="keyword">new</span> node;</span><br><span class="line">    <span class="keyword">if</span> (ql == l &amp;&amp; r == qr) &#123;</span><br><span class="line">        u-&gt;lazy++, u-&gt;sum += r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    u-&gt;sum += qr - ql + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        insert(u-&gt;ls, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        insert(u-&gt;rs, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(u-&gt;ls, l, mid, ql, mid), insert(u-&gt;rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(node *u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql == l &amp;&amp; qr == r) <span class="keyword">return</span> u-&gt;sum;</span><br><span class="line">    ll ans = (qr - ql + <span class="number">1</span>) * u-&gt;lazy;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> ans + query(u-&gt;ls, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> ans + query(u-&gt;rs, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(u-&gt;ls, l, mid, ql, mid) + ans +</span><br><span class="line">               query(u-&gt;rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="keyword">namespace</span> ytree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    xtree::node *rt;</span><br><span class="line">&#125; tr[<span class="number">400005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    xtree::insert(tr[pos].rt, <span class="number">1</span>, n, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        insert(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">    ll sum = xtree::query(tr[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rt, <span class="number">1</span>, n, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= x)</span><br><span class="line">        <span class="keyword">return</span> query(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x - sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace ytree</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, l, r;</span><br><span class="line">    ll c;</span><br><span class="line">&#125; Q[maxn];</span><br><span class="line"><span class="keyword">int</span> H[maxn], tot;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd(), l = rd(), r = rd();</span><br><span class="line">        ll x = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) ytree::insert(<span class="number">1</span>, -n, n, l, r, x);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">2</span>) wrt(ytree::query(<span class="number">1</span>, -n, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[二逼平衡树]]></title>
        <url>http://zxy-hhhh.cn/2018/12/03/bzoj3196/</url>
        <content type="html"><![CDATA[<p>码量稍微有大，不过思路清晰还是好写的</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3196" target="_blank" rel="noopener">题目链接</a></p>
<p>外层线段树，内层平衡树</p>
<p>操作1 4 5就是在线段树上取出区间，然后平衡树内求答案，合并答案</p>
<p>修改也没什么好讲的，和上一题比较相似</p>
<p>操作2要<strong>二分答案</strong>，然后转化为1</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">	date: 2018/12/03</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">	<span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">	<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">	<span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ( (l + r) &gt;&gt; 1 </span></span><br><span class="line"><span class="keyword">int</span> a[maxn], n, m;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">nil</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sz, val, fix;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">    node(<span class="keyword">int</span> x) : sz(<span class="number">1</span>), val(x), fix(rand()) &#123; ls = rs = nil; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123; sz = ls-&gt;sz + rs-&gt;sz + <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nil = <span class="keyword">new</span> node(<span class="number">0</span>);</span><br><span class="line">    nil-&gt;ls = nil-&gt;rs = nil;</span><br><span class="line">    nil-&gt;sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(node *now, <span class="keyword">int</span> k, node *&amp;x, node *&amp;y, <span class="keyword">int</span> op = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (now == nil) &#123;</span><br><span class="line">        x = y = nil;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span> ? now-&gt;val &lt; k : now-&gt;ls-&gt;sz &lt; k) &#123;</span><br><span class="line">        x = now;</span><br><span class="line">        split(now-&gt;rs, (op == <span class="number">1</span> ? k : k - now-&gt;ls-&gt;sz - <span class="number">1</span>), x-&gt;rs, y, op);</span><br><span class="line">        x-&gt;update();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = now;</span><br><span class="line">        split(now-&gt;ls, k, x, y-&gt;ls, op);</span><br><span class="line">        y-&gt;update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node *<span class="title">merge</span><span class="params">(node *x, node *y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == nil) <span class="keyword">return</span> y;</span><br><span class="line">    <span class="keyword">if</span> (y == nil) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;fix &lt; y-&gt;fix) &#123;</span><br><span class="line">        x-&gt;rs = merge(x-&gt;rs, y);</span><br><span class="line">        <span class="keyword">return</span> x-&gt;update(), x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y-&gt;ls = merge(x, y-&gt;ls);</span><br><span class="line">        <span class="keyword">return</span> y-&gt;update(), y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    rt = merge(x, merge(<span class="keyword">new</span> node(val), y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    split(y, <span class="number">1</span>, y, z, <span class="number">2</span>);</span><br><span class="line">    rt = merge(x, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val, x, y), split(x, x-&gt;sz - <span class="number">1</span>, x, z, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (z == nil)</span><br><span class="line">        ans = -inf;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = (z-&gt;val);</span><br><span class="line">    rt = merge(x, merge(z, y));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nxt</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val + <span class="number">1</span>, x, y), split(y, <span class="number">1</span>, y, z, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (y == nil)</span><br><span class="line">        ans = inf;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = y-&gt;val;</span><br><span class="line">    rt = merge(x, merge(y, z));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    <span class="keyword">if</span> (x == nil)</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = x-&gt;sz;</span><br><span class="line">    rt = merge(x, y);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="keyword">namespace</span> ytree &#123;</span><br><span class="line">xtree::node *tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> -inf;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::pre(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> max(pre(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x),</span><br><span class="line">               pre(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::nxt(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> min(nxt(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x),</span><br><span class="line">               nxt(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::rank(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> rank(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x) +</span><br><span class="line">           rank(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    xtree::del(tr[pos], a[x]), xtree::insert(tr[pos], v);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        change(pos &lt;&lt; <span class="number">1</span>, l, mid, x, v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        change(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">atrank</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">100000000</span>, ans;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rank(<span class="number">1</span>, <span class="number">1</span>, n, L, R, mid) &lt; k)</span><br><span class="line">            ans = mid, l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[pos] = xtree::nil;</span><br><span class="line">    rep(i, l, r) xtree::insert(tr[pos], a[i]);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    build(pos &lt;&lt; <span class="number">1</span>, l, mid), build(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace ytree</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd();</span><br><span class="line">    m = rd();</span><br><span class="line">    xtree::init();</span><br><span class="line">    rep(i, <span class="number">1</span>, n) a[i] = rd();</span><br><span class="line">    ytree::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::rank(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x) + <span class="number">1</span>, <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::atrank(l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = rd(), k = rd();</span><br><span class="line">            ytree::change(<span class="number">1</span>, <span class="number">1</span>, n, x, k);</span><br><span class="line">            a[x] = k;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::pre(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::nxt(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[ss]]></title>
        <url>http://zxy-hhhh.cn/1028/12/06/my-ss/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1/Hq00nPEG9IIudi6TaKUOdp94/afQPNFplAUecZ3qlLRpWXrEoDMzclAWCSDM2foFi+hYQabGcyTizRFATHjLs9OrXJPtXD2Wq0p68gmpTj00vYMV7JGMTFKl+b0LeQSpkPcSlxytA3O/hApTXfBC6Y/TJXf4kUV/5t1GzcEFSEgIFIZ3G0ksQ+FUEoT3iuczSWnK4pJRnmVdFXk2NTF/0j/vHFOPUVYpFVB1JOUTroRQyJILhZms0pmVuZ5kImpK14MoZlo8Bpm04IqAZ6k98gQZPb5fe35/O9cflLdGYLbThdmi2liDW53Eg2dMGTPv/mFmRX8NUoY463TxLkpsbiorvzccYg4UGzHB2U8lkUxOwwMwV7RJsSYRI54/qCs6ddT+Tuf5kS8cAJyQzEQyqM7Rr6nGb6nO6c5dt96RQtwcH5gq5sbfNnVGFeaO8HzLiW6uusg8QjKC1Yw+uZmYq5KBWKOW8ay6pntdEiViYuDABlkcmcZC04w8QDxb7Rhpy4cxv67Ilo/2AKxiJNdcqostx8OqxhQuWWNEKc3zVKJNHp5CTp37wyZFAlEtLRCG3EZKvNbgr7eHszYjZ4+Ly59tAGWm03rsoyS+w++pByOfpkj6sJVK1Bo/+BWV/piskoDzEtEO2PHyyPOz97rhPg4pSRybfatZph2XALi2mYpCLL/uWXKsFOPBP5ViKcrlNqq/zrUZCdttg3oG5jJPQrPYQPjosguJulor6YCYQ4osYWohKEGSeM5g/LZbuoM7evkm9NDI3p46PXF2Vx6/4x3wu9NtzfgBgM/srYsYMBlJbPNjXR/A/rrtogKpydhncezHcJCsiGF4EGBwd3tqYm84P6BhB0PG1FhdSyZjKTpAdHr3UBQnbOR5iTsaV1C4pspASRGb58QK/zpnB3nO7vZmvd1W4ZCgWhFKpiCfP852oi3l+WYSeZSgxToTRZNdGHXuTUjrq0rf7d8m1qJMNsZO5a9J5Z/Jp30qhxip+TGUSuC4Ab0L/BasKzaNc1PN6W7sKgBcv56kZ92rsDieRM+n+QBFu4YiB6clFVbL3QgLvXUK9dXVhQd6D3XbZp4aAjKNN4kUSH0Glr5o9Im8Vvro8E54qTvgpZGDvXS6GkHCC8dfNfH5OKMgNmUOra2kk/oVF6dkBgJkUAnd3FAnSdhyq7dwOWMVkb3aCyLrXzEYzZQVlQOSUZaavOVjoK2hmNBYX42UcgMDx4gojd9cvNGGbjcx1nsPHWVOVhJDQw3snrQ+3LweBxJ3HonNjHAfxVn0kAjUEPv1zgfF9h45x7ZhUbdNbKb4fKYWw7zDCJwFV2xR/XQXTg0H6wIdDCw71n3WVAdIVqCSt5Y19E7pMvPwrILKNtMqrqSBpRtXKiUUoq0fSpVcFpLGTtptermypzcVeOcdgqSQQ3vyDIT+bwF1cRhwD6ADHRzI+1Ee6H1+x6pguu6c/+xZvOHVo6AvQwO7nUE39wWHCY+T4pqpG8e/fy2tBi8i+dCo7y2CrPMMkJ/uVvtvsYY7EIFS8Wk5pVtdhmmpj30Qn9gRNEcx6QrCyPdivitF7BDhTOeUIpcVNl4Q29ivC7SYZOBMmvOoltKcCctcvgPQ4s9CU1GAzBJoZxp04360O/fegtAt+VtfA53A+zQlEMr+q6zxGxna87TqVQXzPgOk9pj/hJQsNzi10ykaOxuBeq8IFlwpjJfBpqfnUTMoHi4d04q+iHo/8cA5q7DLyC8FFvB1TEoo3YzDV9ebCPrkfm7xYgC2T+QAwcIFxcQT1iIL0YaicVtq4pES6ZKtEneuZByA/snJRQJLHTrqhoOcpBwPpkLx1X0sdmosLSABofol9xiHDEMmoym9QMKm+3iBVI8EYsgDkRWrQXdjTa6ogo0CJcBS5rZxQDl59E1DY6p16Kl0QtF1FJEmCUaupwG7jpeaJPKC3naToeuwqsB65SPxQZ+M/V4KJdxIBVll/mAxIcXmmoZ6AAdpLD/9ca8OiR9fgqpMIaAqJbGiBzN7tMop1/UH94rhasi+hV2GJ9Qe54mCclMf5pfWXHHHlpsSfDKX4aWvf77A90+Nnf2XgSKFrYVmOvxQqzM6mx2vIYKwdmJGUDfwUOOYGLjv3Vdtkn/R7rVwufxJvdSGPqPhfgx4YovOsjfQs9DcnaygbKUjg+7IhcJhKNZN9kdeo8yHzYgCmA/EOiFUZpoSYZtfdm7gxYrXjZasGAEGVyE6faFK5Gew75bUM2woLyeIsbyLCaRS1xi2YPV9dj6n4jynTKZZEx72c03IdrStbiFeRXNjKemZ7qzQEGIm9fzC7Bf13LryvGgnx4SEjFyz5IkjHpCcXWjOnHLZCBoVb5JbS9rBOyyyPkT0pLw3F7bLo+lVCCG8s3CJsDfm9MZq/NqUW9bJM3Ck65A4/4BqaQIe6qn31yycOY7Qhtst0qGCGLf3hXqF5UOjwZ84/Peo81c8BqxPF9hFKzY/3puC4lzcXImLTI/a4IGoCf626BIEnlV9fBSf+EZJOqNNTbZxk79BKtnWvMalb9Ap2JWFbTZCWMrGxtCu7DJnpUupswmAeTCPRTXpATu38hvGLqMWqHWHhJh2++yCucXlGoOb+EsEh047PpEYmMGvRh7lVn5ZeR4oadaZLAefCQ7MoXyXtH5mco+o1gjwUEeEdm9U1y5djl1cEcIhFEdMaoXmcdwbLvMXl0hgxKYKgFhQL9wV2kWvu5eP0LWlRfn4Gp4Vca56H9ZbFsC9OGIVbycI5Or9cznYnOG204Dqa1Mtbc4OmjiRfXgrQ+1YRvitbYTNbkMA0nocD12F47dC3C+D2NdlpEjPbsYkf9aDuh2zovUmIWrnsgx9FHeTa2ZkWB5OYFqc6HEMD3vIPa8pYKVilnRJWZD8Ozt8lKUA+VyrjoWyR/I6AUwf7gpJDfCKbtvbCEvcAy/tBxEKcdkuzDraIUS20fML6LYxgqMkgz0Z2ryC0m21o2pazLL13iyUF/K9A/QTDy4LvpfcyZKfn1hYy/iQoXb2JA9qZjB3cZ+BIknnYP9q1wsH1xEnusFohJstgWlNMms+7EnybB5bVpWUe9taJksb15kfYAolkE1XqnDlWlNevHwgqluWgTtDKP6rIjKooTtyHA7ZHAWzr6qfiSPuoYdSYJK1bz1neRafpxyN2Z5VTOf5zTIZjfi08TA1Mq/XEpgEWQfy8c3wx5ZV18OTcwyo3B4xcQqJ3rgfAw9D3iBvvgCy+6j3ilrlAW+fNV4QJup0bjQ1RwN5M7Y0j17Z2u/owkyL+90yBTZjdX2eUp8TveV4pt1Rl+k+5pMbEoOX3q8XQuOGzNOMCWHBJXNwCXQlQ5r+eNB31zwJgCMSVO3bjvfgdaYWzFdDMGTq9WioIPYA4tXVfaCcLAy27Nm+NVreoHRzn8jGZ2zuTA4GjVntYOaQRNOf9ol9WvuhMK0T0JbwgDrEEE7f1xS+MNUAbbZCEW7QAAODMg60dCFhSKmIEeAssHYxCJoIUKte0fgrJ4rveElXgVg93qnMBOgptOG3CVSle0RsAhtZLwxqCb7kziEFRE2Q77vtF/soAiMqJX7fRZh+bC3wuUoPSPfjhaIUVa83h3mXBDfuPJEEm6YNBt41uWKerS4d3qRBggnkZGNYfUlXe3UvbjZ98QUhFVo6/JTjk9zIlHRb+yetYKMWRdHtYmNx8lvWLDteZJmwj1xLTaHzHVsugJXBDrklRZpMzs4ay6PIsWvBH3azqkEIIPTwkBEMhijGmL9oWg0S8Kr9qHV29D2swFaXDocjjhXAc88r0K7yNqKsorvcOxY9TD94x+8xe8o+ZYblYtGYUOklFDHK0czMqJdeGBRXHWaLxFIQx3xzmKZ7Fga/jS4flQmu7Z5Jqx4sHJ1zl1ksFBpW3BpT4f90sN0FIxl0LO4bo4mbLBOHFY/jIq0ZGf6fKM1umG9U+ypoMGF81InCTRYVX59JG7WfxFUIcd/F9XwxkSCFWbZBu8ndAjv+xjeLZc+NqnKvaRqrtj1iQI+MUjJrWn08YB6UHiAIBk5fFs01+ZZtO5/q/kubN9Q2FnCVLqul2n71rb64FCF/iqeWkwhiRBsU4xfnAOxdKnl2oZMgECP3uL36POoVQy184vgwWeoYIvnjVk1+ltzqUH+PrPL2toqiNCfU/yY04+7YBvJz7Bffl8uC1yrVq2DP/CM2jjuQZWJk1LO8AZrkVrgC7Qp7fwYgTfQ3ByCs8gAUfnR72CxiVNM0ATE1yI7byb71YSquAI7VVkJTOwgHxqGSUfuedz+/ykXHdMesvc8v+hgU3CXQRSoaDkvVfrHZcA4iV0sPVeq0ySQuf5HbmuzYxWlmUMrorkDIi8aCqVbycN9GeRilnKQT4mQ7B/lLLk+E5364xuHx9I8t3idRejT1Y3avD88YnVuPUVuxEwxoEtSIAque5IFTBrrYnyysgEgx8k5sOS1+ltdytnp9swb5F9e20kWOkUWL0yPdFOtBkVmJpsf/B152R+xVpilXOPlRqKWf64f2SpsbOCd2O9yWZd9fCPyRzKg6P3JQeJuItbTkbi8JhQEuSjOqNeZUMoXS63m0Gyp5C6/n4LI0yCEMQP1wlJC6HUGY5rPGHj9bJwOvGygHmy/OHeapsP6gkXk8AG1it0+p6fCN34nCZ/jLtlxSI0l8TdjYZIpAPbSwKg/ItlAGgjUVXGpF8nk0Z33xJIov8Af1u5vB28XwGevLuv9nWL6z/NpI64sihF2ylnYGKasJp+11XjlLhnhXoLIbKBSwH0t48vKwsYpOrx9sWfSSkd+9yP7ReiqEKv4d0Xsh2siG81oOvcss8fKFe7htbCcIx6z6xGyTfgJorkeK+lC8wtCQu1WcTr6TG9uWYO6dFWn9+CVb/VkHnmjfldHrpXGhXgPAAgSNqbIfqgCxOwZVU3eEg62XF0SEJ3F95lLkBUluy6BgsdAQFpNwFAiPauuQvGXQVhGI1RIT0Er76rOu1/8GeXEmNFVBiYXrQvtcWjYSKZ/rxX0wLYsh1KKHg7gBhwZloeBBQF5+QkpFVrXGv8Yzp4Z6SjyYim0+BCQ==
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        
    </entry>
    
    
    
</search>
