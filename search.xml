<?xml version="1.0" encoding="utf-8"?>
<search>
    
    
    <entry>
        <title><![CDATA[图的价值]]></title>
        <url>http://zxy-hhhh.cn/2019/03/06/bzoj5093/</url>
        <content type="html"><![CDATA[<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5093" target="_blank" rel="noopener">题目</a></p>
<p>首先可以单独计算一个点的贡献，最后乘上$n$。</p>
<p>那么我们可以列出柿子：<br>$$<br>ans=n2^{\binom{n-1}{2}}\sum\limits_{i=0}^{n-1}\binom{n-1}{i}i^k<br>$$</p>
<p>考虑它的意义：取出一个点，枚举它的度数，其他点可以随便连</p>
<p>然后这个式子并过不来这题</p>
<p>这个$\sum$前面部分处理起来比较方便，考虑化后面部分。</p>
<p>考虑一个柿子：<br>$$<br>n^k=\sum\limits_{i=0}^kS(k,i)\binom{n}{i}i!<br>$$<br>证明：左边表示把$k$个球放入n个不同的盒子中的方案数，右边表示枚举有$i$个盒子非空的方案，两者相等。（组合意义）</p>
<p>实际上这个式子的枚举上界因为$n$，但是改为$k$结果不变</p>
<p>知道这个柿子之后就可以化简</p>
<p>$$<br>\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\sum\limits_{j=0}^kS(k,j)\binom{i}{j}j!\<br>=\sum\limits_{j=0}^kS(k,j)j!\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\binom{i}{j}<br>$$</p>
<p>然后</p>
<p>$$<br>\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\binom{i}{j}=\binom{n-1}{j}2^{n-1-j}<br>$$<br>证明：左边为$n-1$个人中选$i$个，$i$个中再轩$j$个，右边为先选出$j$个人，然后其他人是否被选择皆可（组合意义）</p>
<p>然后</p>
<p>$$<br>\sum\limits_{j=0}^kS(k,j)j!\binom{n-1}{j}2^{n-1-j}\<br>=\sum\limits_{j=0}^k S(k,j)\frac{(n-1)!}{(n-1-j)!}2^{n-1-j}<br>$$</p>
<p>然后用$NTT$算出斯特林数后即可</p>
<p>复杂度$O(klogk)$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/03/06</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">-1</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f*_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 800005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inv2 499122177</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g 3</span></span><br><span class="line"><span class="keyword">int</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> lim,l,r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> type = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type) &#123;</span><br><span class="line">        lim = <span class="number">1</span>, l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (lim &lt;= len) lim &lt;&lt;= <span class="number">1</span>, l++;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        lim = <span class="number">1</span> &lt;&lt; len, l = len;</span><br><span class="line">    rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) r[i] = ((r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + mod : (x &gt;= mod ? x - mod : x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, ll k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, x = <span class="number">1l</span>l * x * x % mod)</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = <span class="number">1l</span>l * ans * x % mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) <span class="keyword">if</span> (i &lt; r[i]) swap(a[i], a[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; lim; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> Wn = qpow(g, (mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">-1</span>) Wn = qpow(Wn, mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lim; j += R)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, w = <span class="number">1</span>; k &lt; mid; k++, w = <span class="number">1l</span>l * w * Wn % mod) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[j + k], y = <span class="number">1l</span>l * w * a[j + mid + k] % mod;</span><br><span class="line">                a[j + k] = Mod(x + y);</span><br><span class="line">                a[j + mid + k] = Mod(x - y);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = qpow(lim, mod - <span class="number">2</span>);</span><br><span class="line">        rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) a[i] = <span class="number">1l</span>l * a[i] * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> F[maxn],G[maxn],fac[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n=rd(),k=rd();</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,k) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    rep(i,<span class="number">0</span>,k) &#123;</span><br><span class="line">        F[i]=<span class="number">1l</span>l*((i&amp;<span class="number">1</span>)?<span class="number">998244352</span>:<span class="number">1</span>)*qpow(fac[i],mod<span class="number">-2</span>)%mod;</span><br><span class="line">        G[i]=<span class="number">1l</span>l*qpow(i,k)*qpow(fac[i],mod<span class="number">-2</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    init(k+k);</span><br><span class="line">    NTT(F,<span class="number">1</span>),NTT(G,<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) s[i]=<span class="number">1l</span>l*F[i]*G[i]%mod;</span><br><span class="line">    NTT(s,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,sn=<span class="number">1</span>,s2=qpow(<span class="number">2</span>,n<span class="number">-1</span>);</span><br><span class="line">    ans=<span class="number">1l</span>l*s[<span class="number">0</span>]*s2%mod;</span><br><span class="line">    rep(i,<span class="number">1</span>,k) &#123;</span><br><span class="line">        s2=<span class="number">1l</span>l*s2*inv2%mod;</span><br><span class="line">        sn=<span class="number">1l</span>l*sn*(n-i)%mod;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*s[i]*sn%mod*s2)%mod;</span><br><span class="line">       <span class="comment">// wrt(ans,'\n');</span></span><br><span class="line">    &#125;</span><br><span class="line">    wrt(<span class="number">1l</span>l*ans*n%mod*qpow(<span class="number">2</span>,<span class="number">1l</span>l*(n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">2</span>)%mod,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0211]]></title>
        <url>http://zxy-hhhh.cn/2019/02/11/contest0211/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[杜教筛]]></title>
        <url>http://zxy-hhhh.cn/2019/01/17/dujiaoshai/</url>
        <content type="html"><![CDATA[<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>内容总结自</p>
<p><a href="https://acfcacfca.blog.luogu.org/dls-tql" target="_blank" rel="noopener">https://acfcacfca.blog.luogu.org/dls-tql</a>(AcF’s Blog)</p>
<h2 id="常规做法"><a href="#常规做法" class="headerlink" title="常规做法"></a>常规做法</h2><p>杜教筛用于解决求$S(n)=\sum\limits_{i=1}^nf(i)$的问题</p>
<p>有一种常规做法：</p>
<p>找一个数论函数$g$，</p>
<p>$$<br>\begin{align}<br>\sum\limits_{i=1}^n (f*g)i\<br>=\sum\limits_{i=1}^n\sum\limits_{d|i}f(\frac{i}{d})g(d)\<br>=\sum\limits_{d=1}^n g(d) \sum\limits_{i=1}^{\lfloor\frac{n}{d}\rfloor} f(i)\<br>=\sum\limits_{d=1}^n g(d)S(\frac{n}{d})\<br>=g(1)S(n)+\sum\limits_{d=2}^n g(d)S(\frac{n}{d})<br>\end{align}<br>$$</p>
<p>我们要求的是$S(n)$，</p>
<p>$\sum\limits_{i=1}^n (f*g)i=g(1)S(n)+\sum\limits_{d=2}^n g(d)S(\frac{n}{d})$</p>
<p>$g(1)S(n)=\sum\limits_{i=1}^n (f*g)i-\sum\limits_{d=2}^n g(d)S(\frac{n}{d})$</p>
<p>只要能找到可以快速求$\sum\limits_{i=1}^n(f*g)i$和$g$的前缀和的$g$即可。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>$$<br>\begin{align}<br>S(n)=\sum\limits_{i=1}^n\mu(i)\<br>\mu*I=e\<br>\text{求}I\text{和}e\text{的前缀和}<br>\end{align}<br>$$</p>
<p>$$<br>\begin{align}<br>S(n)=\sum\limits_{i=1}^n\varphi(i)\<br>\varphi*I=id<br>\text{求}id\text{和}id\text{的前缀和}<br>\end{align}<br>$$</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    ll ans=sum_f_g<span class="comment">//算f*g前缀和</span></span><br><span class="line">    <span class="keyword">for</span>(ll l=<span class="number">2</span>;r&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=n/(n/l);</span><br><span class="line">        ans-=(sum_g(r)-sum_g(l<span class="number">-1</span>))*calc(n/l);</span><br><span class="line">        <span class="comment">//sum_g用于算g的前缀和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以先筛出前$n^{\frac{2}{3}}$个答案</p>
<p>复杂度为$O(n^{\frac{2}{3}})$</p>
<p>可以使用$hash$记忆化来有化复杂度</p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 杜教筛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0111]]></title>
        <url>http://zxy-hhhh.cn/2019/01/11/contest0111/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0110]]></title>
        <url>http://zxy-hhhh.cn/2019/01/10/contest0110/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[多项式]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/Polynomial/</url>
        <content type="html"><![CDATA[<p>这里是一些模板<del>然而并不会写教程</del></p>
<a id="more"></a>
<h1 id="一些求法"><a href="#一些求法" class="headerlink" title="一些求法"></a>一些求法</h1><h2 id="FFT"><a href="#FFT" class="headerlink" title="$FFT$"></a>$FFT$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> xx=<span class="number">0</span>,<span class="keyword">double</span> yy=<span class="number">0</span>)&#123;x=xx,y=yy;&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x+B.x,y+B.y);&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x-B.x,y-B.y);&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x*B.x-y*B.y,B.x*y+x*B.y);&#125;</span><br><span class="line">&#125;a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,r[maxn],l,lim;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *A,<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">if</span> (i&lt;r[i]) swap(A[i],A[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;lim;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">complex</span> <span class="title">Wn</span><span class="params">(<span class="built_in">cos</span>(Pi/mid),type*<span class="built_in">sin</span>(Pi/mid))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> R=mid&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=R)&#123;</span><br><span class="line">            <span class="function"><span class="keyword">complex</span> <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k++,w=w*Wn)&#123;</span><br><span class="line">                <span class="keyword">complex</span> x=A[j+k],y=w*A[j+mid+k];</span><br><span class="line">                A[j+k]=x+y;</span><br><span class="line">                A[j+mid+k]=x-y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NTT"><a href="#NTT" class="headerlink" title="$NTT$"></a>$NTT$</h2><p>把单位根换成原根</p>
<h2 id="分治NTT"><a href="#分治NTT" class="headerlink" title="分治NTT"></a>分治NTT</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NTT(a,<span class="number">1</span>),NTT(b,<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) a[i]=<span class="number">1l</span>l*a[i]*b[i]%mod;</span><br><span class="line">    NTT(a,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lim=<span class="number">1</span>,l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;=n)lim=lim&lt;&lt;<span class="number">1</span>,++l;</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) r[i]=((r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(l<span class="number">-1</span>))),A[i]=B[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdqNTT</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    cdqNTT(l,mid);</span><br><span class="line">    init(r-l+<span class="number">1</span>);</span><br><span class="line">    rep(i,l,mid) A[i-l]=a[i];</span><br><span class="line">    rep(i,<span class="number">0</span>,r-l) B[i]=b[i];</span><br><span class="line">    mul(A,B);</span><br><span class="line">    rep(i,mid+<span class="number">1</span>,r) a[i]-=A[i-l],a[i]=a[i]&lt;<span class="number">0</span>?a[i]+mod:a[i];</span><br><span class="line">    cdqNTT(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h2><p>$$<br>n==1:<br>\<br>f(x) \equiv c (mod\ x)\ \ \ \ \ \ c为常数<br>\<br>f^{-1} \equiv c^{-1} (mod\ x)<br>\<br>n&gt;1:<br>\<br>f(x)g(x) \equiv 1 (mod\ x^n)<br>\<br>设<br>f(x)g’(x) \equiv 1 (mod\ x^{\lceil\frac{n}{2}\rceil})<br>\<br>f(x)g(x) \equiv 1 (mod\ x^{\lceil\frac{n}{2}\rceil})<br>\<br>以上两式相减<br>\<br>g(x)-g’(x) \equiv 0 (mod\ x^{\lceil\frac{n}{2}\rceil})<br>\<br>两边平方<br>\<br>g^2(x)-2g’(x)g(x)+g’^2(x)\equiv 0(mod\ x^n)<br>\<br>同乘f(x)<br>\<br>g(x)\equiv 2g’(x)-f(x)g’^2(x)(mod x^n)<br>\<br>时间复杂度:<br>T(n)=T(\frac{n}{2})+O(n log n)=O(n log n)<br>$$</p>
<h2 id="MTT"><a href="#MTT" class="headerlink" title="$MTT$"></a>$MTT$</h2><p>此坑待填<del>暂时就不填了吧</del></p>
<h2 id="多项式求导"><a href="#多项式求导" class="headerlink" title="多项式求导"></a>多项式求导</h2><p>$$<br>f(x)=\sum\limits_{i=0}^{\infty} a_ix^i\<br>f’(x)=\sum\limits_{i=0}^{\infty} a_{i+1}*(i+1)x^i<br>$$</p>
<h2 id="多项式积分"><a href="#多项式积分" class="headerlink" title="多项式积分"></a>多项式积分</h2><p>$$<br>f(x)=\sum\limits_{i=0}^{\infty} a_ix^i\<br>\int f(x)dx=\sum\limits_{i=1}^{\infty} \frac{a_{i-1}}{i}x^i<br>$$</p>
<h2 id="多项式求对数函数"><a href="#多项式求对数函数" class="headerlink" title="多项式求对数函数"></a>多项式求对数函数</h2><p>$$<br>设f(x)=ln\ x\</p>
<p>B(x)=f(A(x))\</p>
<p>B’(x)=f’(A(x))A’(x)=\frac{A’(x)}{A(x)}\</p>
<p>B(x)=\int B’(x)dx\<br>$$</p>
<h2 id="多项式除法"><a href="#多项式除法" class="headerlink" title="多项式除法"></a>多项式除法</h2><p><a href="https://www.luogu.org/blog/user7035/solution-p4512" target="_blank" rel="noopener">来源</a></p>
<p>$f(x)$为$n$次多项式<br>设$f_R(x)=x^nf(\frac{1}{x})$<br>容易发现$f_R(x)$为$f(x)$翻转得来，即$f_R[i]=f[n-i]​$</p>
<p>下面开始推柿子<br>$$<br>F(x)=Q(x)<em>G(x)+R(x)\<br>x^nF(\frac{1}{x})=x^{n-m}Q(\frac{1}{x})</em>x^mG(\frac{1}{x})+x^nR(\frac{1}{x})\<br>F_R(x)=Q_R(x)<em>G_R(x)+x^{n-m+1}R_R(x)\<br>F_R(x)\equiv Q_R(x)</em>G_R(x)(\bmod x^{n-m+1})\<br>Q_R(x)=F_R(x)<em>G_R(x)^{-1}\<br>R_R=F(x)-G(x)</em>Q(x)<br>$$</p>
<h2 id="多项式开根"><a href="#多项式开根" class="headerlink" title="多项式开根"></a>多项式开根</h2><p><a href="https://www.luogu.org/blog/Owencodeisking/solution-p5205" target="_blank" rel="noopener">来源</a><br>$$<br>设H(x)^2 \equiv A(x) (\mod x^{\lceil \frac{n}{2} \rceil} )\<br>G(x)-H(x) \equiv 0 (\mod x^{\lceil \frac{n}{2} \rceil} )\<br>(G(x)-H(x))^2 \equiv 0 (\mod x^n)\<br>G(x)^2-2H(x)G(x)+H(x)^2 \equiv 0(\mod x^n)\<br>F(x)-2H(x)G(x)+H(x)^2\equiv 0 (\mod x^n)\<br>G(x)=\frac{F(x)+H(x)^2}{2H(x)} (\mod x^n)<br>$$</p>
<h2 id="多项式exp"><a href="#多项式exp" class="headerlink" title="多项式exp"></a>多项式exp</h2><p><a href="https://www.luogu.org/problemnew/solution/P4726" target="_blank" rel="noopener">具体看这里</a><br>$$<br>设H_1(x)=e^{A(x)}(\mod x^{\lceil \frac{n}{2} \rceil})\<br>牛顿迭代公式得\<br>H=H_1(1-Ln(H_1)+A) (\mod x^n)<br>$$</p>
<h1 id="一个综合的板子"><a href="#一个综合的板子" class="headerlink" title="一个综合的板子"></a>一个综合的板子</h1><p>写的很naive</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 900005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g 3</span></span><br><span class="line"><span class="keyword">namespace</span> Polynomial &#123;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k=mod<span class="number">-2</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, x = <span class="number">1l</span>l * x * x % mod)</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = <span class="number">1l</span>l * ans * x % mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&gt;=mod?x-mod:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> lim;</span><br><span class="line"><span class="keyword">int</span> _a[maxn],_b[maxn],_c[maxn];</span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    lim=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lim &lt;= len) lim &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;lim; i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        w[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> t=qpow(<span class="number">3</span>, (mod<span class="number">-1</span>)/i/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; ++j) w[i+j]=<span class="number">1l</span>l*w[i+j<span class="number">-1</span>]*t%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DFT</span><span class="params">(<span class="keyword">int</span> *f, <span class="keyword">int</span> n=lim)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> F[maxn];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">        F[i]=f[j];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=n&gt;&gt;<span class="number">1</span>; (j^=k)&lt;k; k&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i&lt;&lt;=<span class="number">1</span>) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j+=i&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> *W=w+i;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *F0=F+j, *F1=F+j+i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j; k&lt;j+i; ++k, ++W, ++F0, ++F1)&#123;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t=(*F1)*(*W)%mod;</span><br><span class="line">                (*F1)=*F0+mod-t, (*F0)+=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) f[i]=F[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IDFT</span><span class="params">(<span class="keyword">int</span> *f, <span class="keyword">int</span> n=lim)</span></span>&#123;</span><br><span class="line">    reverse(f+<span class="number">1</span>, f+n);</span><br><span class="line">    DFT(f, n);</span><br><span class="line">    <span class="keyword">int</span> I=qpow(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) f[i]=<span class="number">1l</span>l*f[i]*I%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> *A,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vt,<span class="keyword">int</span> sz,<span class="keyword">int</span> L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sz&gt;<span class="keyword">int</span>(vt.size())) sz=vt.size();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz;i++) A[i]=vt[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=sz;i&lt;L;i++) A[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *A,<span class="keyword">int</span> *B)</span> </span>&#123;</span><br><span class="line">	DFT(A),DFT(B);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) A[i]=<span class="number">1l</span>l*A[i]*B[i]%mod;</span><br><span class="line">	IDFT(A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; intmul(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; x, pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; y,<span class="keyword">int</span> f)&#123;</span><br><span class="line">    <span class="keyword">return</span> make_pair((<span class="number">1l</span>l*x.first*y.first+<span class="number">1l</span>l*x.second*y.second%mod*f)%mod,</span><br><span class="line">                     (<span class="number">1l</span>l*x.second*y.first+<span class="number">1l</span>l*x.first*y.second)%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">intsqrt</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=<span class="number">1</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span>(qpow(a, (mod<span class="number">-1</span>)/<span class="number">2</span>)!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> x, f;</span><br><span class="line">    <span class="keyword">do</span> x=(rand())%(a<span class="number">-1</span>)+<span class="number">1</span>; <span class="keyword">while</span>(qpow(f=(<span class="number">1l</span>l*x*x-a+mod)%mod, (mod<span class="number">-1</span>)/<span class="number">2</span>)==<span class="number">1</span>);</span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ans=make_pair(<span class="number">1</span>, <span class="number">0</span>), t=make_pair(x, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=(mod+<span class="number">1</span>)/<span class="number">2</span>; i; i&gt;&gt;=<span class="number">1</span>, t=intmul(t, t, f)) </span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) ans=intmul(ans, t, f);</span><br><span class="line">    <span class="keyword">return</span> min(ans.first, mod-ans.first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Poly</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; F;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> Poly &amp;B) &#123;F=B.F;&#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> + (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        res.F.resize(<span class="built_in">std</span>::max(F.size(),B.F.size()));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++) </span><br><span class="line">            res.F[i]=F[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            res.F[i]=Mod(res.F[i]+B.F[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> +=(<span class="keyword">const</span> Poly &amp;B) &#123;</span><br><span class="line">        <span class="keyword">if</span>(B.F.size()&gt;F.size()) F.resize(B.F.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            F[i]=Mod(B.F[i]+F[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> - (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        res.F.resize(<span class="built_in">std</span>::max(F.size(),B.F.size()));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++) </span><br><span class="line">            res.F[i]=F[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            res.F[i]=Mod(res.F[i]-B.F[i]+mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> -=(<span class="keyword">const</span> Poly &amp;B) &#123;</span><br><span class="line">        <span class="keyword">if</span>(B.F.size()&gt;F.size()) F.resize(B.F.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            F[i]=Mod(F[i]-B.F[i]+mod);</span><br><span class="line">	&#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> * (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">int</span> N=F.size()+B.F.size()<span class="number">-1</span>;</span><br><span class="line">        Init(N);</span><br><span class="line">        copy(_a,F,N,lim),copy(_b,B.F,N,lim);</span><br><span class="line">		mul(_a,_b);</span><br><span class="line">        res.F.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) res.F.push_back(_a[i]);</span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> *= (<span class="keyword">const</span> Poly &amp;B) &#123;</span><br><span class="line">        *<span class="keyword">this</span>=*<span class="keyword">this</span>*B;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++) </span><br><span class="line">            res.F.push_back(<span class="number">1l</span>l*F[i]*x%mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> *= (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++)</span><br><span class="line">            F[i]=<span class="number">1l</span>l*F[i]*x%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*<span class="keyword">this</span>)*(qpow(x,mod<span class="number">-2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">int</span> p=qpow(x,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++)</span><br><span class="line">            F[i]=<span class="number">1l</span>l*F[i]*p%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res=*<span class="keyword">this</span>;</span><br><span class="line">        res.F[<span class="number">0</span>]=Mod(res.F[<span class="number">0</span>]+x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;F[<span class="number">0</span>]=Mod(F[<span class="number">0</span>]+x);&#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res=*<span class="keyword">this</span>;</span><br><span class="line">        res.F[<span class="number">0</span>]=Mod(res.F[<span class="number">0</span>]-x+mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> -= (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;F[<span class="number">0</span>]=Mod(F[<span class="number">0</span>]-x+mod);&#125;</span><br><span class="line">    <span class="keyword">void</span> __Inv(<span class="keyword">int</span> n) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            _b[<span class="number">0</span>]=qpow(F[<span class="number">0</span>],mod<span class="number">-2</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        __Inv((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        Init((n<span class="number">-1</span>)*<span class="number">2</span>);</span><br><span class="line">        copy(_a,F,n,lim);</span><br><span class="line">        DFT(_a),DFT(_b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line">            _b[i]=<span class="number">1l</span>l*Mod(<span class="number">2</span><span class="number">-1l</span>l*_a[i]*_b[i]%mod+mod)*_b[i]%mod;</span><br><span class="line">        IDFT(_b);</span><br><span class="line">        rep(i,n,lim<span class="number">-1</span>) _b[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        <span class="built_in">memset</span>(_a,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(n&lt;&lt;<span class="number">2</span>));</span><br><span class="line">        <span class="built_in">memset</span>(_b,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(n&lt;&lt;<span class="number">2</span>));</span><br><span class="line">        __Inv(n);</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) res.F.push_back(_b[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;      <span class="comment">//多项式求逆</span></span><br><span class="line">    Poly <span class="keyword">operator</span> / (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span> &#123;</span><br><span class="line">        Poly Gr=B,Q=*<span class="keyword">this</span>;</span><br><span class="line">        Q.R(),Gr.R();</span><br><span class="line">        <span class="keyword">int</span> N=F.size()-B.F.size()+<span class="number">1</span>;</span><br><span class="line">        Gr.F.resize(N);</span><br><span class="line">        Gr=Gr.Inv();</span><br><span class="line">        Q=Q*Gr;</span><br><span class="line">        Q.F.resize(N);</span><br><span class="line">        Q.R();</span><br><span class="line">        <span class="keyword">return</span> Q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> /= (<span class="keyword">const</span> Poly &amp;B) &#123;*<span class="keyword">this</span>=*<span class="keyword">this</span>/B;&#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> % (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span> &#123;</span><br><span class="line">        Poly Q=*<span class="keyword">this</span>/B;</span><br><span class="line">        Q*=B;</span><br><span class="line">        Q=*<span class="keyword">this</span>-Q;</span><br><span class="line">        Q.F.resize(B.F.size()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> Q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> %= (<span class="keyword">const</span> Poly &amp;B) &#123;*<span class="keyword">this</span>=*<span class="keyword">this</span>%B;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R</span><span class="params">()</span> </span>&#123;reverse(F.begin(),F.end());&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        F.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) F.push_back(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">OUT</span><span class="params">(<span class="keyword">int</span> len=<span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (len==<span class="number">-1</span>) len=F.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,F[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Derivative</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size()<span class="number">-1</span>;i++)</span><br><span class="line">            res.F.push_back(<span class="number">1l</span>l*(i+<span class="number">1</span>)*F[i+<span class="number">1</span>]%mod);</span><br><span class="line">        <span class="comment">//res.F.push_back(0);</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;      <span class="comment">//多项式求导</span></span><br><span class="line">    <span class="function">Poly <span class="title">Integral</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        res.F.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;F.size();i++)</span><br><span class="line">            res.F.push_back(<span class="number">1l</span>l*qpow((i),mod<span class="number">-2</span>)*F[i<span class="number">-1</span>]%mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;    <span class="comment">//多项式积分</span></span><br><span class="line">    <span class="function">Poly <span class="title">Ln</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        Poly res;</span><br><span class="line">        res=Derivative()*Inv(n);</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        res=res.Integral();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;    <span class="comment">//多项式对数函数</span></span><br><span class="line">    Poly __Sqrt(<span class="keyword">int</span> n) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">            Poly res;</span><br><span class="line">            res.F.push_back(intsqrt(F[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Poly res,H;</span><br><span class="line">        res=__Sqrt((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        H=res.Inv(n);</span><br><span class="line">        Init(n+n);</span><br><span class="line">        copy(_a,F,n,lim),copy(_b,H.F,n,lim);</span><br><span class="line">        mul(_a,_b);</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            res.F[i]=<span class="number">1l</span>l*(_a[i]+res.F[i])*<span class="number">499122177</span>%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Sqrt</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        <span class="keyword">return</span> __Sqrt(n);</span><br><span class="line">    &#125;</span><br><span class="line">    Poly __Exp(<span class="keyword">int</span> n) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">            Poly res;</span><br><span class="line">            res.F.push_back(intsqrt(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> Poly res,B;</span><br><span class="line">        res=__Exp((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        B=res.Ln(n);</span><br><span class="line">        B.F.resize(n);</span><br><span class="line">        B.F[<span class="number">0</span>]=Mod(F[<span class="number">0</span>]-B.F[<span class="number">0</span>]+<span class="number">1</span>+mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) B.F[i]=Mod(F[i]-B.F[i]+mod);</span><br><span class="line">        res*=B;</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125; <span class="comment">//多项式指数函数</span></span><br><span class="line">    <span class="function">Poly <span class="title">Exp</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        <span class="keyword">return</span> __Exp(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Pow</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> md=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (md==<span class="number">-1</span>) md=F.size();</span><br><span class="line">        <span class="keyword">return</span> (Ln(md)*k).Exp(md);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; :: iterator it=F.end()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1l</span>l*x*(*it)%mod;</span><br><span class="line">        --it,res=Mod(res+*it);</span><br><span class="line">        <span class="keyword">for</span>(--it;it!=F.begin();--it)</span><br><span class="line">            res=(<span class="number">1l</span>l*res*x+*it)%mod;</span><br><span class="line">        res=(<span class="number">1l</span>l*res*x+(*it))%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="comment">//事实上这只是一只重载了运算符的vector</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请在有氧环境下使用</span></span><br><span class="line"><span class="keyword">using</span> Polynomial::Poly;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[最短路]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/bzoj2125/</url>
        <content type="html"><![CDATA[<p>圆方树</p>
<a id="more"></a>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2125" target="_blank" rel="noopener">题目链接</a></p>
<p>建出圆方树，圆点到方点的距离为它爬到这个方点在圆方树的父亲的距离，圆点到圆点之间的距离为边长。</p>
<p>两个点的最短路长度分两种情况讨论：</p>
<p>$Lca$为圆点，那么就是树上距离</p>
<p>$Lca$为方点，那两个点就都爬到这个方点对应的环上，再求一个环上距离</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/09</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 500005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m,a[maxn],Q;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> len(x,y) (mp[make_pair(x,y)])</span></span><br><span class="line"><span class="built_in">map</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span> &gt; mp;</span><br><span class="line"><span class="keyword">namespace</span> Tree &#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(v,'\n');</span></span><br><span class="line">        nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    ll sum1[maxn&lt;&lt;<span class="number">1</span>],sum2[maxn&lt;&lt;<span class="number">1</span>],sum[maxn&lt;&lt;<span class="number">1</span>],Dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> f[maxn&lt;&lt;<span class="number">1</span>][<span class="number">20</span>],dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        dep[u]=dep[f[u][<span class="number">0</span>]]+<span class="number">1</span>,Dep[u]=Dep[f[u][<span class="number">0</span>]]+sum[u];</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(sum[u],' '),wrt(Dep[u],'\n');</span></span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">16</span>) f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        cross(i,u) f[to[i]][<span class="number">0</span>]=u,dfs(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">int</span> _lca(<span class="keyword">int</span> u,<span class="keyword">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (dep[f[u][i]]&gt;=dep[v]) u=f[u][i];</span><br><span class="line">        <span class="keyword">if</span> (u==v) <span class="keyword">return</span> u;</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (f[u][i]!=f[v][i]) u=f[u][i],v=f[v][i];</span><br><span class="line">        <span class="keyword">return</span> f[u][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (dep[f[u][i]]&gt;dep[v]) u=f[u][i];</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Lca=_lca(x,y);</span><br><span class="line">        <span class="keyword">if</span> (Lca&lt;=n) <span class="keyword">return</span> (Dep[x]+Dep[y]<span class="number">-2</span>*Dep[Lca]);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> xx=jump(x,Lca),yy=jump(y,Lca);</span><br><span class="line">            <span class="keyword">if</span> (sum1[xx]&lt;sum1[yy]) swap(xx,yy);</span><br><span class="line">            <span class="keyword">return</span> Dep[x]-Dep[xx]+Dep[y]-Dep[yy]+</span><br><span class="line">                min(sum1[xx]-sum1[yy],sum2[xx]+sum1[yy]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;</span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],val[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> L)</span> </span>&#123;</span><br><span class="line">    nx[++cnt]=hd[u],val[cnt]=L,to[cnt]=v,hd[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;dfn[u]) &#123;</span><br><span class="line">                Tree::add(u,v),top--;</span><br><span class="line">                Tree::sum[v]=val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (low[v]==dfn[u]) &#123;</span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">int</span> x=top;</span><br><span class="line">                <span class="keyword">while</span>(sta[x]!=v) Tree::add(n+tot,sta[x]),x--;</span><br><span class="line">                Tree::add(n+tot,sta[x]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">                Tree::sum1[sta[x]]=val[i];</span><br><span class="line">                rep(j,x+<span class="number">1</span>,top)</span><br><span class="line">                    Tree::sum1[sta[j]]=</span><br><span class="line">                        Tree::sum1[sta[j<span class="number">-1</span>]]+len(sta[j<span class="number">-1</span>],sta[j]);</span><br><span class="line">                Tree::sum2[sta[top]]=len(sta[top],u);</span><br><span class="line">                Tree::sum[sta[top]]=</span><br><span class="line">                    min(Tree::sum1[sta[top]],Tree::sum2[sta[top]]);</span><br><span class="line">                drp(j,top<span class="number">-1</span>,x)&#123;</span><br><span class="line">                    Tree::sum2[sta[j]]=</span><br><span class="line">                        Tree::sum2[sta[j+<span class="number">1</span>]]+len(sta[j+<span class="number">1</span>],sta[j]);</span><br><span class="line">                    Tree::sum[sta[j]]=</span><br><span class="line">                        min(Tree::sum1[sta[j]],Tree::sum2[sta[j]]);</span><br><span class="line">                &#125;</span><br><span class="line">                top=x<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"test.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"test.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    n=rd(),m=rd();Q=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd(),z=rd();</span><br><span class="line">        add(x,y,z),add(y,x,z);</span><br><span class="line">        len(x,y)=len(y,x)=z;</span><br><span class="line">    &#125;</span><br><span class="line">    tarjan(<span class="number">1</span>,<span class="number">0</span>);Tree::dfs(<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,Q)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        wrt(Tree::dis(x,y),<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[小C的独立集]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/bzoj4316/</url>
        <content type="html"><![CDATA[<p>圆方树入门</p>
<a id="more"></a>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4316" target="_blank" rel="noopener">题目链接</a></p>
<p>建出圆方树，圆点和圆点之间按正常转移，遇到圆点和方点时，把整个环拉出来，单独跑一遍$DP$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/09</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 500005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m,a[maxn];</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(v,'\n');</span></span><br><span class="line">        nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mx;</span><br><span class="line">    <span class="keyword">int</span> dp[maxn][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> Dp[maxn][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> A,<span class="keyword">int</span> B,<span class="built_in">vector</span> &lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; x)</span> </span>&#123; </span><br><span class="line">        Dp[<span class="number">0</span>][<span class="number">0</span>]=A,Dp[<span class="number">0</span>][<span class="number">1</span>]=B;</span><br><span class="line">        rep(i,<span class="number">1</span>,x.size()<span class="number">-1</span>)&#123;</span><br><span class="line">            Dp[i][<span class="number">0</span>]=max(Dp[i<span class="number">-1</span>][<span class="number">0</span>],Dp[i<span class="number">-1</span>][<span class="number">1</span>])+x[i].second;</span><br><span class="line">            Dp[i][<span class="number">1</span>]=Dp[i<span class="number">-1</span>][<span class="number">0</span>]+x[i].first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        cross(i,u)<span class="keyword">if</span> (to[i]!=fa)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span> (v&gt;n) &#123;</span><br><span class="line">                pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ans;</span><br><span class="line">                <span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; vt;</span><br><span class="line">                <span class="keyword">int</span> tt=<span class="number">0</span>;</span><br><span class="line">                cross(j,v) &#123;</span><br><span class="line">                    dfs(to[j],v);</span><br><span class="line">                    vt.push_back(make_pair(dp[to[j]][<span class="number">1</span>],dp[to[j]][<span class="number">0</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> xx=vt[<span class="number">0</span>].first,yy=vt[<span class="number">0</span>].second;</span><br><span class="line">                tt=vt.size()<span class="number">-1</span>;</span><br><span class="line">                DP(yy,xx,vt),dp[u][<span class="number">0</span>]+=max(Dp[tt][<span class="number">0</span>],Dp[tt][<span class="number">1</span>]);</span><br><span class="line">                DP(yy,<span class="number">-2333333</span>,vt),dp[u][<span class="number">1</span>]+=Dp[tt][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[u][<span class="number">0</span>]+=max(dp[v][<span class="number">0</span>],dp[v][<span class="number">1</span>]);</span><br><span class="line">                dp[u][<span class="number">1</span>]+=dp[v][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[u][<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(u,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> max(dp[u][<span class="number">0</span>],dp[u][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;  </span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]==dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v) </span><br><span class="line">                    Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">        Tree::mx=<span class="number">0</span>;</span><br><span class="line">        tarjan(i,<span class="number">0</span>),ans+=Tree::calc(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd(),m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y),add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    init(n);</span><br><span class="line">    wrt(ans,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[铁人两项]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/luogu-4630/</url>
        <content type="html"><![CDATA[<p>圆方树入门</p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P4630" target="_blank" rel="noopener">题目链接</a></p>
<p>转化一下题意，等价于求$\sum\limits_x\sum\limits_y S_{x,y}$</p>
<p>$S_{x,y}$表示$x$到$y$的所有<strong>不经过重复点的路径</strong>可能经过的点的个数</p>
<p>建出圆方树，方点权值为点双大小，圆点权值为$-1$，问题就变成了求树上所有<strong>圆点</strong>对的<strong>路径长度</strong>之和</p>
<p>路径长度定义为树上两点路径经过点的权值和（包含这两点）。</p>
<p>每个点的贡献就是经过它的路径数$×$它的权值</p>
<p><strong>注意：图不一定联通</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 600005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 600005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m;</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line">    <span class="keyword">int</span> g[maxn&lt;&lt;<span class="number">1</span>],mx;</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=u&lt;=n;</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">            <span class="keyword">int</span> x=dfs(to[i],u);</span><br><span class="line">            ans+=<span class="number">2l</span>l*g[u]*x*sum;</span><br><span class="line">            sum+=x;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=<span class="number">2l</span>l*g[u]*sum*(mx-sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;  </span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;=dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;Tree::g[n+tot]=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v) </span><br><span class="line">                    Tree::g[n+tot]++,Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) Tree::g[i]=<span class="number">-1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">        Tree::mx=<span class="number">0</span>;</span><br><span class="line">        tarjan(i,<span class="number">0</span>),Tree::dfs(i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd(),m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y),add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    init(n);</span><br><span class="line">    wrt(Tree::ans,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[圆方树]]></title>
        <url>http://zxy-hhhh.cn/2019/01/08/yuanfangshu/</url>
        <content type="html"><![CDATA[<p>出题人把序列上的题加个树剖放到树上是错误的<del>应该加个圆方树放到仙人掌上</del></p>
<p>圆方树题的整理和一个模板</p>
<a id="more"></a>
<h1 id="圆方树"><a href="#圆方树" class="headerlink" title="圆方树"></a>圆方树</h1><p>初学的话点<a href="https://www.cnblogs.com/cjyyb/p/9098400.html" target="_blank" rel="noopener">这里</a></p>
<p>然后放个建树模板</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="comment">//if (low[v]&gt;dfn[u]) Tree::add(u,v);else </span></span><br><span class="line">            <span class="comment">//仙人掌时加上句</span></span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;=dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v)</span><br><span class="line">                    Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="problems"><a href="#problems" class="headerlink" title="problems"></a>problems</h2><p><a href="http://zxy-hhhh.cn/2019/01/09/luogu-4630/">铁人两项</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/bzoj4316/">小C的独立集</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/bzoj2125">最短路</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/CF487E">tourists</a></p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[小清新数据结构题]]></title>
        <url>http://zxy-hhhh.cn/2019/01/06/luogu-3676/</url>
        <content type="html"><![CDATA[<p><del>真是小清新</del></p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3676" target="_blank" rel="noopener">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>查询以$x$为根时的所有子树的权值和的平方和，带单点修改、</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p><strong>为了表达方便，记$q$为询问的点，我们用$x$表示$1$到$q$路径上的点</strong></p>
<h3 id="可以先-O-n-的处理出以-1-为根时："><a href="#可以先-O-n-的处理出以-1-为根时：" class="headerlink" title="可以先$O(n)$的处理出以$1$为根时："></a>可以先$O(n)$的处理出以$1$为根时：</h3><p>​    答案，记为$Ans$</p>
<p>​    每颗子树的权值和，记为$S_i$</p>
<p>​    所有点权值和，记为$Sum$</p>
<p>​    点的深度，记为$dep_i$，$dep_1=1$</p>
<h3 id="考虑修改"><a href="#考虑修改" class="headerlink" title="考虑修改"></a>考虑修改</h3><p>修改点$q$，记原来值和当前值差为$d$</p>
<p>$Sum=Sum+dep_x*d$</p>
<p>$Ans=Ans-\sum\limits_x(S_x)^2+\sum\limits_x(S_x+d)^2$</p>
<p>$=Ans-\sum\limits_x(S_x)^2+\sum\limits_x(S_x)^2+2S_xd+d^2$</p>
<p>$=Ans+\sum\limits_{x}2S_xd+d^2$</p>
<p>$=Ans+2 d\sum\limits_x S_x+dep_x d^2$</p>
<p>所有$S_x=S_x+d$</p>
<h3 id="当根换为-q-时"><a href="#当根换为-q-时" class="headerlink" title="当根换为$q$时"></a>当根换为$q$时</h3><p>此时点$x$，不含点$q$，$S_x$会变为$Sum-S_{son}$，$S_{son}$表示$x$的包含点$q$的子树的大小</p>
<p>其余点不变</p>
<p>所以答案为</p>
<p>$Ans-\sum\limits_x(S_x)^2+Sum^2+\sum\limits_x(Sum-S_x)^2$</p>
<p>$=Ans+\sum\limits_x(Sum-S_x)^2-(S_x)^2+Sum^2$</p>
<p>平方差公式展开</p>
<p>$=Ans+Sum^2+\sum\limits Sum(Sum-2S_x)$</p>
<p>$=Ans+Sum^2+Sum\sum\limits Sum-2S_x$</p>
<p>$=Ans+Sum^2+Sum^2dep_x+2Sum\sum\limits S_x$</p>
<p>用树剖+树状数组维护<strong>链上加</strong>，<strong>链上求和</strong>就好了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>时间复杂度$O(nlog^2n)$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/04</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">namespace</span> Tree_Array</span><br><span class="line">&#123;</span><br><span class="line">    ll sum[maxn],Sum[maxn];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=i&amp;(-i))</span><br><span class="line">            sum[i]+=val,Sum[i]+=<span class="number">1l</span>l*x*val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=i&amp;(-i))</span><br><span class="line">            ans+=(x+<span class="number">1</span>)*sum[i]-Sum[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span> </span>&#123;add(l,x),add(r+<span class="number">1</span>,-x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> getsum(r)-getsum(l<span class="number">-1</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line">    <span class="keyword">int</span> top[maxn],sz[maxn],fa[maxn],son[maxn],dep[maxn];</span><br><span class="line">    <span class="keyword">int</span> val[maxn],a[maxn];</span><br><span class="line">    <span class="keyword">int</span> sum[maxn];</span><br><span class="line">    ll Ans,S;</span><br><span class="line">    <span class="keyword">int</span> idx[maxn],id;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dep[u]=dep[fa[u]]+<span class="number">1</span>,sz[u]=<span class="number">1</span>;sum[u]=a[u];</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa[u])&#123;</span><br><span class="line">            fa[to[i]]=u,dfs(to[i]);</span><br><span class="line">            sz[u]+=sz[to[i]],sum[u]+=sum[to[i]];</span><br><span class="line">            <span class="keyword">if</span> (sz[son[u]]&lt;sz[to[i]]) son[u]=to[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx[u]=++id;val[id]=a[u];</span><br><span class="line">        top[u]=tp;</span><br><span class="line">        <span class="keyword">if</span> (son[u]) dfs(son[u],tp);</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa[u]&amp;&amp;to[i]!=son[u]) dfs(to[i],to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(<span class="number">1</span>),dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        Tree_Array::n=id;</span><br><span class="line">        rep(i,<span class="number">1</span>,id) Tree_Array::update(idx[i],idx[i],sum[i]),Ans+=sum[i]*sum[i];</span><br><span class="line">        S=sum[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link_update</span><span class="params">(<span class="keyword">int</span> x,ll val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            Tree_Array::update(idx[top[x]],idx[x],val);</span><br><span class="line">            <span class="keyword">if</span> (top[x]==<span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">            x=fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">sigma</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            ans+=Tree_Array::query(idx[top[x]],idx[x]);</span><br><span class="line">            <span class="keyword">if</span> (top[x]==<span class="number">1</span>) <span class="keyword">return</span> ans;</span><br><span class="line">            x=fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> Ans+S*S+<span class="number">1l</span>l*dep[x]*S*S<span class="number">-2l</span>l*S*sigma(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,ll val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll delta=val-a[x],s1=sigma(x),s2=dep[x];</span><br><span class="line">        Ans+=<span class="number">2</span>*s1*delta+delta*delta*dep[x];</span><br><span class="line">        S+=delta;</span><br><span class="line">        link_update(x,delta);</span><br><span class="line">        a[x]=val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd();</span><br><span class="line">    <span class="keyword">int</span> m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y);add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=rd();</span><br><span class="line">    init();</span><br><span class="line">    rep(_i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> op=rd();</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=rd(),val=rd();</span><br><span class="line">            update(x,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x=rd();</span><br><span class="line">            wrt(query(x),<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[大森林]]></title>
        <url>http://zxy-hhhh.cn/2018/12/13/bzoj4573/</url>
        <content type="html"><![CDATA[<p>有趣的LCT题<br><a id="more"></a></p>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4573" target="_blank" rel="noopener">题目链接</a></p>
<h2 id="写在前面的一些结论："><a href="#写在前面的一些结论：" class="headerlink" title="写在前面的一些结论："></a>写在前面的一些结论：</h2><ol>
<li><p>合法的$2$操作只会在一段连续的区间内发生，所以合法$2$操作也只会在一段区间内发生，因此我们可以把更换生长节点的区间，和加点区间取并，使$2$操作一定合法</p>
</li>
<li><p>如果$2$操作一定合法，加点操作区间从l~r变为1~n并不影响答案</p>
</li>
<li><p>一个询问在该询问进入时处理，和之后处理，答案并不改变，并且只有涉及到该树的操作才会对这个询问产生影响</p>
</li>
</ol>
<p><del>结论是显然的</del></p>
<p>知道这些之后，来考虑如何解决；</p>
<h2 id="一个想法"><a href="#一个想法" class="headerlink" title="一个想法"></a>一个想法</h2><p>可以基于上面结论，产生一个<del>愚蠢的</del>想法</p>
<p>设$x$为$2$操作后的生长节点，$y$为之前的</p>
<p>将$2$操作拆成两次：</p>
<ol>
<li>在$l$处，将之后加入所有点，换到$x$下面</li>
<li>在$r+1$处,将之后加入所有点，换回$y$下面</li>
</ol>
<p>然后将询问和$2$操作按位置排序，从1~n扫一遍，依次处理就得到了$O(n^{2})$的优秀做法</p>
<h2 id="那么如何优化"><a href="#那么如何优化" class="headerlink" title="那么如何优化"></a>那么如何优化</h2><h3 id="虚点"><a href="#虚点" class="headerlink" title="虚点!!!"></a>虚点!!!</h3><p>对每一个$2$操作建一个虚点，每个虚点的父节点是前一个虚点，第一个虚点的父亲是1</p>
<p>每一次加点就加到当前最后一个虚点下面就好了。</p>
<p>每次移动就直接将该$2$操作对应的虚点及其子树移到新的生长节点下<del>然而还是T</del></p>
<h3 id="统计答案"><a href="#统计答案" class="headerlink" title="统计答案"></a>统计答案</h3><p>我们让虚点权值为0，实点为1</p>
<p>设一个点i到根路径上权值和为 $S_{i}$(包含自身权值)</p>
<p>$dis(u,v)=S_{u}+S_{v}-2S_{lca}$</p>
<p>大家举几个栗子，想象一下，就知道这是对的。<del>我不会证</del></p>
<h3 id="LCT大法吼！！！"><a href="#LCT大法吼！！！" class="headerlink" title="LCT大法吼！！！"></a>LCT大法吼！！！</h3><p>移动子树相当于换父亲，LCT就可以了。</p>
<p>但是此处<strong>LCT 不能换根</strong>，因为有虚点，不同于普通树上路径，所以根的位置对答案会产生影响。</p>
<p>此处cut操作一定是儿子cut父亲，所以直接cut掉就可以了，like this<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(u);splay(u);fa[son[u][<span class="number">0</span>]]=<span class="number">0</span>,son[u][<span class="number">0</span>]=<span class="number">0</span>;</span><br></pre></td></tr></table></figure></p>
<p>而link操作也一定是一颗树的根去link，所以也直接link就好了，像这样<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(v),splay(v),fa[v]=u;</span><br></pre></td></tr></table></figure></p>
<p>然后就愉快的A了此题，时间复杂度$O(nlogn)$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/07</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, a, b) for (int x = int(a); x &lt;= (int)(b); x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x, a, b) for (int x = int(a); x &gt;= (int)(b); x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x, a) for (int x = hd[a]; x; x = nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll _x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> _ch = getchar(), _f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(_ch) &amp;&amp; (_ch != <span class="string">'-'</span>) &amp;&amp; (_ch != EOF); _ch = getchar())</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">if</span> (_ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">        _f = <span class="number">0</span>;</span><br><span class="line">        _ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(_ch); _ch = getchar()) _x = _x * <span class="number">10</span> + _ch - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f ? _x : -_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_x &gt;= <span class="number">10</span>)</span><br><span class="line">        write(_x / <span class="number">10</span>), <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">putchar</span>(_x + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x, <span class="keyword">char</span> _p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">    write(_x);</span><br><span class="line">    <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LCT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> son[maxn][<span class="number">2</span>], val[maxn], sum[maxn], fa[maxn], cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> son[fa[x]][<span class="number">1</span>] != x &amp;&amp; son[fa[x]][<span class="number">0</span>] != x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sum[x] = sum[son[x][<span class="number">0</span>]] + sum[son[x][<span class="number">1</span>]] + val[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = fa[x], z = fa[y], d = son[y][<span class="number">1</span>] == x;</span><br><span class="line">        <span class="keyword">if</span> (!isroot(y)) son[z][son[z][<span class="number">1</span>] == y] = x;</span><br><span class="line">        fa[y] = x, fa[x] = z;</span><br><span class="line">        fa[son[x][!d]] = y, son[y][d] = son[x][!d];</span><br><span class="line">        son[x][!d] = y;</span><br><span class="line">        update(y), update(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; !isroot(x);) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = fa[x], z = fa[y];</span><br><span class="line">            <span class="keyword">if</span> (!isroot(y))</span><br><span class="line">                (son[y][<span class="number">1</span>] == x) ^ (son[z][<span class="number">1</span>] == y) ? rotate(x) : rotate(y);</span><br><span class="line">            rotate(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x; t = x, x = fa[x]) splay(x), son[x][<span class="number">1</span>] = t, update(x);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; fa[v] = u; &#125;<span class="comment">//因为先有cut所以可以不access</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        access(u);</span><br><span class="line">        splay(u);</span><br><span class="line">        fa[son[u][<span class="number">0</span>]] = <span class="number">0</span>, son[u][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Sum = <span class="number">0</span>;</span><br><span class="line">        access(x);</span><br><span class="line">        splay(x);</span><br><span class="line">        Sum += sum[x];</span><br><span class="line">        <span class="keyword">int</span> lca = access(y);</span><br><span class="line">        splay(y);</span><br><span class="line">        Sum += sum[y];</span><br><span class="line">        access(lca);</span><br><span class="line">        splay(lca);</span><br><span class="line">        Sum -= sum[lca] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changefa</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>  <span class="comment">// xxc's fahter was hje before,but now his father is me</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cut(x);</span><br><span class="line">        link(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        access(x);</span><br><span class="line">        splay(x);</span><br><span class="line">        <span class="keyword">return</span> son[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">new_node</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sum[++cnt] = x, val[cnt] = x;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; lct;</span><br><span class="line"><span class="keyword">int</span> to[maxn];</span><br><span class="line"><span class="keyword">int</span> cl[maxn], cr[maxn], ans[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, p, r, cnt, QwQ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, w, x, y, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query &amp;B) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (w &lt; B.w) || (w == B.w &amp;&amp; op &lt; B.op);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    to[<span class="number">1</span>] = lct.new_node(<span class="number">1</span>);</span><br><span class="line">    lct.link(<span class="number">1</span>, lct.new_node(<span class="number">0</span>));</span><br><span class="line">    cl[<span class="number">1</span>] = <span class="number">1</span>, cr[<span class="number">1</span>] = n;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">2</span>, w = <span class="number">1</span>;</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">            cl[++w] = rd(), cr[w] = rd();</span><br><span class="line">            lct.link(now, to[w] = lct.new_node(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd(), pre = now;</span><br><span class="line">            l = <span class="built_in">std</span>::max(l, cl[x]), r = <span class="built_in">std</span>::min(r, cr[x]);</span><br><span class="line">            <span class="keyword">if</span> (l &gt; r) <span class="keyword">continue</span>;</span><br><span class="line">            now = lct.new_node(<span class="number">0</span>);</span><br><span class="line">            Q[++cnt].op = <span class="number">1</span>, Q[cnt].w = l, Q[cnt].x = now, Q[cnt].y = to[x];</span><br><span class="line">            Q[++cnt].op = <span class="number">1</span>, Q[cnt].w = r + <span class="number">1</span>, Q[cnt].x = now, Q[cnt].y = pre;</span><br><span class="line">            lct.link(pre, now);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Q[++cnt].w = rd();</span><br><span class="line">            <span class="keyword">int</span> x = rd(), y = rd();</span><br><span class="line">            Q[cnt].op = <span class="number">2</span>, Q[cnt].x = x, Q[cnt].y = y;</span><br><span class="line">            Q[cnt].id = ++QwQ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(Q + <span class="number">1</span>, Q + <span class="number">1</span> + cnt);</span><br><span class="line">    rep(i, <span class="number">1</span>, cnt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[i].op == <span class="number">1</span>)</span><br><span class="line">            lct.changefa(Q[i].x, Q[i].y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans[Q[i].id] = lct.dis(to[Q[i].x], to[Q[i].y]);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">1</span>, QwQ) wrt(ans[i], <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> LCT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[about-zxy]]></title>
        <url>http://zxy-hhhh.cn/2018/12/06/about-zxy/</url>
        <content type="html"><![CDATA[<p>博客运行一段时间了，也有了一点文章了，该来个about me了<br><a id="more"></a></p>
<h2 id="about我的ID"><a href="#about我的ID" class="headerlink" title="about我的ID"></a>about我的ID</h2><p>我常以<strong>zxy_hhhh</strong>及<strong>地狱小鬼366</strong>(无法输入中文时为<strong>dyxg</strong>)的ID游荡于各大OJ、社交网站&amp;&amp;<del>游戏</del></p>
<h2 id="关于OI生涯"><a href="#关于OI生涯" class="headerlink" title="关于OI生涯"></a>关于OI生涯</h2><p>去年拿了个pj1=，今天tg GG了<del>不过1=还是有的</del>；<br>之后的么。。。待续</p>
<h2 id="关于博客内容"><a href="#关于博客内容" class="headerlink" title="关于博客内容"></a>关于博客内容</h2><p>一般是一些<strong>题解</strong>或者<strong>对算法/数据结构的理解</strong>。</p>
<h2 id="一些解释"><a href="#一些解释" class="headerlink" title="一些解释"></a>一些解释</h2><p>关于加密文章<del>虽然前端的加密是扯淡</del>，因为一些政治原因无法公开</p>
<p>关于访问速度问题，因为我部署在github上的，国内访问速度就。。。<br>不过，过几天我说不定会往coding上部署一份，届时访问速度就会好多了</p>
<p>头像什么的还在搞。。。</p>
<p>评论系统的话因为主题的一些原因，用了disqus，可能对不能科学上网的童鞋有些不友好。</p>
<p>还有本人码风各种变换，原因有两个</p>
<pre><code>1. 有时候我会用vscode格式化代码
2. 最近在改码风
</code></pre><p>过段时间去提交一下网站链接，做一下SEO吧，到时候goolge那里一定会有的<del>baidu就看心情吧</del></p>
<h2 id="如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））"><a href="#如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））" class="headerlink" title="如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））"></a>如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））</h2><hr>
<p>先写这么多吧，其他的想到了再补</p>
]]></content>
        
        
    </entry>
    
    <entry>
        <title><![CDATA[不勤劳的图书管理员]]></title>
        <url>http://zxy-hhhh.cn/2018/12/05/bzoj3110/</url>
        <content type="html"><![CDATA[<p><del>暴力可以AC</del></p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3759" target="_blank" rel="noopener">题目链接</a></p>
<p>先算出不修改时的答案；</p>
<p>对于的位置i贡献就是</p>
<p>$\Sigma_{j=1}^{j&lt;i} a[j]+a[i] (v[j]&gt;v[i])$</p>
<p>然后对于每一次修改，考虑对答案的影响就是y移到x减少的和x移到y增加的<br>而影响只会出现在(x,y)</p>
<p>具体就是：</p>
<p>(x,y)对x产生的逆序对，y对(x,y)产生的逆序对会失去</p>
<p>(x,y)对y产生的逆序对，x对(x,y)产生的逆序对会增加入答案</p>
<p>如何维护a[i]+a[j]?</p>
<p>用树套树维护<strong>(x,y)大于等于x的数</strong>的<strong>个数</strong>和<strong>这些数的和</strong></p>
<hr>
<p>不能用指针，不然空间会GG</p>
<p>要外层<strong>树状数组</strong>内层<strong>线段树</strong>，不然空间GG</p>
<p>外层<strong>线段树</strong>内层<strong>平衡树</strong>空间OK的，不过时间就呵呵了<br><del>机房某大佬卡了一上午常之后彻底弃疗，写了暴力</del></p>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/05</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lb(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], w[maxn], m, Ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span> ? (x + mod) : (x &gt;= mod ? x - mod : x); &#125;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum,ls,rs;</span><br><span class="line">&#125;tr[<span class="number">20000000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u) u = ++cnt;</span><br><span class="line">    tr[u].sum = Mod(tr[u].sum + k);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        insert(tr[u].ls, l, mid, x, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(tr[u].rs, mid + <span class="number">1</span>, r, x, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="keyword">return</span> (query(tr[u].ls, l, mid, ql, qr) + query(tr[u].rs, mid + <span class="number">1</span>, r, ql, qr)) %</span><br><span class="line">           mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> tr[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt;= n; x += lb(x)) xtree::insert(tr[x], <span class="number">1</span>, n, k, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x; x -= lb(x)) ans = Mod(ans + xtree::query(tr[x], <span class="number">1</span>, n, L, R));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mod(query(R, l, r) - query(L - <span class="number">1</span>, l, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tr1, tr2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    rep(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        w[i] = rd(), a[i] = rd();</span><br><span class="line">        tr1.update(i, w[i], a[i]), tr2.update(i, w[i], <span class="number">1</span>);</span><br><span class="line">        Ans = Mod(Ans + tr1.query(i - <span class="number">1</span>, w[i], n)),</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(i - <span class="number">1</span>, w[i], n) * a[i] % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = rd(), y = rd();</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) swap(x, y);</span><br><span class="line">        <span class="keyword">if</span> (x==y) &#123;wrt(Ans,<span class="string">'\n'</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        Ans = Mod(Ans - tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[y], n));</span><br><span class="line">        Ans = Mod(Ans + tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[x], n));</span><br><span class="line">        Ans = Mod(Ans - tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[x]));</span><br><span class="line">        Ans = Mod(Ans + tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[y]));</span><br><span class="line">        Ans = Mod(Ans - <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[y], n) * a[y] % mod);</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[x], n) * a[x] % mod);</span><br><span class="line">        Ans = Mod(Ans - <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[x]) * a[x] % mod);</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[y]) * a[y] % mod);</span><br><span class="line">        <span class="keyword">if</span> (w[x] &gt; w[y])</span><br><span class="line">            Ans -= a[x] + a[y];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Ans += a[x] + a[y];</span><br><span class="line">        Ans=Mod(Ans);</span><br><span class="line">        tr1.update(x, w[x], -a[x]), tr1.update(x, w[y], a[y]);</span><br><span class="line">        tr1.update(y, w[y], -a[y]), tr1.update(y, w[x], a[x]);</span><br><span class="line">        tr2.update(x, w[x], <span class="number">-1</span>), tr2.update(x, w[y], <span class="number">1</span>);</span><br><span class="line">        tr2.update(y, w[y], <span class="number">-1</span>), tr2.update(y, w[x], <span class="number">1</span>);</span><br><span class="line">        swap(w[x], w[y]), swap(a[x], a[y]);</span><br><span class="line">        wrt(Ans, <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//wrt(xtree::cnt,'\n');</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[初学树套树]]></title>
        <url>http://zxy-hhhh.cn/2018/12/05/tree-tao-tree/</url>
        <content type="html"><![CDATA[<p>最近写了点树套树，感觉也没那么可怕</p>
<a id="more"></a>
<h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><p>很多用于动态维护区间的一些东西，比如：区间内大于等于x的数的个数、区间前驱后继等等</p>
<p>主要思想很简单，就是 对外层树的<strong>每一个节点</strong>建一个内层树</p>
<p>具体实现方式可见例题</p>
<h2 id="来几个-栗子"><a href="#来几个-栗子" class="headerlink" title="来几个 栗子"></a>来几个 栗子</h2><p><a href="http://zxy-hhhh.cn/2018/12/03/luogu-3759/">K大数查询</a><br><a href="http://zxy-hhhh.cn/2018/12/03/bzoj3196/">二逼平衡树</a><br><a href="http://zxy-hhhh.cn/2018/12/05/bzoj3110/">不勤劳的图书管理员</a><br>先写到这里吧</p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[K大数查询]]></title>
        <url>http://zxy-hhhh.cn/2018/12/03/luogu-3759/</url>
        <content type="html"><![CDATA[<p>模板题</p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3759" target="_blank" rel="noopener">题目链接</a></p>
<p>因为有区间修改，所以外层建权值线段树，内层建区间树</p>
<p>处理修改：对所有包含c的外层树节点所对应的内层树的a~b区间+1</p>
<p>处理询问：在外层树上二分，若当前节点的<strong>右子树的内层树</strong>a~b区间和&gt;c就往左子树走，否则往右</p>
<hr>
<p>注意:</p>
<p>   区间树要<strong>标记永久化</strong>，不然如果写的不够优秀会 MLE or TLE</p>
<p>   此题luogu上时限只有1s，大部分代码<del>包括本人代码</del>会被卡常，获得0~100不等的分数。</p>
<p>   在往左子树走时要减掉右子树a~b区间和带来的贡献</p>
<hr>
<p>在具体实现的时候，我为了图方便用了<strong>指针</strong>和<strong>namespace</strong></p>
<p>如果你看不懂指针，可以往下翻，有无指针的代码</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/01</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, a, b) for (int x = int(a); x &lt;= (int)(b); x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x, a, b) for (int x = int(a); x &gt;= (int)(b); x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x, a) for (int x = hd[a]; x; x = nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> lazy;</span><br><span class="line">    ll sum;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="literal">NULL</span>) u = <span class="keyword">new</span> node;</span><br><span class="line">    <span class="keyword">if</span> (ql == l &amp;&amp; r == qr) &#123;</span><br><span class="line">        u-&gt;lazy++, u-&gt;sum += r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    u-&gt;sum += qr - ql + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        insert(u-&gt;ls, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        insert(u-&gt;rs, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(u-&gt;ls, l, mid, ql, mid), insert(u-&gt;rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(node *u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql == l &amp;&amp; qr == r) <span class="keyword">return</span> u-&gt;sum;</span><br><span class="line">    ll ans = (qr - ql + <span class="number">1</span>) * u-&gt;lazy;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> ans + query(u-&gt;ls, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> ans + query(u-&gt;rs, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(u-&gt;ls, l, mid, ql, mid) + ans +</span><br><span class="line">               query(u-&gt;rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="keyword">namespace</span> ytree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    xtree::node *rt;</span><br><span class="line">&#125; tr[<span class="number">400005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    xtree::insert(tr[pos].rt, <span class="number">1</span>, n, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        insert(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">    ll sum = xtree::query(tr[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rt, <span class="number">1</span>, n, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= x)</span><br><span class="line">        <span class="keyword">return</span> query(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x - sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace ytree</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, l, r;</span><br><span class="line">    ll c;</span><br><span class="line">&#125; Q[maxn];</span><br><span class="line"><span class="keyword">int</span> H[maxn], tot;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd(), l = rd(), r = rd();</span><br><span class="line">        ll x = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) ytree::insert(<span class="number">1</span>, -n, n, l, r, x);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">2</span>) wrt(ytree::query(<span class="number">1</span>, -n, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[二逼平衡树]]></title>
        <url>http://zxy-hhhh.cn/2018/12/03/bzoj3196/</url>
        <content type="html"><![CDATA[<p>码量稍微有大，不过思路清晰还是好写的</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3196" target="_blank" rel="noopener">题目链接</a></p>
<p>外层线段树，内层平衡树</p>
<p>操作1 4 5就是在线段树上取出区间，然后平衡树内求答案，合并答案</p>
<p>修改也没什么好讲的，和上一题比较相似</p>
<p>操作2要<strong>二分答案</strong>，然后转化为1</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">	date: 2018/12/03</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">	<span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">	<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">	<span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ( (l + r) &gt;&gt; 1 </span></span><br><span class="line"><span class="keyword">int</span> a[maxn], n, m;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">nil</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sz, val, fix;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">    node(<span class="keyword">int</span> x) : sz(<span class="number">1</span>), val(x), fix(rand()) &#123; ls = rs = nil; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123; sz = ls-&gt;sz + rs-&gt;sz + <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nil = <span class="keyword">new</span> node(<span class="number">0</span>);</span><br><span class="line">    nil-&gt;ls = nil-&gt;rs = nil;</span><br><span class="line">    nil-&gt;sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(node *now, <span class="keyword">int</span> k, node *&amp;x, node *&amp;y, <span class="keyword">int</span> op = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (now == nil) &#123;</span><br><span class="line">        x = y = nil;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span> ? now-&gt;val &lt; k : now-&gt;ls-&gt;sz &lt; k) &#123;</span><br><span class="line">        x = now;</span><br><span class="line">        split(now-&gt;rs, (op == <span class="number">1</span> ? k : k - now-&gt;ls-&gt;sz - <span class="number">1</span>), x-&gt;rs, y, op);</span><br><span class="line">        x-&gt;update();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = now;</span><br><span class="line">        split(now-&gt;ls, k, x, y-&gt;ls, op);</span><br><span class="line">        y-&gt;update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node *<span class="title">merge</span><span class="params">(node *x, node *y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == nil) <span class="keyword">return</span> y;</span><br><span class="line">    <span class="keyword">if</span> (y == nil) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;fix &lt; y-&gt;fix) &#123;</span><br><span class="line">        x-&gt;rs = merge(x-&gt;rs, y);</span><br><span class="line">        <span class="keyword">return</span> x-&gt;update(), x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y-&gt;ls = merge(x, y-&gt;ls);</span><br><span class="line">        <span class="keyword">return</span> y-&gt;update(), y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    rt = merge(x, merge(<span class="keyword">new</span> node(val), y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    split(y, <span class="number">1</span>, y, z, <span class="number">2</span>);</span><br><span class="line">    rt = merge(x, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val, x, y), split(x, x-&gt;sz - <span class="number">1</span>, x, z, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (z == nil)</span><br><span class="line">        ans = -inf;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = (z-&gt;val);</span><br><span class="line">    rt = merge(x, merge(z, y));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nxt</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val + <span class="number">1</span>, x, y), split(y, <span class="number">1</span>, y, z, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (y == nil)</span><br><span class="line">        ans = inf;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = y-&gt;val;</span><br><span class="line">    rt = merge(x, merge(y, z));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    <span class="keyword">if</span> (x == nil)</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = x-&gt;sz;</span><br><span class="line">    rt = merge(x, y);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="keyword">namespace</span> ytree &#123;</span><br><span class="line">xtree::node *tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> -inf;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::pre(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> max(pre(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x),</span><br><span class="line">               pre(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::nxt(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> min(nxt(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x),</span><br><span class="line">               nxt(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::rank(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> rank(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x) +</span><br><span class="line">           rank(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    xtree::del(tr[pos], a[x]), xtree::insert(tr[pos], v);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        change(pos &lt;&lt; <span class="number">1</span>, l, mid, x, v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        change(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">atrank</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">100000000</span>, ans;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rank(<span class="number">1</span>, <span class="number">1</span>, n, L, R, mid) &lt; k)</span><br><span class="line">            ans = mid, l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[pos] = xtree::nil;</span><br><span class="line">    rep(i, l, r) xtree::insert(tr[pos], a[i]);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    build(pos &lt;&lt; <span class="number">1</span>, l, mid), build(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace ytree</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd();</span><br><span class="line">    m = rd();</span><br><span class="line">    xtree::init();</span><br><span class="line">    rep(i, <span class="number">1</span>, n) a[i] = rd();</span><br><span class="line">    ytree::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::rank(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x) + <span class="number">1</span>, <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::atrank(l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = rd(), k = rd();</span><br><span class="line">            ytree::change(<span class="number">1</span>, <span class="number">1</span>, n, x, k);</span><br><span class="line">            a[x] = k;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::pre(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::nxt(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[ss]]></title>
        <url>http://zxy-hhhh.cn/1028/12/06/my-ss/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1/Kf65BOq/MRpo+7i4JK+D7xlvNboP4p0pXoo88pX4kt//HzNoqdelVbDCxOyPK2I+VnL2dHv5qnQ5GSS1a0YT22wr0UvuujU5BsBZ8xlUPKOCYl0bcr9cvDX1VxTkX3rdsySRvbFTLE6Fty+x4zl+g2gNWmKXLdwAK4ddY2SccF/w18tvkzhvAl0nBKJkvZ8v3GhrKkahFF/cXDbYd2qlwvbp9QnePjjrb3fZS+0wCYccVjYJkNgCl8zGYKJ/LgX9d4EgPK1MkmOjobkgMk5w5keyoLtC9LznxqJyXZ3lCuJUl9i0exE+jAlGUAVhOInEWWHnX1rm9RYjWYpIVomMRdBQcrUFe0EvLbtK8PHnM5j3ATD5iF2femLSeoNe7GPcZxzkHZFpNgX7QvTxzQZ/7BXBWjGTCrDnNTw3imBhB4EEhMQHIVhZTPQbS7kAK4uNB+9RBTbdyeE7Bxix+QJrO6tLT8lUj0uCUFi0HpH9qNwhEWhS31XfaKGOvU/yAJWrGPTG3YTQOYKdI1CbZEygWrpe+W2a5vg2HfbFGKzkL2kRG3itIplhEVwCwaUHmON52gdJ6tKBNzb9bXCR2IVA2r31pXNxyPLXfWxyAU9oI4d3UpS/CEINsPACy9RVO+leNSEoCvMF5oXJfljolOv+gJddFu3l8pspNSiLUSJYmeDLSm9KtLKjSY7V8WXlpMlzk0hl6UGoAnjQrrTPn4IXabViI1XK/k3om0Wag+nyhcZ5s/yXA80WuDeBJRevXkaCWYFOnwzTBRIRcNQpn/wQaoB3goPArMG6Sedqi/+qgULweM3/0TPmFjQNTUi2ICe2LgSa8srD2x4G5LsrKx+fhwKSosBo8JxqlMG3nmtz2R9N9+RTUxOuLvw/JKYKe5ccRlkMnriKsiWA1bQpm/kZLc2ZNRC8Xkjbl5i6XSHADTxYHnW+yG5lmgKC5PQMv+l05Edr+lk8KnVeIl51g2dQDDhMIa3nPxuOOzr9Lj+sAyqnSPuGiv4CEV3vx34Jv7qASO5rhJrpwBqRl7qNfuNRVjkAs78WGgx5zph96vNZKqRkZ/tu9PW55MuYih5CBxahWdZqgGP2MRh0FkiQ69NCxFMWGbKDdlIsB2+HJixJUOALzTfeK+59Im1yMK8QDyjJJZEf2whirWcLH6W+Dz4czb/lL0bDo71wm7Df8Ird151mqvliV0UZvyxei8nBok6iAhtZ9HwHODliApSKj+6dEqIpm9+85V0Di7+ugmgH8ytVSQeVTuUBz80o6OQWaJxSNOAvTP0XQ+lTskSqP0fOitz9vFxmk4k7TJbdnFsA88QP8Ql6+DaIrn8phlMPm08ifzusamOBtq+Gb26wPsTllt+lBaoEdocS2LTxgZhxfj2aPogru7PL0bljhSRUiUD5R1sZzwgKFARlUaghhVuUYsNSvrFR5p10Lqucl89AL9ERdGo3K6bEUINAoVXt1CCPWGVaH20t+r2+Ir/LvpPY3MRvXfl3kXrA4QhRO+OXCpVO5xqJuM+2KKVFN8YSpyxR4NFgt+MJe/1z5bsusQ/lkT19G5ZiIYqY8WmY/1EsnVsG9tun6MvlhtMo4jBU7aj81I98fGqWyZqwFpYULbWzJuRSVKTjMKDf5VcxrraInLYoHd/y9+nY83Zy3vNw+AA08YYWjm9RRtUcEEbYXgPQ4P92r3kw9IczbSpzC6RmofRXIcWcA7horKx8L+pThMLV2xytXX3VY07nXjyN2JDZN6853akvG7gDebpZkOnFyK6ROSSc9BO52ZgndYEDLjcSlt3YOonO8+JhbQPdXqjqYRcUpNvItx33oFyo+lUWLLJS33Z/W7Mtb9vqaMW7aURTcexvzgdfiqCdvFcLG8cnOlflrUCJ+pV3jEDHgxjr6tQBz41UO3ikQR+ledWB2n594L3p5moJ1q852nmX04o7t34vIjaYhx+G86rxOCWyTrv+Lx9a+VstV34smTA7HrUfRdcfLflgAMNeTUvSWj9+7QU6jpiO0BLhWLsNkMCMS/Qhv/FyZllMJ/IjCwtlqet+5IY6iNswtX+hwwkEnQPaB042sw4kSqluSaJS214C4qiAnae9e8ZJcWIcv/nvPxlGMaxZnq71Zgu9qq+m/rVp9iX2W2NwVUXlTLcAqjqJfN3nDQpAYMk7nnF8OjDmcBTsuj3zVyKDiDGymYNslmZ5uhRERe5rHiCf+sljWRjxCkquaCI9TEXEuBg4SvFsDWTTVtBv/fkCPqduUCMvGwBeai5lTcembdjM+PUAaVKEARM8Cy3CiYuuODHtngv12xjLfq4pa0vMi1uBQB8I8EeuTXvNuBOwv03RSHzeNZ0dTLPDJ98lDV/jl9kKAKzQE55hNf7KdZA/ligplKje2n2CVhfRszSeDry4xx2Z0NiMmK+UDx09IxbzPfD0r6kvz0q7Nk9ohvGBKGvbgpH0rL0/xAAFBXMJBQFmrgvPaQJ8TK61de9WAFPa6cpMiRVrCa/dYGratsUK95j1tLbIoMz3bYnj69IaeXfhDPJ5sz3YOKxRlXWeAakzryQaXSxsXLW3R7xy0boOcDuXYcQet0kRSvRvf502EOFTwL8Et/4Bv5njGINs5Vr0e8xigaNiVEXdDsOWEwXwtnm4JC38faf7Awsxu20GVTdfAYxlewKK7snIO2azzA8Aamj1/EqxuSt7EDFvvLgsgTStC2ws1OcJBmAUok0zdU9OE4FyQUTOAQGYD9l9nIuVEQMNPoDpiBomej/sKLPNYlMYhxPa2dpFyPl8jRxut61rJGgp5L78m82h0GMCGoeDmgQDRvosJ+d3/BO31+ywZ1urROyMKQ5E+P4lOpT7/mPjdo51IJW4oLvQS0Pxo0y9z+6ZfqGRFh+3ukuvIjICRIQzEkZAe9AyOl/uIPO0mfPsplbJ/6qGL/grsOuHVDVIFFDHhnkfTkI8DPuBIIO4NuLytVr/MvNeJQle0Wc2qX5pNwO+O+p2Jx2pyFVNDWdWpnu/4xBnkdLPccw+hAfaQLtEtEeM0kZnytyYcLGENuVC2Rkxc8pJYWzxtNw2/XML6JDyG/i8be72O7SDgUXPX5o7FLfZA/P4EKGw4Ldstx6x/Ii4zNO7BO6dLjAfYIwQoMRUPj/9rV01uD++7+j3nLGjOO4hawlszmWmxuFEGuxDeoRgn2tztsAddc5qq6gywnGj2oSvJSgDnDpf1rZzkvOWYMAMpjBxt4yDkxMY85wSdHv77qFo3NISfwsAo8G7km0dWA8+6QMCQ3txLOm9HY7Amcb+zsI5y+bj1++DX2GEhZQSgc+gPAKUTi0DzDn6ll+kSmRIaBFrbJYiGj1fixqKLrlX83TWtv7izcn+UEs8TDHaXlGlb8MfhbHQO5CS04hA2khoHrBkPVGAE/qfbWBTHQbNZm2LbCTnwaQwihrx83MldXMoMMkozcamQcZr1UqDtNV+goBu9f/ipkd+u+VRbb7zhCYXq8kxwHA36HMSsK1vs+eCDC8j/pfNi5q/DWYk6Hlx8m/FntZ8q5HdrYzc/Dqgkll1D928XuFW+pPtVIO/5ialOVnr75HQWfe1Pcei0qBwg1esUrJ15vh0ho82csqrugQq4J7F2ZjOWaxNesio4SJGIA8IaXr/c9dCIQhaMOHTJGMod/WR6pAN0JbiUIfih5Oqv9W5wNIwE93e724sTraqJgOQouMn7ipmNsaJkOENZTd8gyij4sIasaomrcXUTpR/73Y9vRlZE4UzHSMIYO8Knp+dXc4kEyQ8aJFSFQmqZcimA/jTgL9aaxYmxy2t6FZZi8c+NmaOMCDErg0q8uZWvEIHlD4itVQCRxp/YItJHH/8Er+XEniw42Pbf0vPoaePxNxpGtSEaDOVUOdy1uvahyF8gKa+BU2a7YRNUpvAScd/8b/2BybEwdsm9pjuc8OPtY2gAG2bBEDXEmKivsu4TTnafPOkOQVTJkBhkUGAqeSbbrL8lcZfWOhbygfrHvDUt+z4zEOqXV1lCStVhSTUEXPOwpBLQv6BW+73qFY9vw9yYxKhetdTC4WfHcW1OKX1i6ZL0d8HoFnQUhnCEBQSG8l0+BUiJAL3m0tTMzRr3dw8b65Q9oVt1TVpb6a2Ds3qLcMzEVl0bxDjLRWbOHF13n9HP43OzKhhMGPsk+dEauCQrAu/Rbdl1mzqFobB6yWpmc0QnPiREChOKr4DvfR1y/9kJfsLk3XRP142a7zbvJp5+Ph7Ixo+p00vvmAnQFF60CzBAYbOVMAhQy+u0vuAh+w9sAf5U26lN5QZlFySn7O/GHMafy1Qx9RVtdpzZpmeb9I3VzU4nHNpDKeSfxNKYcjzJHT9NTa/1gcmmXU4Gfq3cMDootQMoByva8HbGjDova8rnmNgTE0ADeRZCifM3GJAsMZ2HVPzZly89dbyGjngeVpczMOVRnGkVDNv12qkzjlItRWlLNGp/U8JqK4C+cj0mgSNL3eixTv5H++xLN0A06QhmDCxO1Wf54hlpcc8aRUKZOWqUjuKCmjG/A27RxJK/Xb4QdtoEZSlwle3Xw0iYvwTSSgmQOFnHfsl8kuaBoMIK1ZbqGM0PWUblNmjJcxP7fiX81oJt4KbcTOHuRTYQp8yQC1/VrGsph2TdkL4hcKgGz7GdmN5GAY8pZ93T1WgpQlGwoPF1C6fCgOBlnB+8SigucVZhyPCnvPn9Nw4W3p4mz+uQje50a6RVC2s+E5UOi+jh0XA3Gg2sMnwavfvi1SwXZZ0xNGT5vrzixu9vUhkXJno3JeMdnz/p6JXT9vQD9U2KCbXv3KPJXCRMv35LI5v/nRRZhTntvmGSWd8S2X+LJvlgjrzG9mZgWjvLi35iV37KQuGRfcCWwPF3FLOZ6oTZkADFnHeS/5tmZMnk4T/6Ks+vWNlP6rzqkNskWqn+sV0fOvEJrSiRuEm0YWiCnfcDCg7ptsrc+Bplrg9HfIxs6bYjjJUmFguiKP4q0qP2z9T+P9b56xnZFTmA+s09qk3Jif5dk8C65AmfEPjzZyj29cxMkrAa8gCoS8EcBwEiK8b//QsNrpe79RGC6bvJQSEWGpte0Q==
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        
    </entry>
    
    
    
</search>
