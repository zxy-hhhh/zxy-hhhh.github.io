<?xml version="1.0" encoding="utf-8"?>
<search>
    
    
    <entry>
        <title><![CDATA[图的价值]]></title>
        <url>http://zxy-hhhh.cn/2019/03/06/bzoj5093/</url>
        <content type="html"><![CDATA[<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5093" target="_blank" rel="noopener">题目</a></p>
<p>首先可以单独计算一个点的贡献，最后乘上$n$。</p>
<p>那么我们可以列出柿子：<br>$$<br>ans=n2^{\binom{n-1}{2}}\sum\limits_{i=0}^{n-1}\binom{n-1}{i}i^k<br>$$</p>
<p>考虑它的意义：取出一个点，枚举它的度数，其他点可以随便连</p>
<p>然后这个式子并过不来这题</p>
<p>这个$\sum$前面部分处理起来比较方便，考虑化后面部分。</p>
<p>考虑一个柿子：<br>$$<br>n^k=\sum\limits_{i=0}^kS(k,i)\binom{n}{i}i!<br>$$<br>证明：左边表示把$k$个球放入n个不同的盒子中的方案数，右边表示枚举有$i$个盒子非空的方案，两者相等。（组合意义）</p>
<p>实际上这个式子的枚举上界因为$n$，但是改为$k$结果不变</p>
<p>知道这个柿子之后就可以化简</p>
<p>$$<br>\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\sum\limits_{j=0}^kS(k,j)\binom{i}{j}j!\<br>=\sum\limits_{j=0}^kS(k,j)j!\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\binom{i}{j}<br>$$</p>
<p>然后</p>
<p>$$<br>\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\binom{i}{j}=\binom{n-1}{j}2^{n-1-j}<br>$$<br>证明：左边为$n-1$个人中选$i$个，$i$个中再轩$j$个，右边为先选出$j$个人，然后其他人是否被选择皆可（组合意义）</p>
<p>然后</p>
<p>$$<br>\sum\limits_{j=0}^kS(k,j)j!\binom{n-1}{j}2^{n-1-j}\<br>=\sum\limits_{j=0}^k S(k,j)\frac{(n-1)!}{(n-1-j)!}2^{n-1-j}<br>$$</p>
<p>然后用$NTT$算出斯特林数后即可</p>
<p>复杂度$O(klogk)$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/03/06</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">-1</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f*_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 800005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inv2 499122177</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g 3</span></span><br><span class="line"><span class="keyword">int</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> lim,l,r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> type = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type) &#123;</span><br><span class="line">        lim = <span class="number">1</span>, l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (lim &lt;= len) lim &lt;&lt;= <span class="number">1</span>, l++;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        lim = <span class="number">1</span> &lt;&lt; len, l = len;</span><br><span class="line">    rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) r[i] = ((r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + mod : (x &gt;= mod ? x - mod : x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, ll k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, x = <span class="number">1l</span>l * x * x % mod)</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = <span class="number">1l</span>l * ans * x % mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) <span class="keyword">if</span> (i &lt; r[i]) swap(a[i], a[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; lim; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> Wn = qpow(g, (mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">-1</span>) Wn = qpow(Wn, mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lim; j += R)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, w = <span class="number">1</span>; k &lt; mid; k++, w = <span class="number">1l</span>l * w * Wn % mod) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[j + k], y = <span class="number">1l</span>l * w * a[j + mid + k] % mod;</span><br><span class="line">                a[j + k] = Mod(x + y);</span><br><span class="line">                a[j + mid + k] = Mod(x - y);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = qpow(lim, mod - <span class="number">2</span>);</span><br><span class="line">        rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) a[i] = <span class="number">1l</span>l * a[i] * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> F[maxn],G[maxn],fac[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n=rd(),k=rd();</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,k) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    rep(i,<span class="number">0</span>,k) &#123;</span><br><span class="line">        F[i]=<span class="number">1l</span>l*((i&amp;<span class="number">1</span>)?<span class="number">998244352</span>:<span class="number">1</span>)*qpow(fac[i],mod<span class="number">-2</span>)%mod;</span><br><span class="line">        G[i]=<span class="number">1l</span>l*qpow(i,k)*qpow(fac[i],mod<span class="number">-2</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    init(k+k);</span><br><span class="line">    NTT(F,<span class="number">1</span>),NTT(G,<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) s[i]=<span class="number">1l</span>l*F[i]*G[i]%mod;</span><br><span class="line">    NTT(s,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,sn=<span class="number">1</span>,s2=qpow(<span class="number">2</span>,n<span class="number">-1</span>);</span><br><span class="line">    ans=<span class="number">1l</span>l*s[<span class="number">0</span>]*s2%mod;</span><br><span class="line">    rep(i,<span class="number">1</span>,k) &#123;</span><br><span class="line">        s2=<span class="number">1l</span>l*s2*inv2%mod;</span><br><span class="line">        sn=<span class="number">1l</span>l*sn*(n-i)%mod;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*s[i]*sn%mod*s2)%mod;</span><br><span class="line">       <span class="comment">// wrt(ans,'\n');</span></span><br><span class="line">    &#125;</span><br><span class="line">    wrt(<span class="number">1l</span>l*ans*n%mod*qpow(<span class="number">2</span>,<span class="number">1l</span>l*(n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">2</span>)%mod,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0211]]></title>
        <url>http://zxy-hhhh.cn/2019/02/11/contest0211/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[杜教筛]]></title>
        <url>http://zxy-hhhh.cn/2019/01/17/dujiaoshai/</url>
        <content type="html"><![CDATA[<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>内容总结自</p>
<p><a href="https://acfcacfca.blog.luogu.org/dls-tql" target="_blank" rel="noopener">https://acfcacfca.blog.luogu.org/dls-tql</a>(AcF’s Blog)</p>
<h2 id="常规做法"><a href="#常规做法" class="headerlink" title="常规做法"></a>常规做法</h2><p>杜教筛用于解决求$S(n)=\sum\limits_{i=1}^nf(i)$的问题</p>
<p>有一种常规做法：</p>
<p>找一个数论函数$g$，</p>
<p>$$<br>\begin{align}<br>\sum\limits_{i=1}^n (f*g)i\<br>=\sum\limits_{i=1}^n\sum\limits_{d|i}f(\frac{i}{d})g(d)\<br>=\sum\limits_{d=1}^n g(d) \sum\limits_{i=1}^{\lfloor\frac{n}{d}\rfloor} f(i)\<br>=\sum\limits_{d=1}^n g(d)S(\frac{n}{d})\<br>=g(1)S(n)+\sum\limits_{d=2}^n g(d)S(\frac{n}{d})<br>\end{align}<br>$$</p>
<p>我们要求的是$S(n)$，</p>
<p>$\sum\limits_{i=1}^n (f*g)i=g(1)S(n)+\sum\limits_{d=2}^n g(d)S(\frac{n}{d})$</p>
<p>$g(1)S(n)=\sum\limits_{i=1}^n (f*g)i-\sum\limits_{d=2}^n g(d)S(\frac{n}{d})$</p>
<p>只要能找到可以快速求$\sum\limits_{i=1}^n(f*g)i$和$g$的前缀和的$g$即可。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>$$<br>\begin{align}<br>S(n)=\sum\limits_{i=1}^n\mu(i)\<br>\mu*I=e\<br>\text{求}I\text{和}e\text{的前缀和}<br>\end{align}<br>$$</p>
<p>$$<br>\begin{align}<br>S(n)=\sum\limits_{i=1}^n\varphi(i)\<br>\varphi*I=id<br>\text{求}id\text{和}id\text{的前缀和}<br>\end{align}<br>$$</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    ll ans=sum_f_g<span class="comment">//算f*g前缀和</span></span><br><span class="line">    <span class="keyword">for</span>(ll l=<span class="number">2</span>;r&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=n/(n/l);</span><br><span class="line">        ans-=(sum_g(r)-sum_g(l<span class="number">-1</span>))*calc(n/l);</span><br><span class="line">        <span class="comment">//sum_g用于算g的前缀和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以先筛出前$n^{\frac{2}{3}}$个答案</p>
<p>复杂度为$O(n^{\frac{2}{3}})$</p>
<p>可以使用$hash$记忆化来有化复杂度</p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 杜教筛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0111]]></title>
        <url>http://zxy-hhhh.cn/2019/01/11/contest0111/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX19ecnXzTH8hJWVpKAOjsW6qkdZ+ZlYSDirlGL9JVFHyyL/PYm4w60JFlMuiRJeAtdorPB0FsgJ2M0RS2nv+YvWAw2uzMcU8L4w3KZz/bMsSgIphsky07ENRNE8waJ7zmRBcsKHQBp9WlUn29UjjcQwf4VM+2dAbTlJcmDS3FUMD93dWSeczeQThIfTdmWEK4gnF2sN130UhABhkYFaImZba1wEKcCnVu/OnlIh99dOIr0PsGQeMQoRxMImyP97fapWOCbIEEfPzAzoulAY9urxT3x2ymgR9yBZvPzoyW9HZlxfgq9gA2WXRRM5Z7rDcdw0FfXPt7Nn8bO/Z6/Bb07w4r4yHk+W4OXFfNlyeXrR/fIyHJ4sAxwXystXtr09Ffqsb2JvIfgbt0G3nFHelFLwtYNYk7g+z2eRhTGl9X447v3BiEtGGGfeKd4RIvP+fQ/7h5F9+gPLVn6BWh5CdgAgqIlPdnyDQcGH6CW736GbRoN2SvvYF4IgDpl2POGX+mbVm5s4Rw3kffhnq5h/nTdSZIok0UFw6l1wCO1Y+24prYXu+kzAUwUyOC57mmkzu69Bye/tqIDCElpRoQcp+3XTy1ESBUBElWFPglsKPUwHT+g5ba0NzsI0qBy/OhGzFtRobz3Pxm3oGuR7rogV2lY7pUc6BjoH4VftX8Skt7gzUY7UuvvuBBvjQ7BL0usP+ptb+APRxv6inLVcUfTkXi0QKJ5grZgaVocALTTdotxBjFz+loVgBrvmj7eykuvbAOVBt/9ofp88/w2g0V866cY1ZPH/UlGRsrxeCVbXcvLppRAwWa/szoSVTw6uLAdRDBWyFfw35SQDlRaVpFK51Jsv8Fb3ZUdLakFBFOZNVVqEJv3t9TQl9xNJqTctpFk6kguo33gPtEy/XNB8jpzgKngVltk+WqEz3zxvakeX2Rfn6G0j5H1+HggUY1xHnF3cmPcKJTHj5zy6cwKzWha2ytcBq8sn+FEmyLqst4cOeg4oQsZG6MowBbKt7xi4Q6aBEHLSQ9sZJB+JN9UZDR381JZlculFEvwHUYMEHAN/BcgHnrd/oFuEQveynS0Lx8qVaasVXfnzHtAeZ78EwOoTYrgmfnLAw/CNb4cd6j4bd57IrRvKHbS2ZU71ZsQCJl+EmMaiNATvxJpKt8jxgkj/k/AlHelf5DE+PysACdreXtDrEiB010d0xKu6ANA1pZ7PDcGa9qgoU5AIwJr7IE76yPOLxu55EIAXJeKF6DhNYydGfdnTSxEqgODkX/6IieYYBDPgOGHZ/at6cMmPXltVxjgzH8WHFitfhVEAfQf7sBSaY/fhpmZ1VmkVtCj3eewjoI3yX6ti5bI2N4WdPCUmc0IFEUPUbpnP1MihI54NzZy52l+R+Jij+scRjrLF4rTTuJw8SfSyTt/vqddhQUfv7J8MnfS33ahIfPj5M1oBE/RCgd1q0KQYGpElTRqkxaa1ghpwmQh8UiTYI0xpP+N41T38VIvLFgT27tmQVM9MjMVgsWmUtyPlmvGau8dHVkHfR89ThfFKe4618XPkIpcRkJMkCXq+3AWAWoyEILTeHFeJoUZFZWCfivZIpwvlWksaGuS232yIIYER4kG79Mscczk3e7d6AhsPmtSdngthDEWMQgF7up4TxFZfvv7ORUDkhgpnuG0ydIxzdiKpKinvHBUIVDWI8S1GZkaYzgwzFXP0fvJotHMwryxPSl2KcMBzON77sesCOiaGQG92k21RDg9LLzqGp0ZDm6tFLDnNZf0YEXbPTud1kzum04yA3X4qxgO3Uz67xL+RpAEdJrH4q7HXhxKGRJMZ0cOgfrx/mQaprpkgG7SYnhoA7MdFnu+mZYJzdk02rpD1BuRwNNzF6/ydi8JJn0ptzfE/I4z7UxEGu28rIwcwuZUy8yNT5JP5pGJWZVVb0yW160oxyvjtClvrseQT0Z+pMY+Swu9YMQu4dWLadF2gCC96vc5EYnw3Hihlp4opUrYQcOOvisiePvBCA/IbsPhYDfaWEFlboMU5i0aeKSe6iewCO5Bc7TuW1uIqtcopPVTQHWoDysEX4SY2PZCZVZRaG7tBIp2KuFbD3l8bD3Te9maLg0OxcOxtVqtdkYgFvZPshkf8xOI2v9rL13FX3/1ttNJknlng6G2HKdgvxslZhIkt12tOVPdAPEqIl/i9xw/DzompCRygtr+1935V1u1yxFhpLVlxVeg1sKNFaHITEycYsrHr3RWAV2S3uRHv2qmMK/uoclPyStvQcemJiRYzfTx3wfCObMPl3ebj3ry1yVnnUuIx71aizL/4VNzAzfvmutIx5nmkVLX51NgZWt2VpmvKKA4rjQVyFFg+9ODSwoqAd635NgVFwayLIsMarNSaQLtc37eNQz8CdOuatfyT3hFMAdL9/jNdOjzns/ceOTlvTwfq40ZoUwnwXnpgN/KOCnTAO5Xsvso8VLA4JMbPYR0zNWyXrgmQHsgBpotdHmTltDKz+jKAqZf7qYNbxycoJyRo0auNILqPIpwSYX/ADa/Eo+Sv93VBQbteVzPz53w1RfOtmVyb3k323/NeS5dglY3Mw0N9NPy/Y/Xrmo0rHqX1b2mZX8mgOlpfnqf7evd9U0GFwsGPYCdqPAE9zH3+hvRMq998Noa+LN8+v26ZNZcCkAjCwNIb76cqR27J44VUCXcmDIbtrkceexKoj6v4vpBgO9PnZj7CEEl/YDpyNaj7dBlKSYHiYxH+E+4Zu37G9DFs454g1eZ3B9Cl0xTEnh9j2Wvl5RKYjX4onmCXTas/guupyl8eMF3oZWAj24eVQwZUFSgLbofL5nV4ILmf652fDHL6kcKbOp0U7cAEJR0w1paXitO56SfrU5gkZwBM4MTZOGKCo3YJImAVMrUKyp1I9bmyhOSp3JymkX5pNxnVpwL2eCvWotL5f8S9t51X9r36xxjrPkTtn+r1bnfuW9Nq32mjrpHLiPkvlv4MDaKBKAo2BGctEs4O4znDF3EedYeaWNcIgkNrDRlPPioF00X6iQZFNKk6iVb9kjtK/0LPpVHjdij5/z8tIbNi9FuVwpMIqKPWrazXF8tF8+mxj2zMlfXw9Xy9RTeA4dahx4j9VMBHOGvzUjpRECkQoaKwoQ4yrNxs9iEzOuI2HwKIZFV6v+FcjanDQUDjJSxmhev2rldfZwFWyxo5iu1SCeYO27gdpa/l5XAjycBqRllvrPwf/t+pmvHftN01y/bZZhAMOoR7K+PiDMxOOR8pk1F1RFEVIcGhtgE6EUOnNRJzGHdz1No146XkYoIPuy9pPBAjPJ7X1syWY8YvIAogtPWHuvCf7M5mcdi5fkni5Rfc28Vx/oOCk9cpQZdG8x9YspUlgYneLDf0Fr1FuwCevVKApKU1aZWFCodIHFi1oTa7i+znWKfnvhHx90nGE25l06eEu1HYmPJuHtddP052d692ywErhWHN5QLrp9EBTLFUSImvV8R/4fhgB5Xkylyz9RqW+YGlar6vKPY30WK4tHmvC205cc1GUG2Cka9Q+9YyDHKRotEE/XRa8h9pKkFFBogOwrP0x0NSiqIHVIhuvMg80Yft2woqmsOEAKyTjkXWSFl3VU5AycCLI/ukUd1FR/UqauQK+nUzu/4nj7Ef/LfCFxGLu1SCcmqA9C24NPopR2U58fOVg5Swpa4kNOH5iq7RaHXVCtvcBX0GnEsy65iiABS+EuYYDKBBikDJy6HWkGIkgSI5yBzYutrIu+1EFjRoj4Dd+e94VqbX9wlRYoO60hliR/YSoQNEqoUmav0J2Z6MJ30sdVY2OllyVoqMsKL7Xhj4DRWVwb4aq7HCYc+6wTl7cr4shb6Xz6dBqbbSVI/YsaHb7ltI2hFbHUzymd710mkOo0bw/U7EA92NmFrrrrFNUn/IlNFDRqWYqFt8wfDwPMokc7arJnVvTIWj+u7QV0j3EDmQuwPHlRQgkyL+xKkxdeMDpxGoldNAWcTWTKDf0vVSuu/LZlgnVsb6hIYB8JryUHT9tvg2SkwZFnfv1YiGmHGCFNygzHOWP3SvFi6U0OlwuCEo4HTyE4PsdYJcwCQTyk38bnOcsbc4Yyk0v0w3hJnTBJx8/GmjinvE0KW7rAn/Dz/IMQDw5BLvcrL/dDlgxM0oPPI8YcersL8F21ywVu6oOgqbYWEUeh5MGHFJCD6z7cZmxpS3EKaqWjBhYJOcLHZYyuv+32fJaCKcqb7UlHxBZKHYkDL5ONRUHUylDvWL6QqOanoXt94EtkHX7uoesy66flIOnwfLljzf7VAXkiIvhi5KrNYSzIDuzQ4yvvua44XaB81H0PmxH9CuavoJ2WZqEQuzgfqylGsDGs9Hr2hDU8ZB7dwC21/QAFP6ja6laap1fWssM3IzbLE07nCWGEu7FWlM6WUO50puoQ29DmyRTUYLW26jMD2Fr2oPQCCJROu3kiNbFxqKh4bqG7hFSAWdM1NXbObruoYfxKlusl9scLrj6LeOt+ShYzWyjD6rUS7CILINXsuWT+PkoxUcKmYVdds+E18XhU/b5/Wq0se34Y03eYbZ2NnrhHH3QzgyZqcD5Ko2fekyxrokYPiTD90jbSj/sW+W+bJO/Y3scQKXdLdDtgSIrRzD1SORxXOoeUhYWi4ZIY7Qa5oYRbtn9C+kTHUBmGZffZClNILGR8TrBAadmypSVZYeoxxp3CEtZWbHNtSccaK5ZM42EwFKXSpx99oMm9Qpe5KYslAN1vvji7+fFNMCkCOaUp85f42HjGPgDmKwb3jhxP73v8L/NPwt6+suk60Wy83el1YUAj8IWPOba6sHTKNVW+PXjzmGd8E96lw1FnIUUetQ+jdSxzQcMDJm7IBJl+79oqGLMaITaaURJY5ZItgOl7r2GotAn84rrzbRr4Wdm/KSeYVzj0c2NJGKA6OMQI9dGSqN/gQ4N8puOSdoBMypvzD0te/elfDV2Hwq9HP0GTUNGJxmH4y6AAaIRxTyvUhhpestzdJGlzBqGsVdjMaA82ezT5sW02IlOdBfSRXwAkgiZEr/Pphpkw5XzZugt4GPwlemkRi+NGgqMQ7FWQuQkbRxx1f4Y4+aM2CcwA17KmfowS/nAFHzOzyz9JI6M0KesTgKB2gLHIyhs/JKaZORvrZrr/CkjSx7rnjcn0eXXe7bnVv76TtOHh6+Glza5Snf1UCZoURUqCUnfoWFVao8EfCbN29Bo3QsdHLcCWFKiRm7NBhzxIMjGs1uTBo40tnXEipSS2h5GvJNLFCIqHSqHNsz9+Fcfr+xAeucxzsWk/n21g93uEaMHHBzdXfvg7eZ/WDn7Qn77Qy4i0QINKQ5OM5MtSQqaJGmKuBprvaVZv9GDvf+5iNID351Pto0N+JVjPCasPTKyPZDhNJKlRkBYYCZTQgJONgNVN0CflK+aM1T5XEc+U8uCpFQu7nfs1tXN+Hwb29J3STYurnjFl4+3BLeK2QipRTNiy8eS91c32+4EU8VDRjaG0Su8h0QCfnHD7Q9voNNc/j1nCwXukcKPOLUqqrQxlfraT3QhjWyuW42aGuLmAO2xUkEC54QbGRYNAc5sRwvOF1UxR6JaVQYCreL3kN+My8pjzR6RpIGlmPamEBzATJ5qAgrH0D7JDfDFWsShDV3Y/qX+RduqTfusyIZoKxZu6WC8DoBHIN1xJ7TotoovDKOml/DbhkpQdzXjHNy0mhHwlIoR5f8RzEtu8aGMAumFBQ4Ta1r2lt7xc3wTQ4ZAgv8SlLLLgeypW2OQZ8hUV+RuBw8kUrcD3x3JprRWrf0eR7LE2FZ28MpjmDfzIDtuvL1Wih/RHt7gAmgCI2PhoSstDS/2YKfjPvZAsC8dRDnr2xk9Vwz2I/pr0WOiYY73vyOJ01Wjmv3adzQbOtrhZRpdTfuFN7IXMEX35nSm7uNZLiqDA4PJ1PNa6BVKqAEv+ROTaho0GqLplurAJzl7gwKATGU0RsBEsVOczS0LAFGscLAG+Yah6j1HrGw7EdmIPLXZECKvXR6fJ77vZffA2i7pD71d8qE6WIW5BxZw9mCyS1NrNzi1gaK9kSSfFEHL4qPEVgi7dTpRKAx5XNoF/aYFzadPKsBil2/fEgygej4FiDCFmgDK7FKXOo8kXueyyyWxMf3USCaDry7zkM4pN+ABrniDiKYPruaz3EASvHGOorrUCTI0ojo8hbKuJ66TKP0Nm+TsDmRoKs+izpeTo1P968dSuqQIiVsywWqMWw3QgeO1bGUyj5IuHDG57gWb0kIPGYMQI7t6XREaUYEZChp/mGGamQjoGK1kc162CM7eh+aMKV+OdmD9z3kq28Bi6MwVJS2EgzGc8R1a5xkZ2I4sxE2tk7DnhoMwsUfWIiT+lKj3vk8Dps7dZdQo8Pferj/gtGCN69OuvV60H2frdzPCFL/zppTw/mBosfnjfuXE7EdvoSYz1R9zFXRJDFKohkFDZmR9WKZv4hVSxADpzUc0vW9mJoqW3DrSewiGJAeVLpHDHeVqoTJi2m1aFeWh4hmAygHgk6dtZUyrRqLl8Q3CvlGIno9bqe/uMzulBhiAIbyYgtwqLY8Qkg/TnGr/Xw3nx5OXaM/ss5bAZ6Tf9l6EFWdRUB0kbWRLMFJN6P9kq/2qLPt3uRHUIO3WRRHHK31ylVRGgaMxWwhfyFa3/Wmts+lcOpdLK+lJ1n7G0VZuLWFl8JF06I3+EGpfpwZ7ZMD4OqcnyYVHmMjolGlOlb2vboPY6McuM36AZ5E+YIiTVldMw8+1NZCGKgrl51/dPqeOvxJENjKQCgItLnehza3OaRpCU1ux8Ig9/N4QkYasL5kEoc+U0KXyztnMJNJ9uQkYxCvht+al2oBmA7PRDqBugE11H61X76eFl4AupHfdDVq0uoHkpTn8XuqC/M3a0xdTlAu08fyjNPFpzl/+zOn3Am6rSy4NT08O36AzvVckPIdEKQ6iUek+1ZsLvUyStoAXTuuYayfNKnbzz5KttvAm0hBHcjweek3X3lGAA6Bu5dLxYXBVN1OMe2ThZumCK8rJoLLpn3zi7IKHBKaHwYV9EVbPYRfASXR9HLk2P52wesrrOO0orNr4rKmYLfHVRPuppGS4nsJx8e6f+6FoCZ1KEWorQVjFm8dCGVLMIzvFF0gUy61NYS8CMtt7oeyxO1vgzJQM9B76oTnsZ79fA4Az0Y2wqb//AS/33Wts4Hkt2k7cPwBLXCCxHxSGIRPOxY1B/dTSyEVI59O50qpxEqgBZwE9OJ+zKx1UUKdHyavP9wByXWd1MDLQ2/ocxOu4HFDKp6nx2G0l1NkJ84Fn4+B7Ihgl8imCjTrC7mdZtlPIUysZzGIn5Cbp6DxCopkCG7NoBZedmH+eNmdQ03fFoidIucmOX0Q5m/4jBKkrJNCmCWA+99BaCKfMM33tE0W9GQlt5T45Yv5b8GOPH2xW6h9nwmCauEMLCX270Mk3H82lI8Aun29DZ7LQb6XScLcNm4zwP5Uq9a87TnznLUWRRaPJyTo5KqNvLszY6Bm09lVQj0DG4WjiO22XmbIFsJQKyJ63X9Zpq1bFPiZI//IA8nkxV5bB39sgQHO4Sk32D3HYPT27bu8YFVeXgGdoGZHuIBkN8YaSE0kLvmC1nNP01tmxLA9MaO4+yAzw+EvNrnid7DXp96+tp1ddUcJM8wZr06dpZ6g1CASt2V7Hdw4X3k3Mos+jTgoiYn0g1nMOMmBSna38lyjz7vymdUlNstOfg7RNmDFdst3E4OgpjmMFuSxqJHXsqLfSHjrlUFX5iKSSdblYtgz91rWKDm7YhjxfwMCgZMf1qurJBm3Ok67yqtLsflhXcZB7ExFSOMrbjfWRYs6ip5C1IfiFiSt6AdmOYpC61oycq53WKGh6qZG9ie/v9/o+X4+EarC9gF+MpI1rX/gtoLlP/wlu5MlTu9ia1It3wiG2T8ZQU8pefcvIIzFGZ2Fiq3SIjH/FGoQtGiZbo9wlzYlH8h5fyq712ml5Ase8sslpw+uoeCbEuukGlYDoGYoeQx2P0h+3oqRjnZydIjwIDhzjKvNCLgngFdrvGK0Y0mTeq70tIMMzJfsJc6vqxPczIxCQfpyq/kM4pn5x2mNDp63XFLKndjF3BgvdeIcYJ2ufmlxEi4il36cewHDTta4k9hOWbF9LbFvczPO2lamW+gDi5KNUwj0KIrpXwdv9QPYc/9bIvKIyFIVDkpYW08m/cAPLziHze6bBMXgp9UMtNYvH9vG3gYRb3i89IUWjxUn4i+NiHIG3op5yo5Gc9nf4QNXTjj4rlXMbdzpoXd2XWowi612Ew5Qd+DQC77+VBoXkq+SO1Fw9NH+8/6Z1nOgXQWxr5UUXRU00OlCW8jufcUtMOnYo6JS7+9IUUB3fDAEWqSbGxY1ENHVijMwl3hAcSZ6ogTknRUwJvMYWIcK6vImvyu9MXXVUy72b195iznfgli21El+O8g9GKRSWUZ3spwpKSl4GKZAkXUT6xtFs8ygA8ilRor0YenH7O1S/ZAAEzh6bTQ4JZHiw5Oa+xRf3cbZfpNEJEnb4UFepTi0gmmMwrRUem2F8r7YEkoxN73DcZz/855cI2SoNW/HUEFGziyRGVuBa9Ts9zrWHxjsQM5jylTDXl0MtkVJiTkZ9sxFrK67j/Y63M65UP4xutSU/qtHSjgp4mD4YgVuJ/efyulKbIx06jfc4zl5IvGCpiH68Ic1M7m76fD1tNsIJjVQ+QKwr1X2nyPFu8axxmcZMnFOsTHydhhNoc1dyowvqR1AqrX0anyHteF5jiOmcm0IXzqyRHyzBw71LvSYpu1tSTFtl0Mf4ah7ctNgZc/rBwie+OYuRBXhJhyRrChfRGu1rSl+d/yLEFy1MsyCfFsiMeYkGmQgptBYe5YR+DswiZClV+LRSdi+vR6E3mxF0ju1s3qlxp78Igny9yPXk/ruHMpY84/8/ydjaKuS7E3u5XBenS0d9Cfxdi0bYB9AQmHguViIj7mGedLMFV5cEwX1A7JptaXfVKgmZLbveO4WIkt4QtXpXx1ftHHD7HtDKFmy3N1mD4q6hD2vO/6qXVKLexahftovF+Mg16eULftR+8CkkjC/DaOzd6uLmPlxZUcxX0/IJEQ2b/8MzIuEKK1o139bZPUZQmL5NCVrc+1o33YpVGmQU770xO1kkWyAkguJ/c8dIPWBluApRaY3TfkT2XXMqg+EgOsRL7ztoyGK/kkDJuVk+ecD7H/NkB5uGD0d0WMsD+fyNSRDTRtqzM/ZuNOYCAFAF7lR8hqBT9Fz0FPcNpcm9V6pcy3rPog3eNnEPC7spaqY5xYDyM/yAYAKmtn0F8SMjcVLSF+r1x4Ma50W3R7GoU4irv+XZUwEE9m0UlAThuA5zBOm3te/nk0QApsNh1vPDf6S3tDu8ekLj85y9+19oKKgBlgpmQE9y0JTKiw+FqC8VR4I1ZwOXq2rX5PKQzLfaWwpPkKrYU9wsP47LMnNwVkEuo+nm1dFnvCZQVRQFhjMpQTMYS0pS81lDBHuLLQMAJNphsL+RQ00+yJoJllnfppn+4MrTeXHsZrax+3/NX2lqWabKZZRj06PBBtes8T9YWaRjGspPmyNlNS6F7KHNHZLV14j+aKTXebh/ArGW2Yh+RyeJtEZ0mvNRJT3wJl8xSncZtua4y9KbGWfIDitouhaPyUeIyTv995N7bfqNcHGr1sxfIgarK4LAtYZP6kJEMx7F9VVoLqCHZd4avh74LNCtHQX1mNL/MnDLaUvv0U3OLcBOYBHjaE2GeMJnnqTLMt0Wz6vcMNddJDLaUg1D3v6r5fyFM/pew4MVgQH9rvlBWwyMOENPpijYbnVhPZ6Owc1w0gQzrs3/+HOyyDNLtO71e2ml03BAAC5igX+JQ/sVGF79+mIepAJmqdrIFbJme/yoMK1OkdLIAXp3bkArB5QCEcPLojpBbGjJ9Fx4yf+xcZcRr0tngpqXXWYlt4kbMKakEwzodnykzZUKp7J+bM0tVTYi2z8LKLcKAD7x0+podaSMIWkxuX/AtfFECZserBh/METreEAK/2inWvwMht2a47nAUn3O7FzsrPJkDKgarGXUWJJAZZ4v2x19Sse38ug1TXa9AHKBehR3kPN1FsUH8CZTJYaxPnKirwyES8O2+kLfOGYN4Lb8jm8dVkdMsw98P0Pb7E4KvxWxK4ii6p61985w1CpE3hhLlWJhilWkhMqk/GrkndYKpidjOJ1N4p4UZgYKQLxJYIwU5IBWZROU1UoKZpDbmIYMFy/ATmIbdesXA54wrxt1YL8cZRB8x+CiJ+C80uWhmQzsM1vrFl+ViZXJ7iA2+3Tdf2xdKLUr4Ka5W5jVVPdxEv2xDOtny1ObUoF25abitPszQQrDjcTofgEiyhOx5S8eaX/2DCs4AlE1QGD/9F9DQxt576z4wmDR1DhzSHJ4NJHyAMz4urhHrkA5uBLXJIew0Gj7YLFFND7UJfCKmW8ELSGrI1B/52dlj+jCCs3JMeYMaY1xLNNN+s2auCdv9ETpHwfniiIZacPU/Hy4FxmZoPIs+Fi8+EMmA38Z/A0BJGBlQZSQtrMIZUAcMahXiXWgULV4Xif6UzN/73NLGz7KmhNmx5u0PHZ35/RV/QZW5aPO4AS3/1w1IR+sMRuSrYEP+Cz6ofXLLDVbf2KraaG0IqCRJdjCrkDgd3BXAhzquUIxm0Xb+dpaqD1Pwrh7hAaLgHJA7qrbjqG3KCa6h9/1jM7QGnm327yZV9Y5dmYIGDIrhEP2bU9IdSPRSjsBJ+XMeMYIXPxCC6WE3PRCkrl+PvVJRUwzqEsW/A1taeRIZ0bCrhDDlaqMMTBVNOMaumH9QVQ24oZR1bStSh3qhCnrYMx1G+a7I/P9qePkxsRtHLhwIgZkVv+fGbxRDNNjUUNpCbxYslSwUMmvyxToxsWXFehN1QX9Ii8WXPoYFsfJEOpV4hvDkdg3rVXjq0I83vJ+GsVAazxESWzfJBsT5VQxBPaND9vOdumm9hS2RMl5RcpS5r/sttmjwdeCHzUgMALIjIkuW6Wx+T6+REFYEXgu9K2kbVOdGCHPMqASLtiIVLNI09+OaxLUn4AToUhlAmJR2AALyhGwL4UxgJOL7pF2VJZJJSDvxP77tdRjyYi6agCDT26Wa+x+pkQQp0yrlZA2ogt8JAnjAwjJBaGNaOJ/xL07BhVHYP1UsMM2PZFZaCWb2UnaG4Wi7JtobAEWsIMvl6g4VaZQwGQD/7yL/R3OWjHoVHUSh3ihLsNlHpTn0arlWAFIMEx/8k/gdrWh94Z6U/VIUiUE09qrAVIZQ+kHR6hCyGAIiZ96XaKnomT18T6mqgu2SlQXjO5nMYlsBRxQxVVx3IwJiY7+3CCz2GD5jYt3O513qj+ndVpqBhKoPAWb7k9tBpAjUs8MurgEH2Yu5MIh72m3ZiFZ8sm0+P5lZxYRf3gb3Yx4EcyI8Dgt8cDytTuR1mBDhuzcxcd+9KAltlOIPJg7dIUQsCyREM2Mhhyc76nz/B1lrIzBx5E538g0nvgeHSEvwQRByS21upXC0vQwzzFJGvK5LphJmmmGekN9yxSZ51K4jw9sqXz8f9v6s65dBiWcAoTYavawtISIAeIu3vkLXuldEvZp4WsX3XuaKCgRd1WxMhH8qpWnnC+I64IrQtmACNzNkRsMbkbf5CERoFwX/jfQLDHufxIlkIENArLmEfSpmmPq3XhQutUWg+bet0jLqluiMy5TaQ4cSW+hhEnTFZCNKItL7vXFYZw9yGg19Yw9cN4PZNa8ozTtkoprxtRGa0L9M2GmN8YIGPP6HAbMxybu5xSgoTOvmBAWKgy13wCg7wjr5Xy3j4Eji1PsJ0raMWCwLJgy4jGQVQcjqLYZ6AHtubkMeM4v47KoeA4LdFFvBcVq4vjgHxV+ZtFKzJpgB/ukezOsECfeaej1HZdGiWnCOn/62XziJmQrHUJU+dNvHQZxJZLnrkNxWhI4BJudOjkDHkPzljd8PEtovHRZBp96vcydr8iRFzod8ww1bqJtQCUOLPYO+NKCF2frMT7izdwL46IvtpB2o2/L+6hOYYh/lyEXmaIsglYO/2EwHyf5a8kU2EofZdHp1rVtNB2DA8zlHZt5AA7p6dBIhhhNnC6meVwYjPkaYB03kpY0cvPbT2Syk2jlhF7g1o57rxNQrUtS61cLuzewjl/byOTrLlOmOrvJptGXL0NRK+iI31FaQ17iZVXcGpONT4X2//9d7RBUczSV2hQMbUhotA5p8hFqh7p5mZX3km4DkcC3WcfxRBE2h7U1qRhQtvoREqk+szhnESer2pHIxR5hPE3R5pjOCoCrP7/1oSg8FIe87P10Zp22bXKKDXBhZ7OqVboAC9GIdJJG/XcI8eUllLxelV2EDytFlwlOOJ+jzfp35Q3p7H0B4KxImfH72d/jfm35Qt9SKo3Vd8kGht7lBZHgt2HmcRJerKdL31ScGsVYL5C2yt2SsGm8MPpPzFrkTPCR5P8lVS+LU4yUXxIfIvqjADUD3EOLQKf1V9UuWQjQz4Enn8CmQO3S3kWE3PEdw4m4wB6HrqMyG6bah94V+ISphSdD42FSco9oGBuYNp2IG3GYo73oRNlJ2NoaXsYUROGSduRxCWC40vhghoUTyYz66gI93dKwuq/+NZN7t011i2xkZZoh6bTCQcK+tyFu+rLW0IxjF4beQD6IAbxk6lX0DcQ6SgNQsWK3EQZFpIcjzYlgIzs25PJ1GjKA9/+ZZteZr+qfe34yDfo7QVCY9Wz/fMBN1OQ6mIjY8tsvmkrVIdt57hh29LV8/Fvc8q5t5mFpEdgcfVrWMODeDi/hA/AGZyJxfuKOjOdM2Zp9kfkp8uFcINwoh6+FdrAUBZMboESI8VznHo+34zEv8OiQlwIWMhXWaebe93nGrkpP8+9Hv/m0bQ3rPG5oE1X12ieBmSGBRTYv1B3zwM4cIW8h3MP118F25EBrGz4xIkiDWqQ5p296wV3baARfmy0tVZgyj/wZmSp03VibklCZR71vFXgWV/9of5ztTwpYEW//ZQ0FBIYEj2WQHK49cwir6kYjW0uiI+JescTDdu5C0EF7bjcSIl+yBBA9zJD9rRDCQJoPn8AFADKneK2T1zCZZvMe5ukY+YOboQYRn2xDot09uv7sfoxlJloiElmC44sIpcSabB0vQySWrgam5uikUSD5abu9Mq1rjJkaDAmOv2aMBWgY7C7JRK9D+uCDUazaF/rQlUmAJy0/52zQXZTaZdaMeyW6Px0MdURU4SWLgygkACgDqShYgIXOYiRBy1Gj6MfCqOztw4dK0Aoxu5KrI7IX5ldlWC27HpcQ+jIxgfDW1dwXYmU75U9EB4TmE1lD8u0DPx0aWJcJsRuWfElZo5/fP+NyRO7sZKD7nvleHoVCJjZbDP2kdMU/HrzIUzKvOg9UGv35VH6IIgOC98zBOqeG2F75MkcDJ5e8IMB1eCRcNasn94oLusuJ1CZdijYybSxCk0OREruaj+fgFxKLuxC+SQQ/ajVJMhYOhMgXXnPR0GcTYPEJY1TC2Q60Fb9GGnvCDX6l6aYLavDg5rrOZfn/hs3GopZHKV8u9EvTsTIadDk/K8sDUBlGXvECD/I43xeRDZ+gZUAU+5toiv/PENtAro8XCWn3ffyp/yaUMDsqp+pNPXeZtrlNTYqss3HXLluAxwBQ6x69ZnGZNM3bT3S2tQaon8xHclCZVjtSYJ1bPPjaqof1bzSYt9hcp3cIMWFT3HiSs2kFN0jpjgoPqfElpIFRr8NKQs/TJJ/fh0c04pMNULGdTTJ88L3d28a1rC/BgbiKkgTJ5xGoZ7SgKChWFvufttCGsWXNuL0GSWtCc9VWbdU680LqL5YL30nGuFg5d9+t0gmezlBPpjQjg/2xWLky4gMegu9aK1G/SbLxIcb1bm1OVg5ZTnTeNqePHDAx1Bx+FWDGb1IzAvbQiNUfErb1/d9ZW3x2fY6WCxLHBV5vn4mEEBg+PvqEqkDGOaCRlNwltwn+O/FPbCez1vxl0We7oRsj2u7842U9JyWQK//lja6cXDf9j3xrj6fvzxQUrWGQKxTUXVdzGRFRn9cW9JR5Mrd1tKbrN/Itv+9Z1oiTTLsS3b/kBU61YL7xngpwnfllJ3QIGznTAlhNM0jSlvWLF9S210m8Dr2kXWWdcOIIxMaOweHdbtWNCvjs2uXOd9Bsv2Vfqf+t0Krevn6wbQ7Hc0FZLQZwQWKtkpOLGVmdcIMGdlxXBqk8v15EMVUc9hGvc7h4v/ovt3GddbhyPlnOY43DmF60sYjtGFR0nFYHYI6tddMG4LFoD7j9WPnJns6qPtAbTl4WBTAFq6dOhAoXKEROpKGXjxLqaC8W6lXQa29Axas0RGbqWzV2jK6GLprIAjU/N60WNqaxZwk29AC8s77tTi3baICb81Hb10x9d90lUbjzgXBaIpUaJzMzYDOrxjNP/scDGfuyR5G9YwXWCGdu5khOfucwWUMxh+DuomTuB6mfSS2iJijVGgP6xQSwbVgegWaCYVilDhNc6wzQZ+JbTxSme3nqtE1v2FY1anKx9ZnGGCRv0Z/ai/mipYk6x7kJzV0UpakpnvrV4juETleWQMcojUzZERgYa4CIEjDp0WPWyp+6J7Kl9MjKjfgrS+bbA4DE57m+N9hqeg7IW/L+aapXpuHBJwxBdMMY0I0Vaxh2Iw8Q/mgjXSIiMUMxj3GshzFaLafOEFudI9vCt1sqqy8EQerpLpJR09F1Mq/1/aJph8zAs0rY1+B9tslVvnMMA7HyxI8+G+o7zSnEaUT+dB+lMqcaHbkVwCQuJlvoN0krR5lnDnaWJuiX1aLl/DmKListXXE73gyroxkyklh/hM3QurCGYxeqLWTSOEZYizVmdK0BxlsF8yjslvBEBa08DWt8sK6KpqnBf6j6wZu9G9MpEk7TJVgrValNZ5ya082OMLTV+KPB1ptgYyZQNxSQQR97R5laJE6g/JHCHFZPwLMM4IWALJ3DenisP60vSfpjExIxE6CD9T+ZZLW+e/lCXft0EpHxWW84+YkuBjagSdfGj6LGrClm7FUu08qqbioqtxNtboRgN8BbkSqqtzHVbkESVhLnqOnoyrdqJ7vjSCDf+iEp+Z4iy0H65z36vlfAHHnzUKQS2fv/49w8TiqNu531/KU65X94cE87tGNiuEpl0RCkWQrF3yBjIjJzu2iDHYWnDaM9lp+fq5eHBAEiv8t4E9cWVqoYyXT2nzIuJYEv3sOsbUWY4HWhArEiCJ2msNYKa5RcI8vZ8FmrpRw8uMwHag75y0wsIIb3Kn/vb+7eMjdMB0PQybkWQFcaaYaa//X5G8E8OJj77lchcPRGUi+PgWidC+khGkkPKXSDnQiLJNqQ0VvxDrfWT7wrtlEjbn9sviYpe6Ud97nqetwSZgLGH9p/RBMboikF3DRfyGPVi9c1H24Db6P8LXXN9i0r3J0AZ792Erma5UUWhy79QSOayIlfy/FF2DtOdEOBwhe8+M9rt2BKNXra1Ozh/zJ9UW3/h4mhzRMvJEVy9XyJ3cWq0BnoYSR7usyJr+MwBeHzSyIn/AjSwWDU9qnvs+lusgJJNHMJDSgDfVsdMPHEm2lRaUmi3q2DZfB3V1d8OUmAGKQPp5vdLUg19KoYqlKVmRvBKdMQ5qbgEwOXMli2ikEPNMh/xuQWxhPO76PW8bxJrs7Pz3au9Y+Bwz/Ney2r5o7Bmvi2vp12Ult4Iu5cEs78RBp8diQn7kSxjv/7IBL7DwY8mjcxJvWu8MhB+8qgR6RIw5EPC1SYsYVtFnB6yemSyypjFQ99Fha7xeNS95MzFPI6Sw5p4z9eIxMirpFjM0ZX1eU4Oj4z60gEMtR/8ivED8QbKxPoortCfHwp0OtsYJh9tA3p/szEEudUXyg24lucxf3zDK3FXMNIg945MGzDx+w0b3tRVx4UIOMPzSGXNaLZgvHkkgSagarHrcYD9Fs6tWC1qUqyFMkgO4owx2XLl9jopknZiQ7AXvL2gWK4Oc0CSx2ScnF+Uxma3awZOLcH6hh1nCputg6dAGsefyy0tOTGuvHxxw+fQRd78mutvwiPlri+Mq+aYljWXK/XvZVYmcDtrE1cJzYczKHN3/WSm96aWDWv16NvR7WAyxTlTtr10/RQ4jR4CxylXwX4gIleEsqX2yG6Q+vCyBACKEr8M4q14wM74lPdtXVd7NMS/IIX3ujTnqHsGigDTXSd/rPlj2SlUa3KrUdXTnHd0QBYRbhuDSFfd5JojK1IC3fqBGmlU4PUvsnyZqnvKKYdCSYKFpyEwVnpI3hwBnnUKqtjNFgmWBi0rW5M/eQZBm5+/OHBUJ0sEvykqJVV0dprM/JPXOpZJANxPg3K6F5EkAlnnAeCu/OBrLi/0wEfWPAL6XwmPCYPsY7zr5qnCsne1nLH9NIlut7ZXg4nxXQoawWKdZZVHQfj+YdQCDUEtfqh7GaMNyHxYAERY5j+VFRGzOrRjF/uahvJny1Em6CU/yTDmHKqiUdSuQJuniSoxMgxxWBeeAHUttj7yhpzPTeKI5QOh54JquSZe4XqDa+3K3ro4BfYoco2V79XMRJg861kDjYQ5vwWXc8LDuOEfd75oelzAkYzgf5PQZrYdVqEATphF2RBtHmqTP066gUg2SQ+vkgRLPIT3yk//8Kkr+1K2/NF7gFX2fVa8D9bQEm2bQWrhhFLbVNzeTvhIhU9UygUjzFM4UdD7sIYWmJvb3rxj6602/zD6XwX1bRwvD2cOB5V9YShGrlzAyvh74m1OpTnBtQGNhLd6K/fVpzxUyPJYIvXGXWcDG/BfIlZPgpMVQtDN+vGoEh2qrGUDwpg5w7/jGnhoM5FR+O2ewk4C/yeRWagHJZWgxZJEyZINOCpwJrM4+WAY0ugZPlBCLmqz1i7sYBnMX/Dx3bL57zqNtMu26xaCMI1N/Ez4aZg+a7kimT5WNRjV6aUbPKyGM354XhnuB1x5OBm8WuQLEuHj1SUB0vDoeXtGbtvtSjTGN40d1MyYcYC6gdchxqa/bccv7n8qTT80vQ+sHFfMoOuf3JfcLOc13qqGq2LDpzAIWLMmEbuTvqVBqRZdw5ic8UZvbHe73Y6wQNPlzL492ck6v+awvvv0hfBNaCVnoxtkM+4rY55tE24uNpTpylSqtHqnjdylRD1lxATPHYUwZ1/w8Pn/PESdH4Vv5PvFc205AHUPTMIKr54yhAarIFAX1akZ6uliPgiUF3cl88yRZFpb/5Ds+5JXKj2xwoTWIYx7RnE0BY57F0g0TxXAdzWkl2RqDfqQ/AgHBamXKCkKHFsj12oGlsMg4A4vSutUaQsayUlGgZYdSpIBn6TQwIU5JLXRjSLtJTqawTrp1B7j2I9Tw6SfkkB17OAW2TpFpMEfhF0zGQAW6H4Me2mxHNdEMM0AbZPbg612fdz1BUtvdJci65HWhS/nXTuVy40hCWFTle0h2JN3Q0jsb3sqyWzxgTU8oXh48jh9RuE1Vq5thYwwSfIpnHaijEb9cRhnIh1DhLTy11AHN9XOxzyDu2PyJycYW7qQhs6dXRzzWcWp+tuquCKExJ78PCSMqDzFJQMzOPHqZHkrLmwQtIMLit/Qbsjo9QgRMXhtRzcpx4x+Mf7EsBT7QfnAuwe5U/KPeSpVdZxGZX+WhmUV2zzIWd3lR7hTQ2uR1345xuEYUGiIK9uzlA6tFeYf7jKi3Z1/NxNpJDo8Q02JeFOvuHlYZsDWhSHT3cfiADWLGAJg9U0pcoeoHD6LY40UDlsbn5a1KNXdfJ6hnhwMKkjtT0GPWRAKipenjHDSKQ/6+C2agIkj/Gp2s0MHXmmQhgHH3s9mKY7XqUtlrxJIGzvsEJwG0HoduYOiWeotVYt1wGFvx7SFKOGT1NdLm3JtJyLJ7C5rCguEynnxZ6eEDIM4hHgIQkO6oPqa2n+xwQIN990oIfDjQ2LD6Qm7AKkXZSJF7yqrK6SnL0rO9Vz42s678Y4hHEuhzh4l6wHEA+3vVTjJ1NxHg9+0RocwrPmqZljmOQ06Qai3MK/ux1NsI7x9GWeuMMVp53OdgXDpIwaldPkD/OunA4hpEoIhVhLw46Dtcs6WVQim1o2mtag9bz40KIrnZVySjduu2cFF43kNrpWfT5Y1u9mC6OhheHiK8hTc6WVaK9lzYzadX1zVP8L14pJJ+n6uK6IAo7aVfl17g5fZHEUnlT/FMygXCo0qt7za8mOyEhunXIPmLNNBQ0ifmzKs+LgpBp3gH8JS+p/WSOlg90geaC60U/wVHYzCBItxitzdNG3wNan/mMqk2pkCe2vwhjMUZFMeGnL/0iIMIxpbidKnNAeCpQthk5+DN1fYjt4fbAqkbiOu8F7DEND16GYfZ7bltZLomy1aAHFqQtHlptkJJoWGWc+LNImiLyuPdS1OYNoxnH3+Z+g2BGDUiU7f+YgY0i3DKGPXyQo449WGhvVeQScCTHZOaSsBhCAQj8BfN75mLQBtiMVXsUUlvry1CxY9yTDpmuwbQ43AOXFV4+626Z6YGW2AuqpuhA1LmteFW6vv5OkSHVDpNW0dAH8sYXEu/TYMDQURKbprA+PmBBTImVgxHY2pRqKLQZG/aJRIfn2J0A4rwAXmg9DcO9YzZASc96XOWuTAhBEdYK+dZMfhcIJ6SvMxNIQDsWF+wo9/19fLGA0ZE1SAuIL63sfoSiRJ9Q95hjAC9PCA2FKZhQ2W65blVkaIN4/wCa4zhAhd+8GGlGbeYUn4hr5XZZ7IE4EIwfzXzv/nqq1YW0MPOWHYSZDFPUcfeXt1A/j7fkr3wIJAuBLTrvuovQttb6Co/Q7wJjN2218elR2gj7vgMR9ZG3lCcidoiNKNI38Z6IP6YAeyI0/iczybJdf4UvvaCaUTjYECCkoIiu9Z7lZ07yZLDAq4Hj1qaR4/P54yeashM+uXPNBneI2J3I2v5eios3Qm51UcGFfhDYPS+mnS5hsOFKrnmVVHQDx73nYQFxfsDSx+EW+3lww2fNa6Yn1p7QvgebdFhJjT7KLbAfpUpsyd0ZF0XYXN5lUuKf/XWMGLex7QqoD5W2wrpjZ2qTlzxQVOxoUPtXWnGvasrsliiaf+xB+20FKjqcbVu+m2VJhDZcrto1LB4xjsIOleXG363nhVLVt7J3dMUtQv+9yIusiDf60hfmqkZs/tw17aVdyDcl3xhqYAmJlV3AZCcA5sBcZhXDqMX7/ISWaFSi3u7miHy+nSytJQOCdce4sEqNC/VtLWBpNJVoSBMISu5KyBe5pw8ihU460KqlQibAVucABt+sbEqvBDVyPmg3xQSloXU/AIEqI9D9r0iCEosDWSUJFPgkFNw09fT4I0ENBd/ZP+zgiA+X4Xo0S05I3KKXMe4ndI/Cwo6SxXUxDQczS2t/MjcC/XWLyoX+jKlhOpKyFzH/nsieWx8KXcB4xamvR7U6eWqsniFHRJjwDn4ofbGptoM7yI40nM6fcO2DQI4wpuho/3DRog5CF2it76/ip7OgYje1hxChZaL8re3lvk/yg77d14DQtuMKEHPpd1o4lgrY3BdlfCpo93VhkCCRK1xjyyA7+U/NFe8GlRZAF1vnjuB+pVG/lOr6OMiOHBEYrQcL/G8LZ5GUU0KLEJTUTbCYe44sKTepQtiwylEpEy7Nr3re9V69wGLLDoElYo9fSt+9mN9HlJgI/XINOQqlAsfqzC2y4UXnC5PQPa8CpCwZ+tUFM3Ke0c3nNtXP3nA++SofBLHBviQi6NkwA+m9QjxXajOAsDpzU9YNTFUQBLzBGHvcmX5cp9OLik23ga01Tz+mWdhGVGqlCvz+i+Kt5sJe+aGfZvXMm52kePC/zLAkXGrN1OJ4SDf2RCvaMxZzHfcaKw9ZdOi/ohfbV8Fwwc7mK3r0ev+FIwNGzJXHHrqquENX5npDlAZ0A0BLOBjiE40my9zCgCB/oLFaV1uWXIB5rw+voc6k2OD0pZeKMtnyZmqll8yTgNKvNG/1uP4Xr5BCMMnDHwaBLw+BcbZ9jgOXyoahoN7auAWuCCNZnBiRDTIAjfxojn8c+H8IWsBE0wbY17Kvc/Oz0d9yMdPCfOa4A70E6sWKGiym6dlHrAlJHvOLTrw/IgjpxcEnKYbaqyCijV6vHBIyfwxDdP3OcKipkWGxRVmshZ7PFVJMIUcO2fH+P/64MFCsltij1GZglTEZuofArbIS3b24Z725k1I3F830x2eyXVliBn0lL6sKvVnw2zjkEwmQnktTR0vqeRcAPoS/EE6jCniRCzFXO1zBH4oka6QA6LLC8P6DXp7MB+Tyu3lIN6DFyBpiz61HUZ6QShWtCIk5OM3/0dBB4AFEILdCVw3YJGqvu9PXyC4DNMwvFIRCxHAyy+PiaAwUcoOPgboaP7vNzMaYT6ToNskik4pZ8L6l5vj/qUlh4YILUk58o4/p9KORY84TP+Y6wu3ncyU9/fRllsyEWoF7MNBunQ1H2mJjHBHw9qWID3+YWrpgi6ifuNCsPKuW7udV8cA4JUr4OWi1sHTdia4Pzr+XanWuHFIudSz08yAgpkM32pae76DA8kbPqomFdBcKoo89Xa577rwhNbuqTPcpTB4Zn9SHIDf8nPj9YL7kJAGo2pc9MtSHgAaGmGxh4j+GHUe8zMs8VUScMK7PgZ6yaf1U2wEEEuvrZCm/b4HssH3rg2XIrnpk1SKoVmda/9IWxZlQmGHo2OWZO0zOf4DB2AItA4U7y3AoszlaWYWPfXKmOKofc8rP3MBYZBsm9Wuk9iZSmq7yENx6lB6OH4zJEmFYPBJLeLK9EltHn2jP7sqOHQR0owE+GkVF6pElvlMwzRPpyiI+K06L82+H5mkL9OEnu/Nu6ELUy/JBXIP9emlpK4QBDAZjDnIFZI7MC1w2sKwE9XYKSX41csn1kDaJzY8eH51EmrOgy7kkcTUayTTursjk58o8OVm4MWbaOZTv+C36p+LkIUBqmG3FNFZZdnCb1EuWkax487RYW/h/WkXvycqcD4i0bdhy/0bR4Gx/ihBrmbeHIbatt+7G37NUMwM5V9Ctvc6d0Z7NdFrx+0zO4xNjDaFtT9joe98aETw9kcuPxr8AA83znRfWRy39eClkgv18J+yDcOiFvq2UDyrKhq/hy+HK6RyF0+Vyr/M6ATr+3a2dDbU78Hy5NGZ8D0PofD8k/WJp2Ew1SWxJqWLC39QVZYu3sr+GegVniZgMNETgAEqE7YmHMmV2FCCLr38ChQzGGG7NatdD3l8Sc5hLRwBxoM0ZLjhBOxYr/KZ8rBdlOinTmReCLLznY4Zsd+7lrInT6meA4v8rszfV6lkMX24me5RJvs9EPUOpYYzEvd7Dkb4tfvFPxGqzyGU8/0g8F4s9jFcktSyMbc/RtzHHOX7BOxC1ycvyRf+L8LffJCXz85DbHSjBV3ZRntoaxkUfgyDSOs27W6ZDuso/EiIDRFtHo/JwkuoCov13r3ydIrFawVS4sov8fL9ghISXOWYx+iy5+Idr4gkwKGLWbt1w4c/ymz3WegeNvRctHJ8FBjja/wprjOKNt7R0pJdusmD9SBl55v3K+HOY5YHV6sR9SeEYz/57oZ8Dl8QopM6EA8nh5S59Qd0/ykuvqrmXKpjAcBFAK++bssx7TeUI3tgvT4WrnbBhUYDJPJQiFG6cZEcQkruavdZH0JrzpVgIbwtCwimWECQgwPqm+jX9dIigsmM4h6mYnBoZr4kbDPidWsgs9JkoFXYyHFldLE6wsAEt+p42s0Z0A/E7+x26vGaTie77RNhe6s4S5bPJ32ikNT0hhEVYwg0eYDZiKe6G9aG4h3lq4v0tjIXhCe+HGHQmeOlOfTXB6UutapRQGsCgITxuNMSdAtgKbr4Ouh7HSv2Wtn9w1SIPrYOSL3JYml4M+V7NWXP0h8EGVSIo6LKBhVc25OE8cjEV/AQrjrSrwp4doWIq2LFTo7VJcNsEnrDc75de3vMBCBo+xKWVzBuey0UOskVzvg8qOq0fiSpzPrgEEdQ4UiDOamHV8GcGe+ToFcFZ8bfet6huXtHZNEVnlmdUl4sqEjTt0na+Ilj7rjI5k9DE8mFs7MxynCB7a8CXXWpdgdXk+/9FXNkGm3rWxVZOlrmz/r8O1OdoXDW1JpM6qPkJgL0UTvL/9KOcB2cjawyuWmgaEWPs6rj+hK16l12QpZEfiYPz/+0BeqQbb0//mzpMWRFXqMMzvwTqVea3B/zYgR0hqooibYri4DpRNdLCzIlknp4s5NfCU8sm+T1oqT1CFP6JFqUVnMJWLZpXpLnsgE+cVvpEZG5NVsoxLdNVwtqIBUAiccN2U0023K4fbwNjuVX400B3d5iU/SAw33cIZOdgCO6pP+DDsuYSEoq2/Rofw5L684fHgWNDI3qpEf+b6PdGJnoeixuOxHQB6N6/jhkxbYVC3ibrxHGWVOHTcL5xht3Cccn5XKuBsW2BSnE+WQ5IZUkc8b65VCV+uxwfq94vp/tsSrE55lqv9FxryrA3qpdfPBgRPPcyQdqSdoX3/FFz8sLY1ooFwQ20ftiIPNVYrljUhqQJ9nD4+fuB3G3lBLNgEY3T6wb2iybxaG6UUzw9F2QheYirZerhiNzEJp9vni6w7aKkhGlg/XFruFTSt9VCHGiy8x/nVWvuVYA6wMHvgqz25Kzs09jvsxUwLIvI12AIVOdGOIux038wmj89bA6QJIms7NnxGO7/2PAPqiO2zAHsQCjYMt2d/rbNG/PVOyVe/rM+VOW+OaTcVXTFJbYN/NwF+Hs5GirEhMPNbMwBUArGE7PZatBgCMGS4oxLW/V1hFeeNub42iLvG7ZDxKc97YjaiyTOU9m5tLfmb03KS+vX0ztkqbLV/BgyulCOrk/wHJ5u5KMADKplZmc+pvvNdlCsdrJT/pPA0DPDaZpi+lK/MEmxBKu30ACjqp991X9Y0qhRgt3UYsdyWZbhTPZb1nLKM5YyMtYi+OYz/uy6M5QgYiJKb9k1sayb+y24c63pxDUNsHGdaGMLqBUhmHbft1vf8wBGTbLz8XvBoXOsUA+TJ+Kca2zsfYzpd0HGRpDTcBbWzgrKpn58vNqxuK23D4ECSX530DsRbuSaAAZGlqkc53cTBSA5xH6op3NnPBmpUXFxUmbH3iqAnOzQ8zHaEVjqWeUz6QQjlo6/qUphKnobUyTXdJq+dEvZ1hRR4Wenc1g8uu2n3n92qRaQCkNrIsnMTUpy+I278fDezGT6VZT7AzGlAjyjZl9sQVRuujHOH1BMQYVVm8+JRjmYbWHvW8Fv85NIUSMTk1w6PVvcHrc9Z3+mzdryifOwgh1KpJM0BnAPkqeQ293NzinATizABDPA7fvD4y+55g85fS9kd7S5zvo5Jv8VqP5ABzUjqhNqt0L7wALe0+AhnfnGinVOK/M36oQ0693uerRWCjCZDhcUPKY9RnPIY/wiDISFQn3dAHym/ZSuyk5nK8AX/7RUUvQvrQxtTq0FTtBfZ49UvuljL2V7O0J5D4Zn0rLEaVwtRYI9K7i4UeBhaQ1/qWMjjVXDsI8PphTGRxpjSBixZdl2GFNGz80yBAOJ1ANqUTvFTumvMIfOe0sn4vMIXRrzlKN8+qNecO3cZca8nqPMni/d7NbXGyxcwqFteftff00TMXg51InXiovTuejgPR7cOck/1fYHrr0+To8mF2cAogYJZN6VG2KkWxgmJ0wzdMdDM2f8vzPXwDpuaTevv23hOgZ2b9rhpKRpBEGS3TLr3ZoFmfHqrJitSgSH3sR4NSSFwy/bklElyZDWEJJZizG9V+zF+57t40GZmnRCdkJf/NRK5FyfZGLaApc1vT7+513EEcNupzCOlAZUMKZGvuIUUITZviJa5fzR2iXdCXV5aiuXNDVrEHmUfzH++xwzywENW1ubpibtB8blidQ6oUAcuPPGubMNeN0fZ1+ieBIMkQQf3wtDQLKyqU+fMP8LL8ZYObn0RycGW1B86m489A8knz6Wi/GKwIkjtxNKSzGSPloKb50f/mVtiBoPgU5Z9g9zIfQt49aRw0cBiqW2iCSb77EiFmgcOKuzSleGPlwtA0hAszAsoolbXeU+G4LiFe5lLc70lZRiUmAttW3FDsVs54pljd7xYvAU4t3TQ0enuedHUiq1OX5azNlF1Vi838ZvEltQVUSSZ04XmpYr9yRMK74SjJdsPJbMsS+R8xYMmgWXtyhwgSJWAl4vtK4o4iSFTdaz+z47k/yuEaHfNGTVhiUcl5tTDHRoOHeumb0rj8DqGcBOcxAqqouQP4CxYFvcOW4q2+GX9WA0EiDuc9Qlq6clpm+jpNpUJLuWlA0y6TQ6sre32ZwBOshUK05cIHaIMm25A9ZvzEhVJJ5Y9WS9IXh89vn2SiyBCS2rcCiScMXEtJDjQnrBPf4CgsGtdihukkxp+v+yCtnDjwZWBM+VJb7uZJTwwZJ5MSNsdNXBkvA4VxIHosWpcZBHchSbiYsRjUZk5xURpOJtiLUuZSlSyoth/zIZ9TfHrF7Av+p46EahTB5FgFLQrdx9CWx+e5XIi/LfhP80BiVq0vXHDBTXt2JUlfsmrLkmmntfDHw3qvk1fu6WRkiyjrJhboaa9GJOKkY7EOju0C4wcKlNDL/UWuRO4nGMUNQAS4VI9mJWkT3OIFXXO016jz/DZzQLENeeUUpaxTcMbgogjm0muiOjtQChA3MvOBJchtJQWXebckgfQlqykv/dvTVbiL/hSindBMyjiztB+SUvzDEJ4yGig46uaA482Gmtyu/GJa5JqeE7ujM3ngOQk3LM7FnscSQWmIZOq9Qgp2Vuiq6MPVyc+9cZdTy/7FqCduHJtAQFfPr7DRnt5AaYXmOYlc5Jl1Lw6/wzINDy1FJaxgaKcHee0FTlPVeACm9uZQ94JcVv8sNpyNN4qFIaBfUwxr94zNWi1fls9sAIc8e+El3t9NeweP1kRxxs9RUpeQp7opP59UP6cSJM8L95X3ZJALgRebdoOLlBjGKR7EStSAG+10fYt5Zyg8AL97CSk17C4kageViviiDbNPyXhij3q24H9nmdj67r+HC+EqHC5NVie+HdTDV0E9qaZw9tYSWa74lfrCrmMZ1hm5cE/fx1ghSUAZ4Nz+uLeAcYjWzc1Zg0BGXP3b1BE4LKzL1aRBldiPGTsp06Prn2pJedOJZHjyzxCoIPel0goNdr1MQPQHsBRsD/zSSLPCouWnhfAJRozom2TA006YkGbk0wf6q3zcAIXjJb/3u85SmVAoCwutVJpdFjqtNdzATvcrBLEclc/qGO1MhKCrhIAva+xEOZ4k9OSHeuQt9NaUBjtqq4w/Yj4brO6yZ7je6+KR4sR1uHC9xkYZDV6BuM07YuQP6+2gVrKRK/NRJDDTS9xXp04Abwn1EXxEujWkoKMxrcwqihwEvPsjLeZDP1cxI8g4uTsLmFGaDVkYAuxwed9xU8ECRQ8A7+U3/luu6BHMrU83OsCecM3YKpKu9waYEV5qGmvRamwDROij5vM9EdI+pnwL/cy64cT6qMDM5trAowTHiS4nnzb9vwbtBYHG5ccxfT/6bNU37sQx709qIZo7vcwA1CnpNZfIYsEWyKfcg2mPeUZow0sOvVfyj2XbU66R7gWqYfpsgTv1wYpPVATzQhdMYEzE8ZWbBccA2dLCYE+7MbVOstCC4tt6AWaoI6BXzN3FsvIccifJTGUREFQGpC82p4VqkR7cGYysktBM8XcalyzREOTWy5PQKghfwOvyDD6zzqk6mpgmqam1yBrlSrswHtIpgN8xRNJlszbG/ie3gKsMRTU/gdJNDlOTCGwFQ6HtuP9Vy90cpgnlQaeXocTtdrrfigqMkfivRubH3fTo+H90JRVUSWkAjsu9xHS/SvUN8y+1mHqjFbSKApNxF5Pj5cGi5Hj2ZaDQPACUX5KIyulT0lTac0pIEh+5AjN8nZpK25jPgjQlbNWA2LJL7ZWztUQpiFBdXLrZM5nY9TkIqR5QFVhpxGlUEgo9kdyvSqE1PJMKnWindtY5tAmobcLUVRe+fkQWJ0zJ2Ec1UeZnpgc+t7QYuqq60ZMfrTlEauxGKuR8oupfDJQPH0/p3hAyytxEH0zB3sKoqoHpe1B/3/OcKIJSbA1mlHFoaNOFzf6C7zD+jU6awfl6BRwm+swrHh+Tt7AOzIndwI7qJOWMxXRi5elQS3QBhrIIp33AggTGmMA4vVBwqMletdmdtIH0FJKtKbsSFEvtkqpRzCP7iwMNVm9G6tDux3hR2y7zbHcFMnGhWctAnJ7tlh09o3xmBjIVPdD7fJ7scGQYHFfmrcD8ATTEpJE3zF0J7vwnDxkUcQFm6Kz3bEcAR0U6JqSS4SksK29gF8/DijtAikphUEbUfoeRXgo4w60yPA+g2eL87/eKkQFnxZlszSjjqS3bbZtjlYEp5b5CYaWMKHLjaAmHe1x4Xdkj95/vO0LnfY4PtB4pUWIuPuIFll+ibhqtYum0LXb3bcwNWt1rxqUVUGB1BoNvK/83hkzy8ADlUsU6zo0XQOchlTaysSZ4TuqjxBf31Zy1GTalI9QcNwxUhYUr9RfxIar6j4i7ic2vg8ICipOGx7bJjw+xMbQzSXZw/iciXFoD0S4Ei3hi3v6J6ZW92yl9hRTebUMOdMJ4xrXPwcVJjsVR7EEioASMVIXEIp0NLP2R9OYSj3YsDw8pR9341mwhgJUcDYFo79pd7x2tZKz/2gVFL13Qr2CUAsoFzihQvEQirymomG/A3EToQwyXB3qldUg4zKeZvVGsGBBKDXwX/R9GBwwz3PmViiCOD8u9w49XXSl8Q+Af5Yh8ftUBfuR9wZDdrEIfpt/g6O0TNqAvvCHRvVIAQ44Iry7Iw5U/xgEQA83eyKcpbZYcn20dF3Q7RnCdvpIskmRfHmSQPlCWCQ8lpGAfLZgyg8CogyicrXWFZWidu4k1t2nGwmvgZssD5XfYRH5zQ2ua4bEORKz9Blb950SpkI1VqXlgtQCdpldmytjiFWJLb+xaCxbL2LHlv+lz4qOcJydk9KDFjTtiYP+o8jyYbZaEUrIjtQ9RKlQnsL+Rtr8dwUMtP93w28ilxOZe4cLflz6UHGTV43WGHUYOOf8ITmmgeB6MVWT5U7VnTbWsFIC9JHuDRbKvGv5Se2Xjg/Igg5mubZr/QgVM8zMnEqjR/29kxQM7p2Mu9eXnE5iq43+cadC/6RkDrWLCbNpZl3QcMIC3d3G1I8aYYiKLYfzVMyj3edwH0QlMu1s/Fv2ULHnb8YMD+CQzw3L3b22xsZG3h+OK1raFPlCMeaRIKuJ/vw07AOWCR5vGQR5XU6QakPXFb/b/QwE5+uPgaCsxoEbCSU2voeFhBRKpczXSAUdQa2ZqvIPkbFUN2sAREQ3+dcrExuTPytExMys2jhQ//l04q3ZUMiXZFcYTlUyM62YFihRZhScZHfwqQ5MobER5/tFjSFs/LiFEjPO/KpDER1oC5Qz+2HXTgJhE1UTYwPRu7bsAeg/WK7cG8y8TBvtbkk1ZYjYw7K8Gp7ZYSA8Qqyn6bhAWYxkpaIvxwnmpUrl0AA0+gn5sO2QqA4NGXVdd9VW8XhqDcdVPSsjvgCHx8VRfgp0kALrcKLYS1+SCiwTHtHXFj2kXndbW8i+nKpllwtmauLsq962AEYsM+TskLZiZ62xtvvFG4o2YQ42TYmqggZu7bU4+PwkgaMiqPutFaoaUrxCdBpdqwV/Vgn6lI39dN/MxQnasg0fHeQHgvEmWuzAajDTQ8PJdngP0udCSk0HYJcChoaAw/49Az0t9snySBKbL5b0qhPhDKpOjN4+fcldJt0asp1ktyGiNJ95JMGi+QwVfVrEToGrD7AEJ4kAyB1O9qz8QhcFKG3hNDTCa43irFwLNXRLoLj+Dqv6VX2d4A0Ywntmgr+XRiwjMaIHxxllBIrwRzBYqFaBIU52mpaHQLmxPj31qlxb07ijd2f+V2Xuq16xxzdMU0NbdNoi83LGus/LUh0LmR394D8X7yavdQ957spn6JXLRQh12dcOXs2UpnkwhAef5e2gxhMoj4RUsLG6XZIscdczpfE2o0tLyIuGP4c1AN3IZoBQt3PObckfBWBJotL2OfFGcUxzEMhOdWHVu6qUnO18pFv8gtBkGu3+6kf9jzSc325V+R7ZzmvUN6SaiQCSWyfZKDYK1IiRZ+mNkV5l60h0ONhe/rvAC1Db32e+CkW+zwqao7aPBOfdpLsasyaVuXPj2ky7NE+jLYU1MnYkZ5AeEmvMcj9Ff/tH9ArTFc6ACS5xX+BTgrs5lewoobEBQRrhIsY2MDvc3cf2DHhGu3ifog4PooCKiropNvmCP7u81EQBSVV+jcWMEf+VUv5qsfLZHQZZXvLZhuoCNffSay3hHR6huTRdmJTFwyfNOJD+rfBGkhjvYb2E/NNF3bpARlV/UgCdq6lxdZTiAR+VomwMYORo7LZGLgCL3qsLG0fpR/a30QdXO7rfbwnnjYLKZWdZSq7IDQ5ugvs9T8D4zwiZ9iW31OBpptWI1n9kjiK08crAsV5uw1PoQ4BSoGZ3RkTbjsN+tNw68ymdLm8vJ/TEYjgBzRZ496FRf2oHkcz7vUAoQ7s/6nAcJ96byIB2Q3V5VkCCYUW1M8ZjClfpDpNFDZv17FD6wg6YOHmF8oFkIOEnNvG/w6t/d/K3oJa3XqkwfPHalo5yahkWvFli7yvCyxbqJoVlC/bi0sQa8/LPg4sbUFw+ig7zbvAEZxc1LjiLKBCN8diB3igTsFiBv+CsMT/chteDPanDbfANoFf1dp9ZdrE3yvk8TnStLutbN04kEKk8EnF6FrE4eIvJ0/NLWZ9Offk1VOAf6HiwJjaagE2DIOTnqur9SBzEoCS0agK6swyAWyyUWjhraPDdtDyOhjYkfO4c+nPyT8HhspeQlgbwGRK4NP1HZzaZr4dgXtepR8iVGrcwD835mcNY80gbgVRoUkM1AKKdqwruSu/R+gtFi47zW5+JLhG1sEpjDhYU0i3gp2T0/WZaO/hvG1B/FGPbaF5zcr3xcRoOCrBs/h1cAF7q1UZ50zGFSTbXuZxIX7fmDAso4B7FvCkLQOkdklYLHWgh750sV68HFlRDbS93SfWTo5ZEto8MAD+o6mCQ6fksI7Pti8KLIaBBdlNrC9PHtEW84m2iswFCHaeG+isHMFp0r6py4UXmmiSi9TvnTMcuEAz1AdrhXg5a5k76LQJeSrrERfLoZiAEu7nI84CncalGjUjm+3VtUJYyYsfr03nVvqZCKbImXjay05czton+v1V/8sgKdw8OobF4TG9/4W5qs5hphGYzEJRD8Jb1bh492+J2eXGdNOQdfnTlVWFU7+PusVs4vkyBBtXirLt88mNX/b3IxqBIjzGexnTesB8d8roDp24WrJ3ud4w6HJs6EMDdESWaNF2sGCOFVPknO3l1+wY1+lBJv9EOyQAKrIAC1IRU4hydnh9xJrWCUj8ROYrLPzg9p88AEqNcLk/MCdqcmbk780hzZhsL6Yr+kqZPGyyM58Ua9yQziK9T9qGTdGVJ9rko5H8ukkEg2KXLVHhZhxrIXFBAxY1Vl7XU0YPGL6hlMaTnGV8+zeaFHN2ERsvLiZFoXpIT6RQ7I8ZLwXaAEoIJZ6S2vTVOLBd6umbqico84wrCGeMapNMWkHYiLDqo2OrdUtLmuSwQYOpj1Q3Ki+fJV7UxZckgf05vAcvf6Vuj7yLGq5H3NjdVaewxLB7y0z6w1y3v/GECRp2hzMl4tQETml6LyEmMD2AqVsQ2sUEixjRfoaW5lbWk7WuD0GUUpYykHuxMiKJS2WjbcHEFq7AXnJP4rCGPQIx3Y003OHVc+avTbrPwle/BjoWcwLG+frxinwQYhtV21Qu6Y+MNJiX+zpJmqzO32QxsttEJJWlRuRNLpPDdE4byzyyp+oF+HhUl/5rgPMj57fFkvc/31Lh1rNOf1KTQKmZHN50VJnYBxRZLxFzw7alUFEWFost7mjdwJVV3Dp6vrelog46LGKHPseiDDvCk+VcXxk4670eiU1cMgPN0yXL2ROWbNbL0p2IEU7y1os/ccrpgbGH5qJpOh1a7sVJVEOPfJBacYihK1JICfYPTiYwKABIJKi6R/1ndYEhQWCLDUHtwe8q8ikoJeSj5g4ARZzEAaZ3orQOaNwB/fkfs6xIMTdWHV73+zaKryvqNRfcGRrAHQUOQmCvs914TnCY2hbGpWH1KTQwv3ZBMO8tq4NSs3pI95ZckKdRonV8mqepRFh/L8MF92xPEvSA4lCL1jVebYCZW4o93updzHLN3JBSIXyZLev+fR8EydYMh5jVvZl0mdaNdt1Wk0ROEEXUJINla+qFA6fWhhEh+j/rrzYoqR6H9RzWZ95eFZyM+o9az4QeaTiq7rT+WdJqgkqZWHA5RgAqsnBMdrXryU9YkJXCpiqMgVJlSWRmjjOpdSt3o1dRoZeYGB3ERAOrgco2cW53YLgK5pz2s5o5X/e+q7sQLPstHTPsia6NZkje8oN5Ly7gP8cP0ThR7WrGaQ9r5FdgaxMB8fcUuYao1MgZbQK3dkgeSUMdD57axDae2YS7ihBREh+7jAEjy4gzocO+J1wdRaNAlh2jMW2CsLbuprupobg1rJxdIa912PFsI9WpnGeC8CatENAWCknonlq+t8kTacLYqPciHQRfIgeB/AYCzAkV/aNTPU8do6oQWAytsVkP4DEU2DLst9CPImH2T6X0Hr1Ns6q6Oid4Nul093LaV1VCiPrjG6/wgyhFidpF3jnPlIGhMbrCcUMkXD5MIloL0v+WC3pVTttOf52Z1LeqRkfbkRfYSIzaCLMEmdGG0+y3/7fjbbHaKhr7UfVgbkK2+hOrJTZP1oIu3bOflTAZqn0xYwfKmUXLek08snSfhb61NjYH1b5zgr8UToanBpAs3qIvdANaW0aYRmzuPgdaJrO+s3Vzz/iqQlVFHqe2RnA9/kixmz43cOGYYNbD2ih6yelrMtq4+WbCE8ra4tA8tvdh/pfJorkEuh9pwiGtMszmzrgf4zh1Sxq5l5jBTt67U4qQ1mrD0ySRhxrqr9SIjqrWB6jWMCZn2jdCbx9Uo0UmX0sVXiUueTU7Y5MWz7WiuhpHyyKjquM4JftfXax+coQ74Jx6iqsfjrGukMBuPkIUH0GnHz+/r6ZK4gm5qXXuboR7nynb20HY0WhPs2W2T80hsfGEEM4N3cI3OkZPdprjRRmHmkD5fzNf0OiAu5Q5vPzTlP35LQX4WsURKv3LlNz4j4zCZ2RP12NGtofLsNJS0Ag1yTarvcSQ5KSZyeI4PyOtI/1EVGrVgSdJc8j1FjKlXHnwMxFVSQ5jAfHWNyqs2/O0ZEYIZLM8aSpPcArNyeIwu4nd+lx+r4V1RA0FcE4vgyf54LuJ4aFpxpmUVsfbstPGXWicckrcUI1gQFza6a7iam4sTIIP3dag0H0yj99pay0EFUGXlOpFlh/rhtDdf02/xie22FPLdnBHCL2acgn0usLQ/eLTXpHV3qtgXFRyZR/38StdgKXmaI1fKm/tMvGxydkGC5KyMTvtnqYhpZ6u0Hn2gIyajV6Fwp1HLWIc3sDiiZhGRyk3gGNRyp7oHGNrZIJ0rTi/PqLbDInW5MQHtUfaWmLkmn+VF2127HcstwVfCa1Yv6xilQZWG12mm7i9BUUngI9iP70VXkKUSmpHHKuXpafU7q0tyoV1Fr0Deti7R6uAqU9kBFrN6celCBcRLh3wiS7WAt8lRbTh16Q5HL5KyIwmLdvHcxnd9YFGe4FY2yWj3nlx01GucH8Dkjia4pbYfu5knl8ynxTI8RmNqw2ToToVnwLFB/jx4I1xcP+30IGi8AKW/75khraKF++HKp6Rs2LduAmLrw1lnjOdIPt63hRJiAyKNqv1jo7+kPfr6s/prn6SU0vJLM6HKPWnRKqGPKchcJi7qlPhLveiju2g37lbzZYhlE9qeXMucDJGjq+tG8eDGXhLAKSnbKCAx8NBNmqSbSv7ypATpBxKrUU8sjbyp7SN14oFWZAw0rysRVnbSSGPk5uNgodnc/a15eCMr30/GYP/WkfBauRBDXosaWVTiNzXPuZwvIABef1HmRflh3CCL0qUibNHYB/3CZna2sZXiOyV7CtBkV/At1SN1ecctuaXfQgkR14cqPpqm4BYFcaZb8+FUkS37CuYl5vacxA/9LNd2hBX4xzsJoRFNWFm055n6gpej1VYrJMzkjpb09zw7FBKsTuwGKUHf0cDAa9NoNNchB4uyJ29C7RDlm0MF1nvN+Hv39b8gV+aOJxa72rz0iwrfgpshBzMffgIBvLoIY0KXM10QhntJwzuNfDBJivrggwU21F1lKUORvOXXyDnkMlQrA63mKwTLPVX4/847ep8Er4/pd9Y804ygG3MzKt9S4fT4ZBprh9f2ULgTQAa9scjRtqBDegt0GHQx55xkjDKLwhpcfeTidq0vZ4L7Uq+QsMOH9192Cz8AlgCfhhuwoOvkP/196NrpAIz+Tya/ZQv89XeW3kSJX6hK1waUxDZswr8w+n6K6OvS2dT0k4roC9b0FrcbIPWTf7MD4KIGlkOsvjfjF8frYgQJRHPFsYR1eFr80TOuRW4yUjTF9y0Vr1TvVVlYBZJtL5uoT9iKx3lUvMHo+AuwEe4H68ZChgvgXkCXwbGG2dQdfxkuYfeWDiwbdrRSHF0zcV3tvn342HJ8RC34w8OGTWh4b++6ijZF5rNniITN/eaubM8NacEZYF1z7ECd/M/km3HTLTm9/RHVKF24jUk2Sw0nA/8WKS2X/avgb2yhQcNVronVz/OlMZY980EubaP/Je34EScx8RH9siDbv6d1d/aNIkcj2aLfp4OpBR5SDrdOpNanZrpLPuW7T1CEKXPmETAFPer2K+30NfRPoL3ipyg0/ppgvSV4qr6VaMlLhQXk0rgNiSYLQ+YYWRDys8nIAxJIwOyU/i9VN60OnjOegZjEk7S4UgK2PxhZFAr/i9WMj9qViUbr78a3WrYZ2Z4qT8lTCbFhwADXdXd2aRE+LpYg4nI7PDzub8cpowMleg1MDZc+X2mL8X0X7bnhvLhu4zmahyTRe4iiBKrZCoT17u3B1PPzyKhrfKQ+rRjd/49loeed8PiKi/GHs4l0Us2RwnzAChKCjFB6p4KCjitcdlpmwFOGJA12vGbJr/ZzPBtUJggPW5gO8zaBuY/p7A3ScD0ssHkzO9WF3+WJuFPRUbNEAo0licyXmDdRJ0JjEYS0ZgsJ/5zIl6NF6aHorHSGFr3tcrWnab5KgYyfmU+W2qL4vUTj7PwrEGIUFWtKxTVPUdI2B+KQDaRqjNZOdvQ6suIqXox3HuMHUdLTWig9XIAiWfsepytyiO/T+uvS9Z9Yt6sZUiR74BJSQnVz5XeIvmuRtYDDFZGxluhA3PD4N0m5v5TmzG+tfSU1ZuF4QArOv6Sb7ESfoBlZknUpC6kS5bICIyNL54FWsFvn2SO/lMUhXp03cDKAaUVbEmCloUtYjiNVGi+y0w2cIXx/uckREbWdIUAi/wTWI/hfU4P/lKCv36oaz01PgdvDcyWAvDFAUvVZSB1GgciGKo3YAyBw4vKmka+s2BtNidzz7x0Tg7b8yVTeYnEkVYPVDWpqOjWB6ZlIg5E6blzTPUmm/byqfcMpTbce3gEybMlttaiQPPYnZwTdtrCa8lhruC73SYAGAqWtWaYY73qMOHVL6al5x/p3ghLZF/zBsM+0WMYTvc+3d4LLfFBejVyTqf5HkqlauKd9pxXGL5bgSkBOJnTGxkaQKCgLJa7dEiYnjnuXi6CM4+iLGfGSBJXhcjoZqjBssfuT/3zi8sNRvtdvhyyhf3v5HUJobeF8SHnm57UJk6MBlVMJ1u9wfyK4TtInBXnirKrjgeJDiTPqnWpWKn6cjtFIvNCzUjRc04BWmhp6a2a578D17DZWYLc+CM2a7t9PMRbRHWMz9CKlgkZAfSSAUqZE3i89e+yFmpT8P96/JCJCQboPzYX775ogvpAKedXdw1HxOKAdlCqYMEhK0zgs9Q0hLAX3etiNOsyqu+3kKctEbiNop5xc76E/Uuz6tFmXd2UJS/PYCwnrFKpu8vX/AMja999fJQxgxK4ZXdUA/zpCWvLci+gmjcPlTgTgfxrvlbUsTfJlr8qd7Q3LT7ZeOpGukfWcNeY/KgB8sRHro9VcJG2r2DT2dbD9fgpfVckQY0YDo1PusSOi6fQzIqtT0diJoR892YY1eDYqwIdPfanFvfiVze/t2QGT5T5FL+j606MMzrQyXj9OxyKH302hLcxcoaBJj4M4PO9TVet5K29/smEA6ioveQAx3n+BdlpqaCMXQzry0cWGxginIWPewLdifEHGlJyVn6ny8jdZi6SXhnJonRODehaLCx1srGzTG64GSJoL8G/bZEkvYhUQkY+6i2c4jcLy9ieFTnVKIUVhkIyEc6ggD1aoJkekjOABu4AqelPE1BCMurUcSoT6GPhonS6jNZz+9eBOF8C2rlpAAtBt6MMSrBoBbdBhJR6F7R8HXJjsQN4sNF9IGr1QhvMSddBYmdHTAkdUkWl27QSSJ1inP7obf3lKYiIcxdxUCEo2UAJLnphgOIiiQJsVdbvBAwMKX11N0BKqENrnew+Xx8GfLXlLI+IRbFmXHPKjZP3IsYCILqek2+BtRclaxdm2dP2bseJz5pO2IcbWQaEqALvPrUf6JYuzGD1QkJt78OWHlfa1uDYNX+OkvpiI7FS6sjBjlQwvxnoU3vHDao2/56+zgajx/4DHZi4uYBYgCvj1jpr+CwAp5yQVS7TS2V7RFdUzW5xrs52KgeD5F5xnqQ5JU3ZEbteAkfhA4cj+/eSeIdD9JcuKNOKNp2o+TGf9ElHV5dNWYeANI9wOJfNyGWT72pQQ4hIOfz9fhK4QYCNgVGZhD7HzfuPUCOyi92BE95I8BzOz+Rsck7j8bZhVvOhXaTu332Ol8ZWb+bhviTuq7fVXA8yOhakW9/ZkyCVs60hPF84+46mQP1Y8wdivGDqQwdvPbsZUmoMnzGHI5P4ul+IAYTDjtfppJAyVi6anS5t0stdhM3XICtSUjMggcE+WMyQp7bj7le9nzmB1u3YcjZNAYJQ4mhcM8rGoTDqp8T/CNYyxX75C1Bwyv0KO1dY9ti6LKWei9PD32iN8dUtcipi67heTOkOCj+UISZehN1U9eO1yHK0J8IZpYb5qjSHGB396aZFvxwKLclZjcNM6E3sJ9qcXywETs1Gb5Nuv9y90pmIj/OaZN6gdHCDoahUAN5BrWBM5EHRzAW5L7oYC+6uQBLu7xK/3ixu2FGDgd+caZYsN2T2FEeJVYeQOLK7lVD7GeMczNstpIU4RuQ1yHXFfGreX47hiSahFEok0wQVvlGzS/y5B1Nt6FuBtxpAYYC0gYwQVkyz4svYqIf6uPMJxBbqo4hPxr0MbLvUSbZ08ycExXrPkEhXF/1G4v4QmSUb1qu+PsYlE9DOwS8aRNl/ZlCCtirOhK2P4+uq6LNa2WTu+/BazmL4t+Hl8ZXK3Taqb0c5cFKdjJ+yCBx6gUsdZkbvHWv0KYsdapPCVTO1iu7ILrJU9WIXO6E5Z21RCbgCZHm7VL72z5byNbsp6hin4Wxiki8mdAdExjmqpljGejo6W9WLpCJV1xsd36sVHktrYXjDrYIYo6OyZN6B38QlVsAryFiSZJ2lmflCEnbkO0RzqNGsv0/sNhzpZeNAEo3Z0x3p9smtB4nOriH5guxqn1yHeZEIM9mhNmnPTdhSPxCdQb5rswKld0OmftIXgBjGUqpUzZcSBbCvT+UF1fV3aYQIa5/ExpssffHXAFtahI+0J5V6fcqebFdHDG6ZLnVn3bNyHhCe7INmYmFjEMIvC0bx3df+22hkyu2EDTs9m+PTw1TzRBak+HyiECYw7KtQ2ZsVg0owlhgMt8w8tKsVMOL4TJLh8Bii/Gcx5Qa9m7JHw5u4BAEYn325waUvVaIFDTqhyT3DCPpXbTqU9wruiNGUZEBBOxLLbyTaJWhLYNsQ+mPZvZ6ljRGGGZ64960UaqA5z0jcfIVwMkUCUANOUJt3MeajNFzba0fBTwawsiqyAmpgPr/SP7VXTTQd4cpxSRHcHELfPjge/E7ylaRzwlV/JF2fpokbJftjPWDQp0uuhQOYPwMV4gXraUxR09qiYVebNcJBVg+Xzkaq4f+MmvpX66VtLV0E4z30MFnbLiwJRe9zLl4RjAfd6VgIEOBwuYevw8s53amlf8gz0opHFwX0R6CG30vLv5X1CzoH/m9OFnRxzL/O48Nb0aj1DQQFcxMw0g5Lblv4FpjF1n551sWvsnghEE3purccI9/ubZQ6nBRs+5OuPwQDMonLS09FBMRcmcoGFHxUD8aHBcbrit53RTGyh14hO8UuWObSgcw473vPSvdxw76Vq5VIypzsZZclg4lMHHMavIJ/A4LEmzMTeTNnfJ5x/OoCAmPNObit5x9AbZN9wsT23zt2Jfy2dRTJoUL2lNUnQg9yVKwmOJXXFurnMaDE0JNUZ0ii39nrbFjMACF/zqbAQt8sgoM3/YKgikBebZGqJNvVzTncZ9qY/O7Dct29BgIOvU5UTuNMVulV0ZPzR9OnYmxS4PgBzIuoYLtIrv28VuDzsSFgJ/+jIN0iXlKnFohUuiz/OKBOpz/yg6p6V3zqycGhYZy7dELw0XPaM5Jdzt94GNLGKnfg6ZedS2p3FT2VQ5M4TIPTgeI64mJbgUQ6+mMYNAjOkl46JSM98YVDZ3i/Z3mKEbkGXBG1VCSa+eEFcdz0QNRWTk4KDNGIiKznPyMy/5LX/lMfyk1BR/FM4ia+zMAmAWVNd3AlVKFCa/GClnrTNF7leUmXyAQSyGpKUejLPquVZ6CzJywzz6sc4W101jh8l4V9iwoJrYRrOYmSEWmAz3GbLF0L9PXqx8bErSaUXAh+Mf2qJSffU4EZtU+n4Oma7B+H7nDQD3JxzoRftBcVOG0/j/vb/wjivnQjdQfy9yuCq2fNJZoEkUdSFMO16WZzbD4osnneWSdnCdx4Oa6PgMAC6w0S5i69O4TaXu7Ap5jrZoFG/RBhOM0j0O4wQ8qCxoRytlEP6LI7oVYf7WcZUEORa6WrsnaFfHIM8ZsTAc7S8cuUNOyHdlesrNLXegjyPFgMOnZxhDPNnFYKZBou6LYF1bzciB+wc9p24+79PNfsXv6z5xB0G6vzsDo9PbZkT14J65b8sYLlWYIbySYC8hZINXIQ5Ifd9GoW08FzhvX4E+zbKe6oazmd8u5SzuiiuyBQyHb1b4gFj/50x4MyL/vwWOqdFZx3dWj/jJr8f0hCM8btXy1e5LIHWX7Moq9IXRPvaGG2TkGGRC/WQclNCHJ3quSKFotZMcjVgG8pAM+FvbE/qPWtpTglydqb6ZGAEySD+g/nem9w+F9+OD50/5cK/XkJnZQAlCTsMbh7I50AUnVcONWmLWA1NLjLoqNSWo2n9LwmhpNNbIO/XwDqiQ0aDjoIjvV6IixuWrGvKhVqLxXOeisWyH0FruENdinkMlOYdi/9ghm0DtHk78vo1wz9+3OQFgeBVVtIRMTvhOcKpEDzyo58c0ekWr7fA3y+OXOGop0rx3pOgYv8JrzK0JGX0QfeLlO5jLmMH1hpwnsTmFYmABP2l7sII8NlbMKJz1KAVtOvLZ97xVPxePGcUVOsTC4GAggE57CWdPxZnSjO/2yrk7dsznAI3O2MbxLAM9mi/upFw5QAwWkJ3eaj8ZLhMbrYjjN3bNmPXfC7A2olaE3Wv68c3azpH5Ha+2EKSOA4Kdeu6fmGLZbIjlKF4a2F0zS6mo01CiDOV5Y7opaQToYstLhXI+lnViMrKeIWOWnzesMYxfZ5lJijz3wW3Nq6QWX5CH3t91zScWoYyQUra1KfxRfl3az6I1yEgfOrTBluw9WldSjvR3SPnxIIe6dPpLoiqLnwvrSVWy3OIaSeCYScJyrZgLPs06MF8ohc7potp4d95QnEeyLZYjSv8qJ6T/H2j1G2ac77b1Q1cNRIos3S1Ur1LI+W5tBTB8U/4GveKcpAF/mdqedO7nCtjRdqDHdKw5hPsZ+26ixTlZEnPIMqMSxk/WdMfEeRoPr0B4xJ/yEH0EXVrhEcz/YjgFcq8LXaneh55cAgQlGUsWKtrvDAsmuR7D8xVTWazUJu0m/6jpwdGJlnla3pC4dNWbu2rRx7DQ8vb4eqW2UBUqx+RM+38CCD36tu+4KS9Q7tn04QX9Kppw5UCVH1n2IwGv0gqf1yLoYd5SJhyBtR4+VtUS8DbSJLuEqNDqLJcmZeAFlC3A+zXBmA/Fx0m9mCem2Tl3safLgizaK2m//ansP4zle+DSGSDRLPtFWzIma9HyAHT2L+RA8FE1UV6egwYJtH9o8P7TadnJFjadQwc52wK9XlbYq2SUzaNJ7XPTim3+CTLMfm/57eSjCPwCxPnxriL2XMwRJ1OR9FwqGHI1qfnDIHGNHN60E8zpwXH0T7RQd4EQKKKiVOnQvZwLqfb3TqxHFb2nIAvU/eihMxusgBaGIO6gJDDMqP8zivDI9K5lYGX37/Cjc0LO+kChLSC74Z1rbXUY9e8HR+CHLqv9WjNuNPT6J9jLjzeHSf4FDRWZI/t1iak2/GFggXWaZkrOUJlV18wPiCyfgis9oivALmUixBnFE8CL3qs7cKj37/J+sBJCvtFS1EY7p+77rFvTrCUdPNDNtycDu9s5vaqOTV7rIPBJp73PnbynKzvUobyqKW4lzjtXvi89tz2p/ES7YTXq6jijyjXN64SDXqZDtKqBmkUS3FNFLBrjffWV5ctmT9afyw+gvjDf79L3UdDafxcvaBlEoKmJRC6vVVG3goBbEXVoSkk8cRctfpdZGOcp8LN7AZgKC6qhfF7w5t7ZWeoBL+Fk4LuO5yiJnhwpKaygUk40B4VuG9YARG+aO/TcJVHD7A/KPquRd7IJVHejqTX4gmPmMAmGTEH59mQo/HaOMCndQJnZAdBYN90YvIb/dWp38MjobvzcKvqHbn1e7wS8+RQxE1Vr4VJT/96jLP2RxZYCsPq7ZnJs92i2zxpfqyeO/Wqb3c1f8QeTmYXPyOZgbEaXzL+6+TOcpJY/UIFJcibpdtMeC7DgAlNcRis2uD1olebxa1BptZJ0J6vzlcVnVHo5WxrwJsPHv3EfDzqqLup/0hazRJFLdqc1qdh2H4Nbbdl1Z1RNKx73H/HZ5t7hLjCzoU/+UUcyQ+qZcAUO0aC2dXzfGR1HPiR4hf6LHZecrngJ+9fxOnIMr8X+z5N77uAZzCmil4wHWoa12MC8BuOtJLTC6SUio72bSOYSZPmYrJofkzTci9gI061jfGAHT9ffsHorEHQr4cJvKRaifmREi1/0ywfoD/WWJTGhKB0RX6RCfxCZ9FGQUn7sZBQbMOCKmqmncbYbrIalMwr3v8L9dfqoozMD0SxM5UsvNjY515KHyxSTjNb0FJo3lWmKiBGeDVxxjYJK+uHvS7rWrwB35SJoGypesnlUWqTamhl6V/xAs1U3d259sAG57NzIGSg9aG9gpXYDhoPYmBZggX1Om6NavOllE8lFCPrfdrPurYKUp7pEuLYJESWWbLyEb+lplwRCTypJpjW02NTfVi+YKo/sU2Q0hYhW320B2bSSSxmf6LW9hxmJd/flboNHsVJNSU5b7TH9S+6AN8dAEQCtejwGHsozQtn3XtXni7s2Noh1QMs9csGc/S/GjPFZHdt7XOz8T8z57ofZIgCPmaPxLn/eSakVMqh0meAQD3zIdoQp5npmiAkgbS1tPvdQtDUZ4GI6brUvmcotbauFIJnKsL5FLxK5Zh90inaGOSi3W6lraaf3sXMmyzmi4VTVVBbnrEeptvrsBk5lNruuR2J9eZ69sifhUPTMGdyzUsE9LtSQi1CLDc5hWUWAd8ijxscguK9XQAe269W7yUFIDNMxN7BZ3NrBGl/Wh14p8r2/CGDOREUYJVG0bsaM7oUgZr+x0MmH5fYwjkYYuOROllqBTKNd6M+3A4bg+Eapa8VivNWIcdNeFtwhnJRrjsLCVqBOMgh8xhiUdj2bUpIzX2SRCsjWiK/b02uLGrGv8aBvCy39gILHk+oNuA7lmcOK006jHCdY8RiOPZrxuzbWc4dFi7MYyG3KKW/oLJRe6RiPtsPRgXd2hTOPhRuWcHog4aYaQdTu7gMix1Ygf8RUAaC/fPsldwyUddWLc97Vdt4DcfB+XT9CAF36Hh7quHRDlUqO7FUOfFK75S+tEu1omPJKcP3qHwV9mgLDSBU1RGh66Wj7esl7QiJLbyIRCAi7Sgn0CEa3/ISYIROv/n+Oxh1pzLa7edy1HUdF52scAXbH+/dbYSYjkFV4rwzNlYc8rDXgZmUqrmaLsIHfj5z23fMlB64UYMzTSIPubySP+9ux0qipZUIyGaDO8kGptfnYoXqf+PbAdwYbNaEIayyoLxabRpue+ZhDlYZ06vRTjLOKZMWxMVxUoX3Qux5dE7NcFaFhNvJnqONeKrmuchZffhYOx2ARfvi6heHfsBBQTEvclgTT2B+CmHnXb2qFpqi+JYuLB1tvsz2BImET/UyRu9rKm+8nJK3empfulHiHREw4RoyTOtYtWXTqZRwwM2G+XaG7M38vZZyOMs8VeHfdwcaf7BuyjWeU+PEZVDBdJaBzIRwThh2YLoBzQvEtcTkkGx7Cm7gJwD/bzHLXhQNQEPT5JUu6ZYYtWCbvmUKyUoUuB9zIAhKn3XvsAS0IkXYLzZzQbTi59uquVnyPxmB9VPfmuCAGgVU2bGuIP1XXq+7mpWkYbdLnsoD3LKQTET6/tJ+iY61ceGTvJ/SAmUJxtHg4p0oOHEe6V2PXRi0RDzSfOWgQbk6rWyAHShyz4jY0Jkg4LntfO5qlEW1MBHwJpig/LrgrKYHSuk0BCM46dgVBQP5nSVIKcgel0K6p6vI30X1CXwaGufVukwO+w9O5uHJ8RGh90Q8etJcJdg+79eo8VPeq63i7wH/0BVEV5e7Msegfhe0LWcP5Dfl42UkSJkiCVd69iK88xySY6zB2vd0el92njDvvDyd35syp5n567puj/374QcmHE9A5f7x/9G+GeZTmTvC+x+r2hQijBgdK7BCJhABcOnOuCve1BQR5oo4g6ArxtGTCUDr+gZ8EYqUw+rLZGa/KAjmN6WTa9gBwuXLq+wLoWU34KeZmghqRuJcTrv+PvxGrLzaj3QkTQRJW7oyLBbJ2gYniJsNIf3cRwFpGdGswZMMFmetK54xVykyy0FJipwbSuh8lGSWIIIlmLnTwc7rr4f+1NuYQYJ5djkacM3SCLSqu7o5Eo+lNB+a/H25B94RmH4O9qShe6lbg7l2YSFpb42mu53RW+gvcT+LetsC+6B1RfcyGb/MpjBKaWratKmkGssvmREEpMzHoLXNCZWHR+bbSshyzEr7CayMqbPO1Pbm6uv6w6StsU+d3PlPfCzYzRpHtzCwALnEOhhSbTJPqTeWUzERjSAkouFftdg5WFZEEqz5s5jSInnWvGQS1r7SkM1VdoYCbmKGJH76zDrJtxOlAJccH7hQ75yMNbK07viHg5Hl3wLf4yynCdrjTUjnZXmQs5S1nONoKLUseawaLU9SlbqUnYdeXDEbjk1zLBeJSHhk6rFZXsvYCDEakUbPE3Zc8LXD84LZZchMvmQlwwSPF9Xb4ABOOaCRnIJrpFNsR0wgeNSVyV1ZwvNKK58Ha37+0UQ8HY4jEwTGAp491JLV2EL3I44leo/52N3CGzZuQ+0tY0Q7R6siB9kWkPJfw9azCGTxG9HukQ+KMkz5q8rAooadnpK8rpndPY8aIZn2uZw9yjauNmfSusspIuY12A5yLyj6CsjAUwt785+PVHfIopiSXxI4mc8Kzzs/Pk2Cp/Fw/ojGGvL+1/cO15nU0g4tnl/Zs3WIxpitceN0Nfvh84q8/+7xTRM7qvoIVrVQw+KLzfJQ7wy8h7COYJKhKM94zSwhrIFFaW3cEQ+4SuYTeobT++ulbrLterIZ5IHHYgrYyyjLBga0PSDO6ErIdWII0THZCM60M8nAXHu1qTxDZfMTSzCTsX2Nk2MHS2hHpRHF56Y9OfRv+7bWVIQOxxkXq6h7jjCXc61vcwwVKK4saEfafKh70DOYQkGT0HF/zwA6gWsPGCnNOTrEUDxJ44u35mM5kfT/r5XrBXKPuArwh3XRco1NxiFl4zEcqqiBuSb+RnxPvg96179IRD7lc+kfYfZIlWqfOHY6RvrJlizKg7FjduF9GmxWVkmwpmOkNpw4Qyk0fHvZp1+ZW/9KmO2FBD6jWYL0PvXwsIFXoGHtAkZhXlcGeGAFPjfVTWWAjTgPspXG6/9Pi9aDJGaAkLjJ9tGZUQ5O2OOSqC2nWGEG2JjMGbzeoEDD0ADQFQpWmgVztD/p6APVwLRfirfzZIuzrAHzTgTrPOZami9sVF9y6Wcy4N+W9NXZRaUX7IDVTDyOmk6dfIM4J2GKDKGZRiXFIXtAhW4KN64rkRDdC9XiQSjMu25PHIriv9lwTWwVMC9WZBQuIfowyc6Jw5+6zggcRsS4k8tb83DWt4sWeK09CpXwy8i5o9A0BxIecVQyPkRFec6YeLu6iswYkuhMJKW5W4dAV38NTifauoAJEwakRoziQXXC3x2yTnq025Et5C1ddBZl6YeUQq+PgvUErlYQarVLs33Az/5omz4d+a9GbDRst5KNzDispXW2QzHPhX4Mgp69EzIH9GQ7EfduIGNAky/oFV4xZuqHOtrYxTbrqemWbhBeU0p6IpJsMsSrFLN/nqhWBmGqkyehd83WpvgTTDSL381aPGesrYuUMKW74RtaYCMkiIKiyW74+XOqkQ0CZ+si2LnaBzEhjQuVIJpwuV2UJ0vXNmRop9SI//BcDsDh3IZO6Q8t5f5GSZnGqotgGK77SJOkKe6wRXuOIil2KNTBAv9Tcz9Oqi/PIqgf3KppPVHBZGj0gcDT8k3FoP2al7nMCJ+N4RFDB759qr/0rbPY1G8JXeDA0A2ga0e1ZFAkIDKn4H78tp6oyk6DfEnmqMT/+CDGI4NwiyypcEFnrfB/kvxXHsaFW7KV64wlCj5k6NwLmZnseUHpCXY7JkocDXG4YMKd8Zu8QzOqgI7HJBOzsG0UYQqYKT6nHEhH3Dd1c1RB0+5mHuRL19aUICzlhQdlCwmGhZyqiJJOIeibB2F0YJSbkj09RrU/Ch86JYNhj2jP/0olBNG+QreC3GWGyrxNPJo4gjAsozokTxxy416e1+9JrGXhXKvY1TMwIaTVPTycAfb+pIdRfBV0C96aYaqq3rZySMWIEZo4yjInX5xQ5jb9idB4EXynxRDNnIfqWOrjVO0O2xzVImwLBOTAD5aG78BtFpfy2N7TVvQG9BQ1l+Km7Oj+ZXrFmLWHApi/1Yl18GmmOLVp5jXtLpjoSNWzgnUkTSPJV5R9531l/3h13EA+DA5kDCOL9+rs+7F7ycKR6lCmBQ5NEVgKsJAOp6SHDQ91KMhz52dbcya1H8ue2rYcSM+zIqXTN9digLIvI3YvHTZCUXqICZsIsZxmUuPctjAjpC1BB+Ab5nLp022P6XPAm2aM7esA1MIyhpUcJHyGdj5Ll/ASMCEspRYpPgPlsCXjqX0m//B/SI49UoSAQgNri41Qp939UEUC4pdPdVQduGEkcb+2keTHs3FSLeSO8XqyUrKlMM35EGYUq6lrTBTJUYYqnr7In/B7r4OoX69qmzJ2uFbotnSHKezTvUhXb0cQgPHaURuJLTX8rPmaDvl7MG51oG9+8dynBMUPRdQPWyw6OZwIya7vYgCXKJAt8uslRosSxG0EIDVEPqho7J/Gaq7WVl46FWINXGjyBdbs2OOzbHtNcKYIM8Zgvipra5ZLLATSqEG9PskrqjGC8kXKCS9QArO4d2b/HvxmMkxaATXF++D8yul+HgWalneY6ueIUfbp/IH8+YxupjzeZ1+563waoAvQaPev066Gtb7VZ1fbuS0Bcc8V2OQdLHFKAoYL8sXcH2jgW9kkQZei34ZPrr96SyBh7XQL3eeHvt9zdFKiDQODY1d9okKLWUjnEhqsRHp4O0VnwEkTi4XIWADZVEuZqZihfa5U+2XzZw6skE7657LKzzC46THJl/QnX1kwQE7GcAGWUJbS1Jpbc3Gq/0O4y1ozBOgifU2W2sWzHKIAxVQEAJdKXpbBaX75foh3C/FTIi74OC3ls0BbLVBCER6rqsLkGjeLv094/c3R6Q4j0qGTgbYcfjhzPoFMLBvdcEF9sRp9be2mJUCsRGlZYwN8p+EhSz923vPnRLtJjBtKbyUVZpPbgEobrgFl/TVeVy7kBrQ7x0IhMf7aOMYnIs4ZHtt7FlndlJWUiUt2R14+W882D035p9W/keJSubyuMTK/q5JmHbClcW5OzqH8U7Yl3EV5T6G8z+TjwtKpcgTpFBcgppja69p37+8+B8TdW9ewDFqrsSqXEEPcjOU45PRlmOFrH2dEGy0HnMmUImXprR3i8OZn5HdVUq6d3nxnlkA/M8b0SHX7vGhAt1BpAuUUzaigKYJBEebdjATjh6rFdOG6gIL8NHSHUmh9H/F1yng6HhF9EsQGwdtz3dl0m4+E0ykh5WxTLlx9e4zB1eE2ifPc+ictI6rLZGZ03n9F3Lk5kZyWoVREjb2449bYE0eaJcaAQoM+9lJp1Oq38bW4YPD+duO1n1lfecNEVhNW31GkzofYSuMaYJBYaLpW2xObtk3jBcwASXRmE3H4Z0oShnz9KU15UAPSNJ/M27dAA/M1QysPU07CWHw1IjIrVr63cshutEyAB5xVQvoUA9Kp8iuEp/2wD35iPxQ0/iceGso+mo5+YjIUeknEJKSQ7AmYse7LwOUM5rpNpKYLkuFAmtBoFGm7dxPYJIA53C8IDeOqaSccK0IwYV+ATxw/7qTMmn6t/j2SVOc+o88+rYRGQb+d8Wm9xWKtAX6320Gc2M4tIhICMzzKcKTnhM1cxlI6Z8a0mpa/53u7/kHwYgGAdsBhQEO/TqaQXmyldk+EIRVx5tVL/zZGwwDU7D/EvAdtZH0DVr3NvwPvXQ3adGuSBUxCFL57b1PAjh9ioXzRgmdQjh47udXiMJnxFyI7C35h5xQ5diYvHXVl5Rj7BSq2Ihmx0Owh2mmXuqu0xKoDwl/8oI2EVbaz7Ar+LtpoqIs8wx8xY69hQc9CvoeuBeufiYAiSays/mTvfxfyt7mh7S2Y18DYnAaco8d5d3INdOhzKCa2nzavheV5VbgysKE03ZmUb9BjsQhFYVXdreVIKaFAVwH8V+ZgEtqPcdG/zBuW2enpXjLwxpjtdFIlgnWbG4qbXN9r9G4Xnj3UHaOj9E1qqrITSrgGimVLNceypNgwfKQIDT8ngj1ptQUZJ1cHFzYtVrnQIdq2moEgCrZNPOU75RLvNc5h8R7HDuZZjYP/zs5qKH/ZYKrq3E3GyJlFX29dGwAzkQ7E1Fx6yO+1ujAWqAkKzXTInl5IUtXIlTJ64ofMF6x0qMlmBv0oYA9SBaJHeujhiiFecqLw8AJJc8st/1TgnVeKiGTLYsfU+pWFsuCm/brwNZCaRgp++ygAOOuH8xB1/ACyQRCjqummjFCW6O6tmivz/4K8Yo197oEPfVIcBgu+RikUxixqHPqHnSlY5yIEc3WEzu9wdIECRdyH7fLPCIF1ygLU/Kutta8Hcc32PW8U44ynTNWmHH5ZwEYKds+p4VJMSKvQaMfgg17X8qBRpdrlFmcTzrdz1J6szpmI36ku3Bk2hG744tFkl0gyyvbSZAG5m0QojnCC59r7KhWiulrJ3H1cU7Rt0AmebD3HBsIFmxrlEfOoivNyibSkxhYxA6bFKCPJ9M+7xB9LUY4NKC55gkB+cWyYXl81RczTaObnovpGjsBnZ0XS+BPx4VaowNW62h3+piv38835hJhkQxyJkXKidm0a+Bk8d8Tuz6OYDHdgI0Cj4ITsMn82e6t1/7HFvQ6lAIAbTWk7ymzFzvmAD8GnPHOL1xnCwT/EJW4XYfnvoLs2An1EeZZ4kNR8QHSEj0b5ui2j1ijjSVp6xmLS885ltWRTAVz8puGkFduLA1E+8TQcxtGwgSiLdjP7FuGwK2wWmPIryqEwGkdhjMBOm8c9mCRX9ttK0Br36n2yrh9M2PNEiqJIv269wIYpa097Atlh/y2eKywCS18YlUop1eyvSir4sANydH0hgldIItTQnJOv3mGgp+yRRMMOgQOJdgZ/dMkzkS2Ugh2jaXNcUAEKS3wl/f4h+vsd2aO25hKdAxSm/y+lftu9jfoOei0v3LNXkqHKERZNS1aJ607N4r/oK2CUHuFjum+6zxwid+9qU9uDX8KzWEVq3YyXhGEV7PHHMJ6Xqjh0mDaDNfbkVmWI5C0vA3nrE2WKB7PArYqt8k+qnlCPcdESg63lkdmO7XbbSBK6DwZ4aSD9awDAjTT3+8HrSgsGz+BLa9RAvDSN5dBWj2NDO4DVuIOaEFt79xd9NZdPq4mptvgrQZrtVpa5+LDgil4ZjCPzj9tCN4LVBGP6ph/GfyDtGKxIXXEvtY1I8r6BY6g8eKyNGAhpUw9XcmqqCQfBKFeK4i9S6+lhyoc4R/gaGZhtGc79Bxbh/isXhqAoGIEcx7+z/zJXWlI5W4L1JWsP7Ns+X90VnTkE0chdaRXysTJwE4n4OU1ibl8EEGhCOxfzAesAoNMV+cF8jfCxAGqXOw5vT2twRTcW1WTPaKQS1KewyCyR0g0VrXfdXyEdoSryuT4Ta3T8C+9xsk7KLI5REo23OufDw6YyeWn6jzNiT04X3YJAhRqS7ExG4jX8ezKn1m7sVY9giOH3yNmwkgPEwSxtJi3z6zse+YWsvrn5p+3jMLET6m/3MNN5LVne/J5HsAR6k52xScG/2jTafQv23yOaaGz6dR0AjqRm9zUqmxhjloZKfXImQKpP+UJBA7j1sTKJVDbWELf7fve8VMesfbrj8Tv77PaUAm5CTXiddgYPmb2ovOmox9+Ucv592N/u9lygBaf6gY4pRTaT1RWI/5D3hVr/nrXePBHEAC+7qaOnvn3tUt7/CA9eNtuYOhM9p6MASMQGHN31pUza2hDVkOb5fYC2J0DofA9sjw/k/VwCbxY5akTFqhD//9tG6URsS/4Nvi1rnqNm3G/XLDI7y82ulB65PxhLCW4j5fvjysQ7v4Qce998gnMm8rfYRNUFIj0KAP11xgDEcBmhoU20zhaYlcXubL8ir34op6dR7usThWIDEHopksi/ZFmVMJt7O1q+ejsOG3dH3Jy+PNbrdHcQrq4dR8wiY42xXra2Oqxp2SA0I0U1mcamLyrk0dCjVoGb7K4d9oBz4LkdoOzGliX3qjqfsiVSL590a2t1mfAcI6mtp+O3cF+GpKXMnzAI2hQ+GiGndKUh2WgQJzWU7oRH//94FXs90+xK0/W16hqekr5plQxEUzeDw/vB/m6tk+j5OHBEtXRILfMlaeMePeMtOF7TgWg53QjGEt2DIZtHGxAS1XoK3y5yOnlbjeBFSd9sws4xabpy/jrz8Fu4NwdygEeBtNem9ZcWnQuAGmq9Ve5k68W5YRqk/v1rlz6F+tayu9lIk5HLfQ/7YKZUqPCwoiadjOJUjFkzwi/OX1LCmbinw2M+7MU7Uqtn/avjeNu8Ab3asRa130ufC3gmDzZW0nbk4R3prRoe0XRYgc2jB9i2RKvV/DM3/SdXPYOTUofCa9bnmpWsG4As0AoZbH2RmrtRbFAeRUS/SPGSw1DqqRf7YUYDrY2mBCkxkGFFKqkwlCNCSssp2wp3acf7KzFeu4oNEp6JXNIXg2XXqJHY1BEF25icWrvfpeo+jkQt1lsujZv5hRjh7QpJxj7C+zdm1KKPHEwwBMA0Sf1fZs4F7PfaxQBGmDqBGtYftIawwPZHwOGvLJxDMjCMRowVzFLzmx+Ojd+T7z6J+Xn66X4S53i1REh6cz7YVotJKKNPNgU3GOdJ2HzEt3zgkYn8pE2YQl2ySUPrbBk3DiDTppQSHp50S4sHbX+lKaApHvBaGJGEQRZKKQt3B3/KegsRjl0x7rErtIbfHwHxEwouiLe1O07xzhaQL+AKqmaZNJqTDdqhGsizK+q3r2ILGqVuqbFcPEc2bhA3pSEyAGSDPJpADRGChdDPlbfWfDUNhvgc0LgVsUE80ugrQMgyzeptc4qUQrV8znr4qp/RBoG3NuYX5MsKJhoZxcfzuK3pYxWj7ILJhDkBGxNuTgXpEkxw6Jsq7UGTGD/edEG33A7KD5PlybrG+ADwweOSjLmh5mFLdqcJuhvvR+smZtjWThZRWBE6qOYiJfAc1GO8V93QWIIQUBDipWr0xZ2QenoBGw9cUHcdrMheDXTQCgayXabpJZVokkgiSPxLikVVJVbYkdQMbupWhGdu24xpLSO2/ScLefSWFpuFu/zk0Wp+H5B5x1etY2mhVZ/hKls8sCsTOLC36K1mlZ5hI0vzM83vIiv/NzcxCSlFHOqzwVUzziHivmaeuTlGRR8q+swlGZGNWDV55FbPgZPqzPE8zOULlkkS4wHWdqTDHVXzXAweye2U/VZhyTaaEq1SDZEiOZ4fzMkiy6hpCsadLqGEIw7r470o3y47QjuGhb3ADvUCG2r+W0JNSfOph0hOnwEPUtQVydxQgGtPNOzDYt02zeqNkfVk5VRiaqQu6dRmkhIzvRdEJf6N/PPzgrObmTlO9pIHE1mwySJIVgAbL69LmJ2DIFyxrTQvBYtBWMXb/0SHweN5977PDC/+xaOxyNnEsOWS4NIPi3DNObWu+G2xT3MTZCBQ34406wA7kCXlX4P16KZS3tjxh8Bk4gZb1o6YPq0nHLH0q/jkrHSPacW+5AmYrCPsMBjUcL76V3bgSxtPPnvzE6lx3XleUlyI2PMV1pVhnzPLwb+IMniFpLRRxU5U17PX7i+aj8VdjD6pYHn7IX2hoa1FnTjVCGxL/Iqr4EENE7Z6QukDLlEEo2Wmwz9rk4Cdocpl3bvTXkd4zu1ogciZTgXK3IAzpgcEvAPWFjZupNSMgxvP1wjqAWE2MP33FNPbNUTFpxPa30BS6OqftfzrJPBgSJvzUEI22dnFCqSRlrmCpUCJpZGw4ts2f74lK0AXkG3BFtEb+GtVcParoZpTFomW8j+A46SBVxXGR4X/nTpjShQMc2FIQSH/VzmNs4cv6MgF0rcywrATKsa8E13BQBGQHQLyebivqbR5FFfwb6S5SSw5fod+VBdSBljfizpIzoXLjK/hHnYhC3b3enS64dIqW3Buk0fUTarm6KD27UpyGoScttdOzuVxljqkZ8FU/6iALPhrhjExZkTx/1tl5IZxv5j5fMrOLBWthyNMfVP5IkEK3Bp5VbnPm989GvkYUBTDOhBnRVBnpZYZaXmxjFd4cnSoeJjxyxeKVIEADijFWEkvkSuC66PC1Q2lscQE3T/b72hjgkVZySQ3qBBP3uD+NGl3aazO8cbBBvbWIx6mg2Xiv3JVm1UozXkBAFOdEVXd3X5bKg1mYWDfq4lwI8nVTWQvKlfWFuRhyIjfZM9IkqrNKcKR2OL4vfWRcsEqoiY9wscWAuI0ENiUedSIYm47fkZovULoHAkjRTIzsGc+AYbBTpzy7TyOH9MnXx4dXSyYn+LckHb+NuJwNrAZd8X3fHGUSvSOmwhJfY6qmltz57YlB1dSles1iNqgD9oiwuk4dyEUhXvGPya2Q+KSVJKBEIGC5C3EkVwXsd5yrBSHwC5Igl1617SotJrLjywPs5jRCPXs2yAUSfrYd6D4x61ye6A54DaN3C3DgCoOiMiTuNPK9JRxfCicS8VxsecGceDHQXDzL+eSxCuO6Fg0ayrzRv0bnqAkAB6jxom2j6JEXITXkKdcyYuVEo/kBW4bJ12jmSXS546pYvw2WLuT3zBkrARCVy2dC/82ceOODUX/JMTx82ihCU/nqkQ5uZuKOh38HV1vv6xlws6waka+tY2vCmr6hQ9GMND3nI8jseJUdwgGqxCZSACo/pN6VNr3APYXfG8cfZ21hKekJSiujvAggPM/417ZhknpY22EsndQ3/wJpQF2IqCANSX69wQhxgx+Y++3aR9EOttb+l0ibgL8I9K3cbSFSs+VnDPaBy+GjfnD3QyWMReFikmmRpYia/LPCNMtYc0mqf3G+4APJskR/QyaFqm78NjAnmglt0qXXSBSHXyQN+v96Sku52lBSpcmVTRpXauOQEEF5vCTjTlapo4WdtK6CTDDlsalBocIDfiJDvbohuZz0jrAF/nNFFoqSPR9GKMzZHGqV3baJ6rVsyglhwvcGG8Ric06wj9mQsv8EDl4LbVBUH3TA/5c1CWMemcDmqyzRhvQ7H3BGE/dhig0kWIIF9p4m4jgnSQDy04LGEndX4vTk4XAecKngpN1gnT2epacR58UYyJat4DFWQWE1RqRmhZ9ZsU7QChoLwGwMEduSIc2VzWGGZc9S6Tv6G5hPPzx+D6vh0Pw+0C+4cVajCJcUfpENyjNPgwqAfsDZuxslflpoiHiK2dMnzJJUc2kJYYrwpgtEjc7Hh/ChQWc9xV7DImbabFgKTzAGiXVInvimriGb45haQZjDYOTGG5lgcu+fFcoYR8/0dFBanIike33H8RsFnh7GjnQr+GMQM/CeDqgN5SyOpUZhLC/HqJORMtzQMEFrnnXprQn8ShWIE+zSXqvuw5oKQB7q8lXDPL7ZawhNQ4PWA1gM39/6aPWMOGSOUw2mUhGvDStvXxJgGXdrp0p+j3IWIN+ymFEqQQYSBx0FxU5OEtSRc7C/Cx0ZKhlZsN8NuXqVFQRNqlH338JG7G7ISkwT371MQaMUw/asVcQPBvCAGvqRRUH1RTyoerPtCw9q6V28R9hfGjRf/rpdQ47xd9R21JxTXfBsNJWoctuX998e8lvzaW8vl/Rvr3dzSycIqs7KIpZHIeKb1U3UfuvoQBZ+K2D6vmdGKhSf2FOugEF3d2UbpgO4QVFM877i+MuuIg5w1bSzZv9U4nTAHaFy1CkMFjYeOcFIeNFV1QeUhTcHxWqzDtK2exyyZi3SeMbfavtg3v7W1xJPvpGXq4/yuIiD3T6+TjoBQgFkrI1QLeYx3ltLr3wk25ytfOfUWQ/Xy6ozfVQJ7wQ2Yq/hNAFnUao78SyrWnM9Zt1t9RKVqZkiRPMWx5F/SwyOrosruG7SvAM18Bk48Ff7itK0byYBzJxvAsSereGAGdppjfBwkYGhRDd9n0ua235AYRv5MJc+zuzSLUPGvTMKr6QVZtWEnrSNPnao9P/69XjuS1Pn3q0AqV4h13R5OPccHPUxDP5KmklFIY/Uj+raRmu3USRAe8yuqcUmsKAzccoI00ZSooXR/ZatyizL4+1Ao1sf+lRMqUxDHjlI7xKuSrmWM/trbvZxjP8V5YWHU6wDeySymvjhsfxYcf2GIfKlcWpmngTulX/U4rv4G2jp6vc0sBiotuSK73cgjE+bxC95OfY8Q+KzWqeinEa9ynmZAu+6nmWEplh9A5KQnf93Js2cw0uyWMygk+uN7JBEw+ZGL1h8NpoRhmPc/+SBRb0xSWVtxYAaQjjJKzBEbBAaN9l8bceVNp2IYrezNx2HrneAC2WAwOdvxsMIHqIQ/nmNM26GryYT+8FqXM87G2w3Nftf85J2h7ATSJrnvNJvWXGxvDrEllbbelRq2zO/d4qcdqSWqZNdzcirgiJEHQopjSuQiJnq4GvfZ+6uiGUxTXeuiO4rID72gjlF8aYVrFFYtrSl9xJ8/U9BEVoKmz1+9w9hpbzBUbUbZ5c2efwyYkWcU9lAWSTkz7Ndy9wzsKT+g201k/LBT6xNdqspqgVtnle8jVMRpKPC++KGZYy+CuULgiweCfpl+R0SdtULKbRXzhsSFxAUQI5loAC10FTPw1WJUnD7tUTvGdISVqtUxYFQawkicFBmdEdFmXb1YLVOZwCDxtQNi4EfmRxBj6LP/039XEnawJR+KfpqldOcsVh74jroHDcBzY4UU5wU/vZ8vhpgglPwQE2RpRHSIek43xfarObFggbUQ/ImnRhJYQP7iROhwn4uYpCx6+rgi1nvALF2Sa9e1yn0x+/Z8fjXgr16GfungUh+anSqOkuBKFuKdYIbYsOD6DDyJlJvguZS61V/qXKUGE/3ZC9U9hw3MGFhZ4dM1EcbjHVFsQs2eEJbnMCFs68TshYMdW6NEOXY9rhI+x2Rw0cLLW6bvzNFR455nmYWkYzp5dzpcqNY7yT1/0Gri1c+n4CPIEb7hBHpl/VNsVZRGM0oUEKJoioUY+Rf20UJ3pMSpkUm5BYokglTJVQfrdDwiuxFRobO0EUl9TwV2PT4+UGQ9QrQtIHA432/7QLa6tjOUsxQyXR86A5WoYQgiUfT5N/1+mvR2xi4q2k3jRTF8YSCDheTtJrxU07V/bpQjRAZtwlomiSkv6vMvuWxpl2TYFuhjgScGLzvYdfnu/kfLPq2rcE+ZaiNEZT6guRw74xZ/A88CLlSS674iCLi2k4bZZ3P+xmPCGExWqwWRwZX19nbO5dfHu7XYypqBq7hI+9n/GZywI0Sb4UOPLYpiiOe/9sNJYTBKnaBUD7TKvNX+mpXZetOsGlt+lD3JUDprZNAPCju9C0k3Mp4g5iANOb1E1oBIck2rPhy3REU4KmErShYZrK6IfdNAdnz0Tm7n2zJH9DFEpBb+0noWQTAWkCIWQg44dKoLTlbI/pxHJIZg2bjjbyfGq3m98XW1WFXcezw3pvHVZimCKNf7aB1foI1bsrFVugKV3atOzzZGLDv5E5GG7qFis2Ey3RXeQL/nGthonX4YevFRz9xXHIcUifElHivbek4k/f4vrDZQfI6KfW+4KRQAr1vX7X471xE5gGvBNxAphRglnyLxBi/Fne2bQ72xl2q65w11K4sST0ugTWhrvYTXF6w3dl1TDoGwYjXlKnBUJf8Cy8EO8CALcnsHO8TddLzkDwKAHaA35I2ul+GPf4IF59yWExDTIxKwtw3p/aUzmsbwJsNv2Fnndrnyua7C03fS/QV0kphx3f3sp78XCO5GdQSjJqcHh0YeQg0cDS/HUBWY4rgSz05tPi4OZR9F1c7i+7yup7UmGOXlch1uK2D5pKQsbvwc9p/oGlZzIAObNEcJHJEp0t0JmoSUP7h5HN+JArsE6ERAG4xZajnnFc5B6MZ6jyPwLvpYLX4Fmf67YiWR7JA0mmr4T28Zv5BpfMfKQXGjMWw/2bfx4ScO7AHIVK1j03oWXTbQly4kSZjIr2k0mnmzYZNEbW7SY/Tmrx+bOgXsjl+5kgSIDo/CrouUvchdDUbLnr6yDAEXVdmK6DPyXPTXupJadZ8dx6101KdCCBeU+W1ON14IaqAnysto7MAWv2RyCj2VMLuq2NJGo4zj43blpLlCyQZjh3tpUuKrEvksJ4KPfomRuw6t54cxPEL+knY6x7VgScbb5WlWKJJ+7vTYkJx1zZtmQEy6P7FtqEUcUVouyqDoicpFjYADHcMg8veGEOvRi6FO3V6qLF8j+8blgJc9upCtEy3hrNqCK02crlGTR8+Oqcc/Qc9RqRIRPOZNEBzyUsVrwwihLZPko/4211smI3J3cVQ3jemje+DebWEu7WILkDJfbgynIkPFMxJH+CtsBIgnKQfRQ/PQX/0tYGTqhFV1DRuDbquVhOE5HD5p3wwcwuKtpvquRdQQIZJv94SJ7DIbjKCqCo55fLkunvwhpxMSONaDgYD7eVDtdTDKKUm22WOpRUmM+NB4TRUQeNYdMNGDsudPeN7BqyCkeEe7MCKYvu2hyKu6c3APpafbekoFlnAEsAVxhFcVlSDZp9iGoUgcAxQ2cM8UM0BR3HkQnLF8q4Jx7HWVMDtiZwGW1qhL5y4mPUbDPT3w289MgTgACHYYz5NR45vGpUjM38FS/WRuj6ZRAEomYs6f37Y3wRcF+G49jKuidQS6Yf5N1B5F8FnUxOIEB5j5gWFsSeg3XpMAa26pKNmdNVnExR9KtbFW0WcQQL4AqFCxPCEMd0nJsDvkEUwlPl0VcazfXYcTB5BMx9AvF0fo+eEuvJvTlNiDBEQbBn8qAFPlbZKjVz0afn7L5qY0wRS6VfBypVNksSfAbjeB8mSpChN0zX5j3zE2ruSUgFj7xqMJidEg2Wk1jad38erTXFKY4P7WKCs1OBvM/ETqxI28xn/XtNL8d7nVtGvaUYaaRIHJSQAHbQ/qHItsIFg+tLNgpCKSDgr3XtbXJ3QwKb4qtOD1DIGtjDh2jDtWHbokEO4pn3LqZRSE2TCZOkpvmhjt9piVmcb+I8sRaXCFw2dtle66/OAx5oqZC/eoVahmlp5tR1JuwMrSvVFAm0y/Ht8r+PTKy3gu8YMBHqCh5MklvuBHD+nzKfrq90IdvoS2rPTR7BbLrDz78guwYDTv6yJmXd9xA7AwFw4V898uap7jXd1WaZa01kmCkxe0e6RjAxQqMQGiv/bty6/DZNr/W4hqUCEq9QHdUeHxLgkJnZcK0DJDujVvoe0AgpE41E4fqmWU5Yvh9rpnhac/qageE0hhqDKbYP2OGkp8KMiUGJUJJQmz9FXfjGGXQxeWEOj7vUfygRM0UuhTLj7G65c9TFAI4sOmFvZy7705QakUqGn3OizrQo723KbtXm6qiR2Mov3aycOrcf95ZNavp5Ti9r5/+PArJq16PN34ZmgJbPFYMmTFFWQRLwBADpBU+uDeyLJxwAUOqIRKOz2OvW+QBcFpawb0sksfqO0qoHb3Zu4fBj+VXj55GcKwHwz5ReN9snDWpdOvyPqwkX/t7nnntjnoWBqlaXApY/mMlupNmPdZLXBbDzBcqdghGvdN6DizHHE2fWrB5OWTLM5njlxpRGtQB2K1ldeQ6VOxS/bpmqvp8H7puyYMqLqef5s9xzVcTaJMkVaC46Y9tpw3pqOR6XYocnb/lueTpxse0Ovh/bJ2ak5jJCs5S+zGOs5NZBfUzwp4qeEYy/1Q8d7jg37zw2TfPYy6hSg4Y6ZuyHxMss2yPZy6K3TdWpDUmDiohtKoWUP5ohLLEIpLyzvhjWmDXI3adNpegfFoyNRnS2DZArEyEEXGIp/muuM+vX/z2grUeS29lbBFvW5GE/dzquyjsvHvtJUXn3s5wDJx8+x7p3/EKj4fvFMBmiy/+z0rbDtXIabZwsUtVkNFLCnSmOi5K5xR/nBFcsy4rk3TfqmSuC3ouGUC7d0/LW0puoC0ktufEeiAh0YBh67Ml9asnGIkgisQujBlu4lzvxAHFxlQXAa8GztosPIZzNxtXPrvkc21JNCiIXsw/Jg78vCLaO/rYiHfobd82eSxnfkx5ncx8AlqN960BRBmAtVMYZ29B16fbVI4k9awXz72hqrRSu5v578Jo01tVk3e27+itkf1gzUaTphsj/VpAdnG3X3FDViVaXed0fc9qgDcUqDVR5r49LnC7QEfQYf7fOg7lDKrAQl9O0TiekIk8z/E/LZkTDVwXqkoHxXAnn85gmTQAPajBGHhjjYAomecBLwY0yr/JDeSqu4naqcMKIbmTyJKmDctbSezNr1rQbDMvkWpCElQrldeLYv89C4BWN7Qw+1xQQ6jbhgH+dvXtEMcAg3GLHvdIYduqn7LvmUy7INmsWT2bY2jhnbmgEPvg0S5C3hPZDJmk/OrvWrkCsda7/j7edJQZNAl9wQCz/kt2KKRyp/tmdStQRncynpxVtGT5cw4YibvUX0AHh+MK8QVGBMFOhV7Rb8iRa4M2luS/jIoFlheUmPYH95hKGyOcDs2djx1jH7sZIUTLFwEU7bnflvNYYYeD6Xvme7B87recuiFonVRtqO0f8Vb9VuHNNXkEKRRuVc917dhzU4tQgDLgA7iPKl8zAu56tlyih8pXtTCnatqegB3bv7b1uFJAP92FlD6bebH3vFj0C6nMgDRELZ1/HqVDJu/au8+YF9L6M3Ks5praNCPN0iE3ugHvxQs55imv1a5XLhXLvQypNgx83qqAAHVkCu0PTOfMUQ1xpSgE9CSVOn1pFcvzjMp8Q4Lch0xuBPlkuK8k0t7tk6eOJBQ7zwQEYE7Jx2BET9PpvUvWNRccQeZ7zkLqC4ilMBmu792pD8AIQDKwla6ZP46zd3CpXmZxVFSavcHox8bK45r1GMWDkfCaj+apxoS5Ivi4IQ7SndkHvYNH3nVrdljbHbUVBlmEtU2vXJsSBRtgq8BMehSz2HdAMrnqYTdL1kxGkTzjr0DW9CAj0zugZ8oC7p6Mh2vMqj5mAUlzF9fSGBd52nPLCUyTH3GkQz66ZSChToJi8iOe0NE+VGJKveg8s3kz1l25WYev9+8Lzvj6GshF55naWQLZZLvJq2E+kp+mwXTsonftOTEUg4GewoT4ZvjsT9/AU0mcKsd7XGkq/qsmZbsPhAcHaRxzWVTR5i8Ob5obfH1wN4bVhfV77N4Kv1qS97Mez0pGgZrvVyaepNW8ul6jJcD8lRdW6ddSn+zm1MiAKhwvRO9r0/aLq+Uwps4ltmWQGG2R1jc+RNDpmL6tEHowsjJLE8ke3f9/cFZ/ETsZMrc19sdlgdZAP1RZWr8iBsHDxfsJoN7IusBd5l9r1qiiuXkD1kYK/yaJGetEy4zoBppzOvB6qVrETFuR1Q6l91lGPmEk5BNXekp3zrrw7NOlR2rVZqjfN9Y4LOKLtBSx2huuEbu2nEGo3QlluvFai5LtKM1ED9NlRi6v4rZTNBh4tfvuKHkuqyrrL4Vjn2UcvpmKyf29OUJH2RDKIXwx8gen8e7/d+UC2Q4L0SZt7Mmmqu54WzWQlFCymTRDeYOFVpd0gAPd34zUrvDno/NxYEeDwwWYVzvIbPhpFlZ8wYaZqolIvMSs7LD4V5x3EazVYV195aC+m9t8kGDciNcsZV46jcZMtcQmWMj+7J0QHdDDMV7RZmHU6VOcLOrwzbUzJ/UEW99XWyNC9Ra3OBM0TNH5TKIGUizv6JXk8XcEHdYB2YZ9XEpWJ/WOgnffZJthLtQtFJ2dmJIrZR01/8pAX8TZfiiFqlknp5WpVdTbJluvnF/y1gpHV3YTtpOYb2ERuCHmx4CIH0AwhhkFsueb/RClbadw5llWg1VPkfpL6rfmdvmHCerkZK2DNTjqJ9JMfoUIo3svlW4r6EV8F+KJsT38HiKCDG/rq7vp6EAQFwZ5sfKd+I1JJlHpA/OxlDnun06LFM3pWUNbIeMHYndut26oEMzZmhKrtFhwbaF9nX+obvjnqN8eMPxkAlVINGSN+IIgiZ9X5I/6OkkqFc95DV+n7JQLZ0p+L3AqjmbuBjVjUKuDPnP2vzVuvMkF8cb7S9+Ps1kx/iejTD6Q6dz5VW3/awt5C0MXOMXFukPgDqRNm5HUQFR0QDckTyVSYR4UqY7tB7GyJf6z3nQV5fr4idjPJvMZO/8ayQuL9JV90CL4KI1w/HQM4jbn0pTv/dYMXGPG4JcYS2HVcMxhbqUp//OhZ5ompoJdhPYuN3Jn2kq+u4lr4xgDysvmUPsalc2Ua5CQwOZxI1rVSZVqaUB2yNJmTYy/Mcmwyzzn6xxcyI468GiDZlkr7ct/1s04GoeOjdcsiukWLGwvmwMdnzK72t7amUy2s9jKeMYH1qdxT88AH3zrUgyDH4/kRAiZHwH2OoOwCrZFhug2RRs8nHbzmvzJxpHmv+an5bSiqPg0nl0/+o5WzvMGPyadD0GCHBNBkF8Dw5BomJEP4eIqiLoVxwJ3M+scubJd5lWknwc66Bu2U1Zcl7prw5Yp0QhpvWiyUbYhh1WEjzvtebSQx5oylSHcfy9826FvdpJm3Wc4VhK35lcpCd9acUStkMASVWpdgWzfcSXOYwz8fmz6ARYFydqw9bOg0vDLOv6pnmaxD7p5t+UehScpvDnq9MGDtrzToMM2NO66Zpk1Rufz3lQDTLc9BI2VaciW/Mh2nova7kuVJrZNF5AcBbRuudlqQ1hctv/Sbd43k91qDU6J3+3BQ8+UUStpc02lVJdQJszcBdgQpTFOtqRztLwxO8XT7ExeKAXIy6E6G97Dk0EsE0GIaEtz2voSlVw3Yl9hXFvxNx19UzQkPYdLKGVH3m4WoZjCf+rxMuu5qP650ijKVY9w/qBEjZ+hBJBrRIenQV2avbV+hZU7dBmRah5aoiWei+0WEJDnhkvu88vm7k9Ud544sqXiyfVjJSBUpG/ek2cT0XGO+YWcpV1yAnCLVV7MfDP7S9GCP5NvfA1e6WFN8RM5BECviWnf/8YUW9QzrQxjqZpXqTz4NfsVrcG8dmv6th8Swevytq+/kmkEaWstlj3sAb7R6Mw25lp2GZBgScEgKI9ECpLXW8RS5kRru+XVsbZSonlWfnuCymbBt/IYPiWCvROvw59bw0/pfUDv5YLyCY9zM+QccL0yjl7ttT+Bg43+G4fSbGM0dajHFnd1n9A4B4aVITGgepw0NnQZWRJIU2QIbMXRJ9WDNTgzwuC0oWTHDYohRKdBwrHTiSEPtgBuwyeN0FpTLSSgq4Lf3bQPDKV83o9fwmmvdLjF0PbfPsJ6VNn6y9fnFLhz8mUaAtx+IGHckJSsdbtIeErjiAZJv2VF0hE8s60Yck6jRH2amGdopLBk8t0z7z16xaHFkC593gSCa/jpdQsEPlpk06DmCz0oiCHWyTmeKZbkW9VpYUuiStEcaw8l3cP7rQndyT5UvCqKc7I+Ck7jA0T3Xtfbfv4DfqbBr9/2p/j1tEaucG4BUfnJ6hw96xIm0MBL/+Kg81qd1nj9PGTo1eGR84t5xl4t/76cVyft2cojpNu6b4N4uDOil50+e8jMBG4NbXQit+y9IlamWDyonkbzVaOCgmtwc1oC6mmfRXTJo7WqTLTBJU5IKHsM+R+eClRxfejOVEsNw3lePQrn75aUs8P5fhTlwhidKA8tq+wP55AXwskshThGz/b++ZtF12ogjEsmBii/myta6oLn7HDSHGyJ4RFEIW2eCdCERs/jYaM6ziKM6xjhuqWC0m8eTkGnF00oTmnVR4QqJ/0GOfWo3p/3c3ZPeM9QB7ssQtDvyEQ/iGKD+4HO2GZndyu7PTpJy7KeknlvtRewqDVLlzFvTDoPP3S9hDkFkZZW4viu+G+gOMusgUSLrRgyy/rXuGTNFLHDQmQz7TDR4TxDp3fr9pv2jtijUEzql5N5ClRN2Me55T3i47wyv1oSVS4ZwZMAzcYunYgBIwwwopAhsVXkbTTdkMMWk7FDHx3MYJIvBnL7H9fdFpd5Vocv6cyW9ZF6sluVVB9IlDwGR2zwCpPLjlhMbNkIaynA4xo8qITMdAdFGTLM64jjOjE8HgcDvTBuMFMFy5wS9a7xz7MdNVHEOUS36pyodG1M/dxWMhElk6sCZv2pjNjdFmbSyexQKmQXjKZNeCiFX8yDAFul5GXD5BdeZrZy3PES71H8P/zBwVa5SVbnwcXFOJ+EHgfONGgja1l25H3vMTe+SwF2AqG5rVuu6fuOH8Cd5WNpUiosx51faKcp4jyph60c11g+bL7dGoC4J8E3AOI0nXcavl/wPe4pj4BaHC/f3Mzo6Vf+ZYs0rQTkhR11076znzBqNaT+rPgvMKuYR08//y1VyMEFY1t7CNL2UZZLjOue3aI9NNKqRjRAU7uzBlv+enk2RbK5nhvqOa+BNKMwNxrscUtwkzYQqtQ8NDl/FvtaGGYoBfJXvHkwejVaO18T1C1vwrlVMral5Mu2xvlcwa6EA5EskolL7a5xN9/hl8aQR+ep8M6PYGEBCAG3VWX6L/KLrJDbROr20z9a6XGLbpbj6bBACZUsT8295yNGfvjsqaUcPAIdpr2nrvSelgimRB/nvWVvEHD9JbR8HMRH9JYQWrCswYYa2usNnG3KVjo2itaLswdK9bwvajjBPcJviGgb14hrLjWrGZRXO3BcjxYFXuhWa7fW0FOUHQL5LZDL7g2Ky1BtR+yWI+5gZpYHlCYhhtl5PECJpY1OwocymNCtLgNTpZZyHjwMuMzbhNbWYtTn8jWTBewtIRlwgvBxaPstUReF08/sm9skSH71cOXt8y9CLCLBwBHBsPG81n00EM09CMqqXoF/zTOYt81F9udQuBr/NnstuJAN4NxSOs1kYvVuvEkRIUevWkjp7Z+0MgYtFbNaI3NVh21G/jiftt2To9S94Wr+BlhDQHJ3+RN9X2MEgC2i6bsvD0tI0mchf0c/d5pdSJ2bRhjQBlMd3Ds7SqOkKkJUplipRy+5rPi5pur+G1KbFLkiql9NfKZ4BvKJMjWikXOEDGXUIaSDUP+9FglPvHbTCSksapdt7pTK5l7bZPqRwWWXn4klcNqBRFjw9tQqOk+JNe1lK+rtWa/4Pz59Z7CBFhJcUFz6fTDM/Cw4rYrSk/D33+C/qFskbFCKmasm4fwHJ98EAS/oh+5ynxwVFVpMIIs7RDDVDIiNUOcvOfgcpPgP/VD+/1CVLVCJtE/F4qK7huvbwOJvkUPjyxQuUJPZkSr7WOAtZg3C7qrp3AKSv8prUL6jCau2aO0HOU9ZNGDW7KgTmEyGv2yJG6JQLxy7/4DqVOe9x7D0stEP2zcYGyDoOSxbriaF0Vhk8o7PH5Jedyb81dn4eo+Wf+9vvpPWv5wsxorG/d9LwaSTrg0k0KO2R4eSg4Lm7/5aVZC6ev4+DQxCjQwD99IDTiRs/NKZW9nWZfQkGmgHhYTdQB0P23PjiCaJLqrIkptsgLEFUSYwqsJ2kdP0bKVyPvm3f/y1JycJv0ffnZg3Gzh6TmXfroIxRWHK2cUfQqYufjtvGhXuAdORJEKn+E/nTcJE73h5RujLK0x5aIJ4vidXS0aEvy2quohw6l+4tIKdCKxAhunojJipwNqwlZr+tfdCKhL9+xkSBPTpxjTJzBHat61J6eugzT1UKKMjkv7Zl21X7bLjr4ySqd6p0zU7OkhxvFov86LqDyPxBjAj1r/pfcSPnNGKxbAHgxHOhsNQJ5BObKOPGeurystCMk/8oLSLmlr/2zuiP9Cfabp98mmiBjDoz9ofLriaF8m5PDxADNcjOnpFKLMvtC8EYAa8bLZ8HuLrKjryLuQoeAKaR8oF5xTfg6hbcb2m0uqRL4zVDm9E7NAtdnRdT4dagSkneK7VCQDmoyePnlly17AN9xBThPC7wZLECfyrv2AkErbt5rHUikt19ssIB5OJiQiAnFVZ6H3mgnWV8091bIKV5eZflmzR/IYADYnNEk3cGBp5mL6KGghAwNp56kkL3n3hSBi+9Q8gA7fw1KtU6VH8bgz/aB6wAA1BXGQtVEp/g1JKjVJJyYYVXZJ9+OuTzIItUSasGKRC8IRRLKSJOkBr8fq1Vqg14qxECElQItyHL5gfnennplTHoylUg80p9IK+03dDVlW+jrnasqrd5mlpiB3JWKxvG6S4HJuuUsZ2Q7+1T3U8/p3JlloHRzTTjzMBv+zkibagJe88RYmD6JlXGTDJmaWJuIOmypowlXS1VoLB8JrIb2RyF/DajuLL0OTCX7Wuc7+iCBZfXLNxe/RjUS8jj7hsY2P6QwUsvD+nxQqWF/rSfn/BZIAMtAnibkYsh3OG9BoAs3uaBbP/UDtTsPM+7tecl53dtnm5NQIdoaK0I6AGHRR7rf4zD7n4tZUSR66c1hlAbU+IODvwwDNisfnJPWeCYZX+1ZX/M0zyovghfRFDph49C+Ozu7bq6Fhrk4AcfckI+MO9fZ9BvK95sJJVafMsNpBhsa9GRIjrzLAfotlAHP1unhczgBIuscuoX+2sHEcgP9fbNjva+lBiEOkD+S58FB+jYwjEkaPXx5huAiXuvR2tF04P62YQt8z7qLMG6ET60z/3D8lO6vOLccIQKJp2TCrzea8Uct5pjvJaxoYraLDZaiTTPCEq3d/GrNaRl0N8DgrDFLB5O7Y1bNKQOJM//RHqQtRDvGnRvC928txjxtKW2OAtu+i0Lec0cZePwBOKiql+kS/YPVi7ljPdLu0tmjZ9aVvx1wkO2YPtncFGmxILhOpVQjORMkYAFo585L/uztrx03XVT7vqtN0bDmx3lXRVgK5roW5EtZK9ONm/rpSO0g9ERdOzUlqlNhiMd1QAHc9yw+FoMEheBNjlEDyDq/56kUBBMIQEQlXcBV+WVXmcUjMGL3MmST9lyB6J5EjVIuQAT1sA1OLLnUkrDcRjJFWi+chEQIrLQgBy9naoELU0o9+BK4SXCTKwUcFeTKP593DJXpp6UAQlfDNu3CIiqJhwToaGlC1Er/phvfq/VSn++Umc20IoQF9xjzBPuQj76uG9BZZvYr7nK1SBvoEuVBVzZtoL6W6KHg5NsknMKHJt419ow24ovQI9XVIRzNfVHc2yFHVK7IfWPDTXQWWH1MQTYynigP8PpSVyRTDvvlzZfGvBOXAH+dknxLC5FHrFxvgvqW6AgQfwU1hF1mRFnfnlr9t7dTi92XQ4DN1onxeE8e3EQxWrqmD1W9B476NYnKk/NYONwMGWJvzKO4xpeX8/xW40rbFBVqyCuZ+Ap5buM4YByzlYf7Pppz3W/RA/r6ige8H+7GE5WApfSAHKSF6itS2V+mapW+JBjZz7alsLXdrhdwOrX7KpE7QUDhpR3uqhC6yryjIr6wuD/DlE5zQMEQMzqcn3HdLzxuk2wA7Krxd+x6wm9kYDqXK68g+VSmI6NqN5+5kVFoNTJYlk4Mz1bVgMJmPnXzwQNf4v1fiPnoeG1SZe7zWmC0UZyByXjUfrOXhgzXCWvJsV02X/VSnS8k4GOa0F+kp4+5/7+wSAYAH65ShprXvmFdlooudn2EGdHJaIQB0s8rrK2YhUc2/AVYM6rtH9Gl9zOnIrhymoThaK9rVT/SPd6DNWsJ/u6/A0OoZAxenZvZ1tN1oSp2zBeTyX0k4kkZkYZe98fvfeJwBkNvPF9Iw8E7Zi8tbHvVRSBq+NM5d8u4xz8X5Ecji2DX38Q3OCtxRUIdoyHcoDDbp0kZgY0E0zY0u87qyysQ2DJUK64DxyEW32RGW9M9lP72jnse+U/eSNijPAoEZ8IpssvjQVSGyftqOdb4fGXXwktmr98va6L/A5vlimM2wnTBkfU4misZQCUW630HkPq+D5orGH1upcL0+cCR9VF+nbn2iSYhBRlf2dGl8ze9tNiS5DumbUZmIsmqKPbtFU8Xe+hpmKZESEB8WMuZht4EBJ3cX6vVPVdaA0mnYdsJNrwIwKJTWE31J7K7EdXWLA+LgHMMPLHMwV0QF9oYWa5MUK5OF+EuTEv5xB4bJ8DmMRRSLmJhZMTV8qNNln9EMr4cd7Tp1KR5PHugplTYAOrHuczB/v04rr4+Qu2q/+n7KEF4BHhiGEM9LyJZxE3rkznPAMWBwE0EOKLXFvdzXkCp6XJSJxFnHIrX3aTozgeEHD1tNSsczEByOZ2Uo+p4n2yWoASWiwA6kLaunBlRNC+r4n+7oVoQIvw9DTL3H802kPlxwbDVIvBE9DLNNsO0Gl+ORVIpN9pXGcJsIV0WgyJkpkihAcKoWPXShZe+cYeXsR3Q7AoPvVk31m9tkVQyAYE3kb5sddsjz8A/XHoL8qhJ9U29G6PbVfcxcyMf1lx5lazm8i6ooX7aKauJY9N3fXZTidUdySQQ3/7xmcYYCqLYvFQfV4d1ufUn9lgIzTETniG0javiZU3cm7s7Lr568NIhykK8mg8HE7vKmVZpj44EUT2baBMHXTxUFxVsoFVssQpipuOyx5+5eV6Zh6fSEcQxajo3FkkZ5KD0W+PbTG8ByDQOxje2KGsaH/HY3+By545IuH9slZxaCWJPXniLoSrsCoDd+kfA6C12uMT50iipU5I+1+g67vrmF2of3/C0wnnhCvJzA4oiXwWkILvEstmatqE716VAvh08ltNuRZThsrBFrzcX1btfxl0qZ1y6h1zFCzF32UWN5MY+3csPqL8YYiPgVXKour2lGBvEl+MPEgjcwEbzTIHgD7KoKllgfl02jtLhE6HTS5XXbfGrmI7kcghvrxQbhoSGkGnp2oq8wLl2uqMp4dcmjMNxrolZXLG2RXECJNFRHu+BpxXryHmmwshKdNgLINgaX6bbGvZdwDILUU9Nw7IWes1BCPvfI/ULvmZM1a3WM/wFkkWYjfGuDz4Nl9s+L7T6axM2sqXXyq9igi4s9WFwxby2xEaGIIaWBvobzsBGt7MfcH9gyIgTMmxBXwIijHAdzWEz+EFdOqf3KgzY27wORpPjYtK95aviYqsjZjtpaN9sUBpkKZuA7iR6eM5/Ry3m98ROumJFT6zWBxW6rSPPGoDCPKByVhSoE3TZurlOFsQO3kns0eKzIMCsGuQMDDGgTIm10v/jjQzRVXPHTZwCpepOvTaDtzdII6E7Syls4c8T3Sj0zJA6BJr4aN7kSzbNGaSMrRqv13kYJtdr0sT3JLfqQpoL5jeZiu4u6dd0zcReh3L1h98dl4flTl57IJkc68Gs6IHixdH7JS25YwMri/7KJ/H3YmW5rPWCjo+XUpn4qz6ZxFzwDksfp/TbzxFie0bnfJ1rsl7FG2RAPULeEqMAWVLcUbvx52sC+tgeWfJrZuDsIUxHz5qxM7ocSBMTMShZN7vbXdZ2gPk7ettZyIQ+Hu1DM3UPaKwv0bVs8DXuE27yYWyNO+wLklD7fbl+QKcBw+739pV+M+C8E02KVB76ugUjD9PenEjPG+PW66F1iXzP3N/4+TmCAgPDFhFO0QHBQddaqjykovYykjOWSMEWYYK2r7fXvpddTtNOL7yYnNWFrLpp/gkTvFC/ZeG+fS1o8Xoci99hBnsY4UzWuC+PU3DK5zFTr8TgwZiUi7X4xsUrDlHUHs6bEeVe4uxT5lztR662b2n+323G+04jWtws1bRAh7XQuizVOFbbu6fJiuc6GmEuMZTCsKAUh8zjHYMmqzLk9hCSQTuUhzHz0Bn1l6VD1pqgDh7YutpUhM2kHdwJwQcsM5niAWyThQz1/NiNHbqJO2od1UcIwcuLx0Uzc/OB7v7KpPm0XE0PMdlC64Sh3Se7h5/oAw1qXpZ77y0NlVnX+48ZTR9AuYu+1+6leucUV99SNALITg2L0pRc0doVbLIofFE//AKyC1nuWxOODpREfWbK1f+mdc0eOKyL5aDjepmbWpVuGnb5WL6worXd00XVUYDng4hyDh/yhqN7QlGW9on1w1k3U+ZAWoHvqmF6MyOrBqIfCpf1u6KbyV0zPDXVHamqI+TH82WpXcq4/iAx+YucvRalpXoutsEIYT+SL52iEtWbhcpTKGXO0/0HtMzrPQjU0q6zPIZ7G+mgHyepMkYX8HHCE8+UrpAm4d70ZjAfmjAwS+KoY3dbahv77mBZyDSO2s5nqMvRv117ZyHCNeqgE9Oaft6WH64PN8ZxbIfS3O2HwlzS+Ng+ElI92JeEzx/edqK5sdN+A42UXzUO84o9lnqMm5+tq9hD9S9KVmWGd3CnQwQJaOGop24klioL/R+zHPd4jSBVsqGXCpN8ThV9m5KBDZMJvKi+uL32qZbStEgXgXi1jcThthDmi/R1S0qEDERFgddGuiOzz+O/2IOQHiUOLv0PNfO/r3RDjeBm9ysU++AJbfzr6L2VaXifFxq7IyW4StqH4vUhL0fizav846/3wE7IvVmVOI17JPlJ0cWTDjhKrALbuS9hA/Elc0JHpTbGQ9Ha7UWLN5+uxnScUu9yVYP2EUrCGzcF58Yxze9wbPG+NYpUAXmMQF/JUEK0f6pVe0z5jLSGhTK4EFm6JUHd2fc6gx5mcvPgS7bUzMNe490P6SIGElu3rueQuT75wCvR9tTIwmea37V+e1qrfG+1aseJvORMaMjcDIusr45HgirBRg4CUxOmJBGf4QSC/lHb5qNf39Pij62C/8k+PzyL2ByKDPcKjPMxKvUxj9kH3IIUCqRM70FvCCviYQ4i2hw4gIijviHqqEPgMYhXPQTh+eZCPkxdIuMXyC6d1qoZuYCEZ2nYClV02kMgtE3czMLzNRgE94uj4zKtd/Uzvmj6PHncdwGD+bIBTjd2LpdCtTwRtXiP9+fjj8wVrocczmn2m6iTFC6ElGCYCM7TKtMp3fP7pW+O6by5dawTx8kKBBAxKpAqTKfAsD3SxnEJx4u21nNxZlIB0qJuq53xQ+dR6EiOpVZESS2H/QlaB6pG9YdWyn6rTkjaVdElsMMkP5WZ70NPTJZWbbo0/suYrYm8kOKdzAm/015VckkiyNX66kRFoj9P/R+bWEefXg4WJxc/WaPOISEilNdhmviP47yUOXU+I/uCjuMIHakWO3a3Pon4oj2Fa9PA2yxW/q0Y8SxIPUaMysqfvb/KkyB4YzdmVSJNNELRNfosyOrzsoIDm1xdG2/D//49tQFB1ZaIoODu7kuvHYz7qqiQuMy2/ZPklo2uTlB3y8HwKG2tcsvW1caWFMfTmD7mHYzZrde36rznydF6t7zxhktGw4nxWNwu+N5ZtBLr+aIcBrN0W0OXotCrIcDM3DnuU3dFrU+CuVfrxVCbirzyyVftz9wMxmKjwgpZWauPRzveEYKiArtr3v9MFT3/6LuuYZIVy3j6E8xk50VtzLU+GYMUG2UXSMWpjpyCVevty5+vJ7ujWYbR2Szeu7aZvcBomGrbuqjOhK+OuHZ5WErDV2pvIE63hZRvr3QOzPny9SjB42EvV3gYMQz07oW5yjBX3hb7PaQkprlXrXfnJhGgmKQSpph3a67q7/a77Tap+J29ddlfwXbcETrUt34+U7ZkbvFUYDb1LAB09zpGo52RDrQaRmWd+UQK7UnVW8+0b/NRzB6qAH6WmYXqqqW51VwyppfuX1ONroZwW3ZJZz3tF42zSMNX3riPuIHxx/mUzl6zD01Ku5AgvWHzNnk/GUX3ZhyzjDSqRLseCYG6TKluIBa2Tv7ffBqGaszyA45ZYEpAFvi2ulPnTnvqWJfPRYY8H8OPjRZopj/hhnFbhGe57eqenb0t0+2Ysqy/Ho7VNTGftvXug3Wgwt4gJWJPBmQvl9l/xrF+rZ/QrWJlmfxEOU13eX14EXWGRl9FsTS3NZbzPNRQ6dVxZfVqQrVWUePCWEwSH7chgBEE99JGG8LdmsTuaadoBbxMjDM+CIrCDUFWwWeDsdznKYzZbyxCzng7dSJ9xZUukhLstBRvCK9WTUphMpzYBeSG4vaPv7jao7xji5Ef8o1aM/MSiJuN4EzFBH4o7e4krZQOheewYpv5KsK8LS0Jl6tCiCi8lJHsCqOxJFB57wW4HUe7c9LH3kocNKnJbZUXVFHNfjs4afPd1TWMG0db5RzuNQH4RzbvgMJXDIl4aCbgrTcl4LIiTa+SMpHKhZMV5s6CNLJU4IbNG9YP5qvZuTP0OGlZkCFSJsN9d1567uGc8NPg72X/blM8DvuKzFjKJcHnyJSDviJCT0EdIgngcacgw5AaHLKupAG0EQNse6P8dqhYfAKXW3vNieScMHdQirNpb0qy29Ynpe1EwcugEQfbNDYow/4dgVbcl/1/9Ws91hFLMd3mywtOW28oDUtPcGsmybJ6lFi6UDUT12WXyhM1pcIri2W+lp6qYxjQwb6VJgpxbWzyJrIzz0xN6o7gNQfvo0ntbQc3Bvr0UoZB6vgGIMkxNWbz8VA1pDA/UV3rOAFAoghKmEOUnDozLpl3NGsdHlNThkObDlPDE1t8MHHMUeIhlGeRenPh4Og6UCBq1S/TH6w9bDGDhtoKu5eTRm4I8pn2GFaiznYx+MQJ/s3AKOH835fz65/vm8BG+8yDSwRCxpah4yUvkmKZ3RwohfLTq9eyWB0eyZNaS+mE4xcn/LclzolCX0hMFPshY0LW2f/WdxOQPtbF5EHRUEqfAHnFyruuoL92M8od068CdmvWk3Jn1pTX7P57smaaM1rWapBpODABmbW4zl3Bt4acMn000Vm/3AHFC0zwYbVyTlf7OGCY+x2dTbjoaNOhMpuZ/Ax774X0q3wbgO1zeqRx5vLP7NJUN41V9TfM4IQNH1uffhoPU4Rlf4MRHlxacQlPdA+rqxTDr/O1y48TA1jrXXdtFw8qQxEqmlZm5kOYU44K9I/hYYym8rgbYlBhF1XyABYkFd0euM0Z5p3cHQ3kAYRZD5UtNeFJ/s66fOOrh7hDxp2bHG5YQlu+ed6N+vaiuHmFqgiKZU493YBf6OkbtoUX+5knCDCa56z6hn4ODjf4gGCbiJZnldIZcbqFAWTjbHsgdMnASmf+8oqAzodz3OO1GPqB/htMRjC2InxUxHzrdaFX7pgiLfiH9iiaKbohM7q125YEh6m6V9TF8RdK2xjy+dyZtYvPpuPybg8SfHIw/T4uphobM4wzAmrQ54fs6RQWM/bdV4ESksvb38EGZzLj7I12ndI56TBatd3YcLF/jU4F+D4nATfqjlPyrzncLP/InEt1LY4BM7P7hMeHvjb+AYnAbBE1c/rrvkytrG5RlZg4rTErZRVPK21cSs2c+pJOjl0ieeDSXUHHzdG3V1gXUVWFRuoyHKgzRLQpIBsHQkPLB+KOk+bX632I6s5pU5zUx9UMbzqJ4Gxn63vQ2Pdt66F8LXIpZzX7Nkkzl5gT4HRg+q5778GQ4IRyL5j0ZkTq5EbQA7f8LcZmw4+Dn8SK5OFpFzdDuKEPBuHt1npX6RKQaAXRGecrZMVQs9o7cEYPxQAmQQ/S7t54vJfEtiwbrNEL08QoGDfs20YAwZGTAMBpUeLGfsCCbA9a47fhc2R4ULvtwQbuX/B9R7viLzjsgNA2wOeM1SSAvWm0OnqNm74Vne26AA7lL6+R6VyD9c7HMDrO6ehWXFwUY0BlgET6SjNfI/il47lmpWRcmI6MCq6QdCMMBbQxgQpgVoBTVZ/8kGu2tcCz7/+3tVdsOjrIqW6fm2I7KL2GpobyP04oEq0beWZgGn+jmXO8/xhHuV39zIEG/VHwQM6F4Xcm+zwLLv92gZF4teAplcJuCnfPdoR8IQpHIo/zPJEM+CR9b4m2wVjim/DebMcWvMQjLk8tngJA8pYrtLBZYaDoq/T3akTvMb7HVGYjb7y43ycDb9xJ4nWCv4kYCmnrLPGroQhwZh7xE6iwKbs6yvSeMNGTaW5R3PnDBSl96C0fDCzHTS/E51xW4RFfv7nDmEt69fH3mHmC1Dw/BYxtcBlCTrE+C1YxeUHriU1h1kGvthC2FK1U+Pr3A2VYpKz9FqYzHxlNB1iJQ8JDfJv7TQVCWC1DiNj7nFoZJ4ohjzr+Y/MYcatMXjxS956SE6aMlxXIqhVRf2ykC79URWJ0MQ8bpClR85Rt3eCdikJYO5uK58NckTZleqY5H6sQcqsWwqAU9AoB8CKB8k7H635QdubThyvrrq4NE5ijDlM4FUrYhiOdG5hQE9EpLHn3Nhtw2bkvneKsbQw3LOUbi1rvvv5hGaCMWxR4S48PPiAIczruYU78+tmvzSeWLuA2BCVMGxzQ9EmAUh03QdQP+koccGy5PIyS4x3LrMwN9dUM3fj0hHmfqG+eorw2mnzaYtjtyQtN8nTdhcJyW52hdlM8DmRrSm197eqohilCxLMUX8FY4oiYf+x4lhbpLixW1c/LpgbBqzMUIY0lq2bjYkeaNzNCoGIatbA13lBvSczbozFwnwkMzcmy8pDA1pa/866yHH87/SWoe040JqYSxZXppQTGJQXBhDu1FsgiYVDhO7SXO2W5gHaQJYaZCrXRtGxhilxy6GJ4IMllp1qfgrhTrsnwk1Pn/Yv/NKlFt51CTmM6RuVDladrKYIXuDetEwLQwo6+Wyt+Ne6uF6XEbRjuoVjFwLszXx9VK1WVRzuBD1s4WH9raHZJeu5qrzGM5FboPAKYV1DkdLJe6E8wXutb7XnY5ux7HHMkEAuCdco5NuTrDC5Lbu4ImpHZoF2n1BirlEZKAP6pNTW35kt40KgzNgo5+YFKBXRjtgEWP1TSDfoeSkabrOUbbKWBaNiAlID3KNH+ijJpvQ1HLaM5k/GrvdNtt9xtz5kawXnH3g7gOmEaVXyRPa5ZQzIHIb6Kz2YyZmwo15YqmNyleZVhORlDXHYBIo0dsOVvXhSi/zVkGxqZgE6mc2oCieLBRa9267qHHD2KCKRqaDCNaGvchW0B3+NvLvLdPyK4kOfkgPcd/681stNIuRi3klCsrM8/cMgyGaVBL2ZDlIqp58ZPbKxiG9H1K23dzy2C30QgrPI4GofaFUCMmV6wK0dGOEKsJnrECHRHW4i/5GVKsr/V0oqObw26unLb8LT/IPV14bFuJlZsmwc4vcrhSuetG/csC/ZCyo26xnrMakO+ixkRjyKPVxbOa8MQhxv6r6n1EsFsftcYXkD0f4BkLwsfc2FC6GcVV0i/6tn0TbYgo/w7ty11lL7XWuM3rUx8SOyuVz3oVIcRrUBfLwwwv0P3mXLPN0it6pxSokNLyKWWpxMyyhI9UIEsZUsXen942mK4GBAuBio7pHzlW+UvyAhmGQWpVH3fcw88zsCz8TVoqRrt9eTJZGZSGB+qToNJkJdzNxldrpANq1m3aKD+JvA25s75+PcrS/Fvx536ai3ywjPXihNTued28fpVIGZ2hheZaTN5lGPz3EewiDsSXKirRzG4RQ9m2uqbvgAp0kXqbgTdYao9aEosa5DQxLkAryT2Pv2YRLTgHhFZjLveuiUEITvdlgPFQIYIHu7Ej3I+g6MIbQ2d+JAOdQjIMC32poy1KAS9u5zrCS9pGz5UsItKjLBqHHuhDmJpwCOYKaZYwDBSAQJ6Ikd3WKo4dp+nrUNlX2fXt9VnXnLCzKFiE/9RryaZsHWFOlRBE98fC4jsTGO/xgWGLixzz+DdG0L1JeKTGD5dK7Xm0JKc8cKimVbDm+O3NXljzJ2M48aGPWMNutEdoarWjFhjCey+pMc5nzgTVtvD7LI2lZxtL2VExtta4tOpTFKHA3tvdpuNrzIs0+mXaxOVdSULm8OusvT7Xs/N3gLilzdQ+b13x4ckCUku6ynUibIDjr2+onPTSWXOAPu726aXqMfx5F1+Q8UtUrBK2a4qy3qmC6EIrLtg19sbcB4XPGjXc2JeqT0Qy0Gz4moQTumLC5DcH1tiZQQCsgCnJc/FJKyksxTrtleDgrN8AcLmE8RAQSoa12YnyaHNPrSxcoePLQlLUbLTwAeFwaade6R3rAZCsIA+PG/6CrRLyj8vNV5uhchrlmc2ksngLmVGuF3BolHcx40N2J2hVa8hZjrTQ6bwP+ID/0S4A20e0iItSq3e9mlzUZ1Hn0Ol85HHK18xKyaDI/Mu0zyiwNPr3J/3/AciSrmV3hO8JJSuKCgG4tnbJTOSO60BDoZuO3DajHTywIfUBNvijeZY88JK/X0S8WgMKrF329ZtabxqA6N6LntJDu7xKFsKChUqabjsbPKc9SNpRbQ7wY54WGYwM1JRZ8PYZud0xQCfXvI+EjG3u+uSe/g3AcKY1KtMvbqeBdPKOEzu+iyERUhFbF42T9SPhDTMkhhCnAHzZrlfs8cK8SeNIWtmPZiWCZ/dYG4N23qLqId1/xpnjRTem5YedApWbRjSdn9e/Tbb3kegJFgcZ6AqxuzD10GD1p6OPChIcmTJNrxpaT2igQRJlDvbepH+C9I12fWMCtVlVBDwJUjTcpDe9hJ8pjTCWOW3nltJtXRQvSbKkcwrjtHhcXRTAa5ElU4qscZe5Cr+VmDrdZHg3CA1ilz/E+anOwblxYyJf6L0UoKmjhsUJbXtI79EXiF23EKQ+wyMVgPERB1b6TTyZ4A1J7Dh1hENDmzV3ZQs7/GpEN4T1z2pvjovYrf8TZpvAkJZwhPpA54SEn9wpEZJgWu93W5+S+0LUfLAT664D1icqloL4msDDTfYzSuulq/caeKm+L22NlOnUzOmoO04r0U7zbuyo/qG/9vzzqeecTvyIyVfIuYDVQy00/JIvbew2EjBrEJb8NTMqGR1EG/+e+2Xv1dBQFvLI3RryTxhPUKPbyjnHP+H3GgpNxKA1a7zWmNMP8fDfSGoj8QOA81pY6aZRg+vT/28LQKdBKEsc75/kCiNP6oNTnpP/SJYsonDwegFVBJPK2cvCRatrdj2J5lsjDEXntIdvd3bsKO10KpjRXG36Enc3Y6d8iQBEZ4aP6+vAAjpllhLcO+kibZcXpV+JImeTmg7pVYvogyG5h1AZokwHIE5khgfXTyYON7wVaI6ZtpvUQqbVABuFrFOIrXhFvtk5OxftFcIymIZ2LTn2E8cvytsiVZ8LZM4v8DhSnM7VwnfS45S4JGrOiv2zDvineBZUrxiatRyKE6+2Nyt1zB0ZMs6AbDqgQiDyU1jJb2bKvUogfGy6gZ1f07DRdu9c3V6542ewkCCfiadfmDyfDF0qoghCuTDjKgLNQoSaisu7XQvCb2RKAOcgSQZS6UVK2zqLzxe40/wEBoB09WKG79pVNSpXXFvUpIJ7PRQw97Ja7cAiaLVD7jOKYeQeci4J9P8eHeWFrsWKXQk87jMVteafVTWh2iwq/jusarLZCyiE+Tvx8i7Uc4VDBUsMx/xDItZxaVzb8sPChgQntsrMcJVR3lwJfSDu2wbiBHnbt1OO3yGVKb5c60UuWTD1u27gE35ox1TpG7MFHie1sfal6LqsTDpceWjb6j4cYK7zBhobMn629z0kFVb0jQh2bRumDe2qgFkU8o1c+eDrlA1JA+UXWko93agC3155MbRMTmj2i6entVBIxo6kULLlW50e65rGH5PHZzwrN3k4kCmOT5+5UgnIhNpVEQPhmbR/LDauLl7IsafzTswG+S/O6BSyuq1Z0WifLtacJGTTjyKOuFCGjVE9Gd9fucKJZrS0HBgobliXPnvw2aYEpDJjNtiPvJkCvZ8CmVVKcfW/uJMLNSCSuiOsiZ5gLJ2WV3nQ1W9tATgkiEVLpP7SWBdZR4ltF5zEQrFPhxt2lc7RtNBZmIRdyGGjbzjWkgQGdBo9ScmbvjiD5KgJWlWcb1oF4XXRHDg/DpuBZcHVdglKmXx3Ezvkj/ktanC66hkQtbyFS58CwbrptaJS/18V2YgIauYfZhcI4WXxGmbJ5vV+aAULobkj66ZOhDoEWYtmrdvUIssR1eCTwFUKnDc9ImNg3hrAmB73KGQy9kmo1q79zGcDgz4s7QqyqX4A2jJOQInnP2Fvxb5De1AENoIeSAJQjAHlmVJ7+SLneT6/5+1WyxYe7zEgAMZAlwGpsZ0jB+0wXDXt8TS62Afbj4NeBAviF9euJShSd3AA459j3lSvX6TXGMXwf5Y2xl05loNTKLb77Yg8uw7YzFibd+CRJ32SCutsNnsKrKGX5/qm7ceKLEgTlc3QUkVbztXU/aj0bzsF5cUd3j7A1Ama4Yj/6nugQQfAMIq8rCW25g8H1Byou6dNiZ4LycvsSfk7tYf+GVo1CYmUAMMCESTEQSyAYp3bwE2sqAh765yLbsP3KMaWLV1/hudX26SrnqhnYr+iUbn4yitck/nmrjnMCWMjb+OA0AxSkP2ynioFfAyE0EaaTIHtEPfM/DXfW+Iu38gnV2RnLXcktQSThOKOXhtD30C8L2F+GMqS4wpvNKTbI/NgNftmQ+hi6nSfexD6SJPKbEBZnAoFW9J/9BAu9c8I4tod+VnKlkcAsqZJkLfjC9t68l9ne5+x5oGCThAaYO8NHj9lMcqJDj1oWfX+9lSY7OdFCEqar3+Nr8Ycjp/1D0JNXEMIDkSrPE5AxFh0wod4txCfO8pNbj6Ha5uSv3h5OnRZaHoUsMCFjAv8SJhW1ZxarDP1PkpM3X6xP4jJidf1gqJ0a2XMV/Tow+KzivDdQryEAwX4u22eEAYT7XjeHXY2r1H/u3Xdh5xlI/upvQmzdI6JsqBHDvt4XLfnpoyO8A/7HGtSZWW6NPlUXdY7OyqJr8bzx5iPhGd5ysow72+Y3HPjApjiBKL3w4cMJ+hpIKkPkH3jNRL3r9rzl88pXE+vxWt2plZivNcFR/OpGVs4a5T8RXaN5lCO8+B3FVs9B0rrPXYy87pCPYVTcoMD9TstdhUUP/+0V6MJfHNg7ToLIUU0zRztRU0ZKA6EGdciXANcLECozQJ/GRWNBuY6ne1/JMTI/q1YszkC0Ilzd+sCuSqu/7dSMKpzsg5eHAXMaaWndejv2xUOWuLI1f+lJrVDQVQvqpR66wKaEHRKd97+s7nL94JYnT72swxCaJSlvie4exYFmMC78BcsXTXcasLIj9/oWWeHBX8Bem59jL0U4Do22RIB3U8NfwKcQxfkxuS7nskjB9aMjzuMnDJHUOtNwbG4BlR/6XLUULFkG4xRJTnqWZdX+J3ryRRbDOZpPm/TRATd/Q0KmS8BxI5Em8GHnuf5WQ31jSXrT/uq9zyoOyeL9pqxh3enwvV8F0+J1hySwt7WhG8Z86wj4SfkX1ME6UcOeMvusRR7HX//okjC9lcZoxiWGoxJ9Nx4OVFeR5lY4Cj/0Is8qOGcJZAG1YPqTje6h9Gg5lcb9d8tVj76yBZkcI5lHVfKi6Q3+oj4YFvh7gS6+2PvJP3yI2yfS1v61xuAo/i6Ksrc0zjkdkiYsRvTT9mr8Ngac9UZEJ6/lqZ8IdeQW15LlyEdNBNw3Zyu1SCP6tk1VwzBroq8LprdMPLLo4G5UCn6FfaynWvH4Ccl9j8V/0S8+uzz76c5bzNywDdotqb3NdWtGlHxEJKl5Jp5FH8HtHtAMQH3rT8CDdzRioig8Dox0FQ4Um4KgmaoRWiNdZYg6LAUesTWsboqZ80TFZewzmNV2/qkR+lEqZQNADn+BBR4yAa+rqyc//iybPgecmDFc0lkvz0cNvJHNKYDnk7z6Ah/bqu6w6vk+xZIZgOvVZuVmnLjQHfDdXAHlk+LkMkSOP3n5NvF+8/zPu799fql58D9UFpemyM6jwbPjw7YSjjatabT9lqQ+bobDJ5mX+MowtmMXq6q9rOVQO8uJAJUagbgU1/vf4wmwwg4r4Wg20QVuAzqHp24KUmDr5XNCk0/gbbyqScfdYV4BUaOeFTFhlFbjJs+uhFqkOhYcjrGy73gSU9Ypzfk49Rroqbl0/67NkV7Gq77CP6Tjjy2GqVsQrVXm/N4PVCT+OLknZTwe37b1Tg7rWMohduaVqAGo9smdUTRDqhoGtH6+yIyDMH9+CJG1asyJczG6FhifTuVGg+yaCRfcLfW4d18CYkG3pxYFAMRQQ6PRszYecw4zmHLppmbJtW+CsFbjrczTT6+KMiO6XOrHnt7WkpWxqwI0WrAd1DfbSbiagVJ1BettRvRWm8Re1rrjL9+Q6ozpA8KfRagbjlclrR82q450NHwUtNOpLSLCeKnVL1evjsjuPL7QzbRbTZSQkVHNK8WwVpjko9XYZXUFv1mE0qv6NKfP5cGWipVtnMzZh+/L59BGjxsKVKIXnUupN0hn8JEMKwSme3g7fOM60uSV2M0l7LAR1i997PqsYtCPZ1ho/MZeeJglMLrd9HUsnrDmD5k3CZV2AQ3LT1eBCLmfarjhdKZdDvA9koKeK/7SGmL8sMBASW4WRB6ZeMHa+F7twnOhSxS0PGLtADyeOeKqPkDBPVHxFTeQBbTgmhVU8chdTiuRnW8ivZ1HRYOULJuVyGonOvcyu9CgJUvFyLwbPrvXDlEO6THn3Uh1bb8IyXV6RIgo7fnAZZrP3GYXSFawbf5Zq/5WBwt4ejU4dcphbg7xSt/z9Y7hxROs3ZjWMjBGwnEBPOvHkGPXA0ODHqIwOQiqSiShrUwczSIDxBwm5k3o0ZjvEuudWfzmZdKvnG5a9gS1Hj5r2QtuuI6mCZhlUcm1RdG2g+Ptr8Ly7eE+j3oO8/KFsTrRTquv3EP/boUhCroUv9cBiBwQyHl3KJS6myySoU7aFujwpJfIWIyvu3ABytSLiVTwZmWtckdj1PumNPWzwJTa/YcB6kXbJElYtNS+jbopA1gNB1fe2KdIaoQG7N6jg77ytwxSwCh2+MmTljuSSZZpidPxGVHJJMjZKI+nbJJPHwZX3hc4znc1fZqpTZLRGYDwWsg/22rJeYsqUeiQlDudwOICDlNAvXirmbnt5dOg14rxYqUi+REvdqB0zDHyughGfXaI/0j0KgGwc1xX655ruGnmllaLUEsZUOVsuPK7Ids3ox1ZFBIV7W+Qm+NtziTxon8dqqXUc/M4oBLq8afKdR0+juzJniuQaxXPPqVMTKKMulUInwrIAw4lkQUQC/I4iA6OGCjDhq1NLv2RtgOa/5nqr+GsK/SQmHJEPDZnT6vzo/ehOJOMqlvtvGhSSuGZN6aWJ/Eg+9n/2HjZdn5IdbSZs9LAXITM53fTxo1o41n0u+yWPzw7ze69iiGe9D/N8TcJvX6IRO2QyJts2H9HmosC1I4wMFqNACbtxBFiBQcDhxnclfO6fkRRCx/6aMwpPFMXzFHG8ERFZPbz+pyGX3MfhCzT5vXpubd/eL+PRq+RYAxBhbiqH/x/z+lGuNibMUP9fu4+i1kD0GxojjVIJ4seFTRkM9gTZOkQTJWNBceZ63MYwHznwPCj8ov6rqojTeo84ACNeYekZs6FI/X06h9g7EXN1ybcVZ+LI7LxDryPBSB89f71jWvEi5XiHmqrSl4m2UcC7W0/V5WG606DFXleyjdatlEVP644hR3M1pK0DUB0BeFewfHyCZUmQKAkDRRsQArBOlcwAvA4bd420hwM/Hk/e4ONzYp828kkD9OyMorTiAa81T9AY9JHHiSED0LPTrsFpAyeoo+D7Te6t/kHZeXbHkHA/+Jk+3bJdyS9eU4PXQ71ZB2q9bkEa/sMjo13hbRbP1OaCst+qauOd225Y5q2ZdunIoPqSzFr/HrJ4nnc3WhcYqAMpcE1lAVDQqJ6wu5kX4MQvF4je52xea4601XzV2PMjrzJvh7tb1aiBHxJosbukgrCM4nRKH8tXzIq926WMFTFW6zFot+63xPMcHsffC2/SNWZJqpxWyRJI5nTdamuWPO1kwVP2XEp/YlOfOUb2c3VFwwouK0sgRfTbhAED5cMJPBNElTfivOkmR9cT8kcNep9g9er1ikshYWa4vqT5B+IDD8WoxvMVdig15R5LfLaIfYVUNltoEnw0UrLTHuTn/yHNHGtvW9R54cdPtA4Vh+9WC80HFPUmlcRHAxBOHuqrumMzdwcyxfc2f94ygmfE3DudLoNm7PC+1urFC9hTIjKqTwMNjn6Ll99g+aE6ohFqAlS6e6rh0vLbVfbnP5z+Cge3q6hRwCdCgPRiBZjiNnmS/UAC94Fxe6EBeI/v68epI7djhF7iIJZMUN2yAgeeaFa4bb+RUU5PiCUnaF2WPfp1rFKW+WyCBEXwAATHWNF72wxqHo5SQzEmPu3NUv9FNPkvzfOJc4YLV5LroFiZC6pvXfm42cHUzwIlsqd9ngigmBiJde+5VUUA0b/8FRcBk1CAFNAbtIDWESuGUdfZy7NNjibi/nstpnglf09mIscHNA8nAjlMMwRGwq3Z3cOAK7kE6alS+3BfRHR/1H8hraJyk9AgP8t7OG8E+gSiFyqXMd3wXij/fUjaQc0PISrOwgcWaLmYt2IBtfqIcLu8OXTxXyYgrcO5XFVTkJc5kPIv6Gpzp9AG3hTckvvr1F3WasRZH5QF88zpKMZQ5XZCRnCPHcTBCsl30Ij19RfM+uDKnD+UPHTspGQC/7o1TVhjAxekt6n6l5tzetEq/9u9OtKTXQqygBONGNTpfIPZVIMRcXEpMaFjPAFtLdoJbd++tJXG8hNt5o6gIjeP8s96kr+QflSOvyynZeoQasyiNAIk/aRcIzy/qfdlPXB9vAJe7xA8uzqZGnqepV07L4IzhKLvnXaPvVy7E6tyC3flZIof8ObNJOS2PXwQJvs5/HLEiAq5SyRPnsfJMsFP3BwXwbtfg+V4WSTCKT1CBsKTVOGHPd5T6PC5PCsOlhCG4fpza6tYce1PiS9OhnZHjznoFOc+HWV789C5HA0wgPe0i0rqdmYIChgYHQ0NwkDMMo3moNuxMI/VKZO/5oRlO6x6A0a+rFUKWOVqFdkjaS2NX4sslBH24X+aAOnfzgd6M4/46+OMBYc+Pfx+0PRf8veml0suZpfmMoArRNLX8VkF9Y0CPVuXtE+fMgQFg2eNhsRUCNNH+VzJo9RtBn+sVRNbLPKIS/0m+7DxnRlJDIWtvql7wSrfFhsA8t2QVOOoKmubUyInH43sCHRoW+qb1TT+jLurXhpZOnvKmyi4DjNmr14uobq0CzelW11k8Vy1GHT/Herq+dW4rWAgu65ocZEdIT1FoWZV28+AngAE6WLsvz2ISNV/zxZNU3j4URJ3bku4bbMobXKl9020YwyNcQFrDH+hSPgWcEs6b+SnZkolhRssiJLAjwJs9ZFDwoB15ExXTnCQYSeULBMI29wd5oVQUbb6S7tO5Y4DYSbp1axka4wOKYfrLf8ftgsXszFjmCD+ZvE4hHAuYtF4zU2eAFN/O8atP75YXWtzjtJdnVTrVFx8pUha6duy1hrIhwvERNiH30Wf9ByLb9V34qLpoZyMWMXmifumSoYkaoHHX5/wrXrTaLQKgtZaOdP4xCaYJ5Tdj+0Nye3zu9S7NktTty+B2Bw5NryO4WOoRcY+QD9/KO4Frn/GR+F4+TIHuVd9ArXfBwX50E1bN46PMYxr1i9irIE9pAi3zpYSHqd28uHBE4pUS4uHR0Ux/ZSoVG0ILkYYnxIIeaRjxV0G8KtSgXgJ/6wl81fn4hScIxAnuMYOKT86DFg+x5r3tTnmlMwb85H9akADhdxDNS6wzUhSOEcF40KEwhd3z4mb5171xb6nfVzWcUct3IQtsYVZkkdOMUX/F6hgu8ovXTR7q6Ns270zic4PV036SLfgIPmiO5pYGPR6VzvtQgYDauZhfIJyCZyz9sL0ZQUm8HaCeDd9vXcZQ1Hr5zmxoE2rh2VuV3hKQW5RWbCByciYS1PDgBFEF15Ou3wgpuqPykFyij7a7DEvwj6psCdA1KYWNxd0FgYVj6MDOC6yDjnYUvZ/WDRlHBzgRw0tywphvTF7INRBTetCKoRNqHH1ZcYw8tGITATeINQnYZ6XgXC7jLU4sMcqBNTaE0+OEg6pAdAeEcaqO5MqrqvSTA1d7ClWJXkBhcrAu09wt+DQCybFjTZXXSCuCiFzKBUh6KEayHenNHXHJZ7+GOIgvNWEhhvA10Gh9QClhAc8zxLNO+J9jNG0OEYnB6x4dusjWT10L+nPeAakpHiNd25c+v1ly7583L9pHf2C/koXPftnKygkmiP+SRzQxswQNVT95a+FZnjKmS2lvl1USlW0UiHGHeliS0WUMxBB0XYq0jlUDaIIvAAIq4OMgb+Xor/DgpxU2rbIAfv2bBYgUWdMadH34Fvvrm+5Xp3DD7CyTATNxiDX3Y1ea7C0vheQjTe00qjbsA3SRlmV18dCVhNY8p6Cqu9jh4Uz9tcUo1G0eLxYwe811WxzyH33eVKQ63ZGFaiMua2uSR12clwVs44Vmp/besqmGfO6x4day3zi2P7D9eDKixwHrK30KPShHsx1cK0SoDaRJfJnbvJ4yj8NI1a6pLcHVoyHcpe2nNoZikUJZ5r0PKW8rbx7SpH28rTj5OtrwgpKMC9t2qt3fHa9quOwmiz4qrPx58zQv2+DQSUz6X5rR96uSaHAdtyqNuhvuTz6eAYb5MWBFf/WX567T/1mYW/Wz3/GImupbolYEGxVohCv9OwgILbTq/BftrADXEQ59hkVBMgpQEQmbNSTzyKxORj3+JzfYnkXFfrlVoKhvrHTLt0yvU8E1fEr8QzINknySJtQpqRnQMY7YOyF6GD0vGmWUhenbiwCjcqOx3k6+hCPcqo5urNS76UkHHmqDk3OpQp2uEwCQEI462J3lL0vVvtI3w6HrxngccDcjhyIpm7mP+puaBjNtXz4v75hPXtV669XzUGi1E71YZWe/Mfr6HwRH7aZb4PPNARfFmSSCJ0Vk6HSUAx9ADlcl9W/Fi59/DbqYp2qTMmCr22EmAHQcWBxLEKToWQpcWVAkm2U2n4guQkuNgsVpL4U1+JFvDEHM/JW4C8iFkLe6bxpxvtKjj140Z3pNYG+iyhFGEIn5JUUf5gCYJ5uZT1VQvKg4N8eYo6V0XXmH/YQNlXWS18ex5PQ8Uq3Z7o6raWtb606ailzL/r9vxWMjs2VavWW86ob8l5DkbKB1vI+4u+tJLYo4GWBDKm758OsePvX0JHS90FcfrwPTX/A47hNOGSh7wkBIp5ZOXlGl7WjIZmZAM/F4jNITBGFx0GvMpAlEeTjK42A012q8wiq0ApS/o0CpHKRFSCB9yxNnLNKrSWWSgavnPNc2836059vw1C2kq/3NgUeBnTBVwzCImgRvj0LHVizLJ5C3O+tbUUY21JreZNQ49/wBOmVq/sOyCSn1eCpyqgE01Afw7ES1HZhpx9gb+z6hIHXiojvB0C0D2NMXURp9oWeP6ZZ/eFcChwdo7nDpEFi2I2ZXmGFUgJ2sWTvF3RsAbPIuEKNiYABsbXMltGceRbqb19ZtsrvxuImFW7w+mMpZnXv+iFGRkhB4+ltJRRKCLBhmo04NV8QdzxwGmeY0bUVTqZF1qjgeGSvK8HYt3KFBIJkwxChQa0vQ3SF9MToERwPVdedweNOSekly5QCyGhq7VahFN3fe4HnIAHB+PX9bVBGbg/oTBm2ID09jQlclTbQCySHPY8T3E0g3gsT3bA6/aeRu3bu3wC4SuzbELw9lmfDFQZH67jHTDHNOWpeBRRzkXMFLwJXGGN3z2Q3lPBKGGxuuBfByxnRpAZKR1Xd0pH1C6V82W2Zjklds95ZjjK9ADUDVMU4Vn2V+W1g+N4/U4KeF+f8EJqfojZ7X2LRERWlh4SCRbFRTkdRpO5JQaAj2LfXw2xjOnGxidZQpneFzGVSG7/6UYk3m9ySsRbLXqVrKIoX/8o1vE5ITOThqsSlynW0taHRxtgUYHGyz8XJAE80ZrxXfQMPeOKLoS/kbCo1c1/2oFPfrkaBFOKwYJKComkdYhMRftH1Sqx2rZPvBVj0RAUFTAtfa4wSI25WvxOP8m8TYCvU/10910iRBF+TEligJbInEzcuK4bJyReFHNzrEr9CVQP+UjctAzjOrTWWP39QIQy2TfB0/3AP9AdtgyFBGMJlxEkd+KAgnOjPLHz8GsJAkOyREtJYxWTvGTtU3AyygZ8GmGSBo2Cqfd4oMtPss5/vU3RYhS5xEzj3neT0k9EUW7gTiQJ0GYUZB6DCLjPF/l6Mh1qWbAB8f1qw7bm+KhDRsQyTKWiQv+pw5FD9q6t95EzP3Mzba4MuYgIfwy0v7pfC1niY7S+7g35524vWqI/DodPd9dMK/WMsqfJGxPS3EVjdLVsK1u1E8yGcpO4/66Bf7MljBGjSZVUgu7QuRMQGyMc2zqmpLmDESYnr2y24Zcx8LBNuJv520RLSzqIUE3qcFeJ1gEHO3DsXTney+ardc1FyVCs8t4nJLH8/Cvok7a8XDlh4om+OXY0vaKwt5fIpKdBSvDmoUy87EgtxA0CCMtfhZKVP+y/6hgqsLsRAwgEtM8uUl/LkeyLu7Fl0ECWLZFxGKNa0CkFVAjVoDtyPwdVUBQjQJTt7Yh96EhbQSUqCKzZe0rSibJA3lhw7M9wq+BFOEDVNGA9bglwy8LJ426aC80aSDul0sy9wi1OA7eiN8OKhoYOZZMPAVzUO6kUDLo2wDRyn5EbJxEkNtxbx4W0B8Da9aqKQL9FebXl13ZPUZop03mmLBoo9SQGJ+qiwoNQtmk76BC0+YFeC0JuwxUrDRCXo+d6ExJ6CroweQITsZLxmae3C30eDohhpiaf723TcgTohLNUUEtgNrOJD2YxwmTwRoem5sGEAc0+3sjHsvWx3XJr5+8Pr5UH/mZtkwT3AZBT42PXnYWnnc94u6TMRvKqcjH+A7YRLlV7FUIiMgOmqDhLDSEL7FliNjCxxCpoITdLuC+j5NmmvpcTMyoEYHsbtPy3QbhKOmLJTeZ1AP6FLXzg3YODQ+UwR99x+L3QcHHFo8LscZL2lxLMAG2AKMzKpZITzI3OFZDFVKoqnA5SnzCOUlKQ77asBaFj+hdf0XEGrdCc3c3Dil2+0ZiwsusG9ois0/zhqRGXJZHFJpoB9lgK2kYDl+h+p0aMPnIKBgO5tGWY0E6987stKE6hfhQvoXkk8WPupxy8FtZKqLkVVFSBIj9PdKwPw/frLOLTKBShyNt22/QlaT7TcHsgZoJloL1fsqMXbHyaYeeRKro8REZxsogEIvlhnYmS5cAXq8K8zd5A4qHwHn9zgPLq9mQmw2NcySXT0mWchfexxW3lGhMY5tJ1OIw0t+9yMOWWQGmX4tf8y+d4WoQApaamQCIVDB8p6SMIps/XbsDaK/nv1IS8LJooaEeHYw45hKlpONGHlUZrkthTRTJljkeWcfRekF5qF5ShBRx0aX+Om4z/Hnl66jd9vDlC9OBV3LqXlb95MgV8q/ao0y7aJIZAybktT12Uaea8/AWeFT3jqQ/Q4AhmZhGJodm5R42H4u212rjPWlh3Fi8aNCBvlRQg2C+HvsSIlpsJixigpY1fUexkGKKtlfEGjZLGR4MbxcuuWzFerjTaaE+BzX8B7IzeuAuxP2jv2fmgOa20UnuKyyd9wSDMyaLFgUFbKwiQrW4FA4HYznoLajSRBibAlfQIm2DU7AG6Z8dUxFDe9EhGEtfEG0e3CM9FF4nI76bGYd/haRlsaUwB5edvzRW9PtlFKQXU455FgPsK07FPo7yeS33W15dpeQ2SPOed38vMg7qi8mOW3ITh2c8G+bfD5AuZv1d8DROXh8mp+mdP31pQNcDwMxBxSjr8CstQCNfae8YkXavLZw1j5I2MKpXiB8wpk4wRcZSc0t1wWzF1nI9quC47ncaCe9b3U/BnRvaRwLmx51b5Lkj8dIr7lgTL/S5g85Ibdh42o+tWMAps8tMrG0WMnHdjQVPae9y+lOaJBzpzgBJr/+MQreK6gniux43BOIdubiUng9cEpu6e/JcVmu3qDPRI4yv2B7Q5WrKxBFLuLEgpHFS3mKkKVJytBHNJNZ5pYAoILzRofrUjGSH2L5j5Y/seS7ELlTm4Z2HbcwEjdp07ivikYD4nxm8l+/hMNO5tX0xdQRUB3VVg14ud+9OPZndJGoVkOBblDzy/fAklu17NglkpZNVGYR1nz3nf35nV5jca3pS4ot+OMg/SJMb5KbL976nygaZCG9wbDdrM3McwnK/U+JyBa9k9RzUCA8h4R+TRqK5LZYCzXN5GcTJB68+PR0lctIrcg48YeX+GoHB/O0Zt3eaMBaN/5pBK7px0NA5f6CgkRtmHBVBvlNTaVCMNEtkB6sNd/VO4oipcO650QJPJd8+/4Vq1gsAV4gjvW1eVFQGiAbF+KQpQHMMs6tde64v5JwaoPCXYKJ9GwfT7cnLu9ecOdsnXJ2NNhwVnfnCcb6RZfajkJmEZmFEePgDUgA2ZA40NBr3Kid3krSZL90iWjMq68p/2UNOji9hYhuKMv5l1SyIQ/sxoLVz/+AOhgCLJ1KBEph9FiphEaM9dr+rIzmuz83yIo+h/E15bX+8qbbXYSuyZunQwU2WukxS1OhxQ4543Jh4FnHgbFVOxosGePGVmYPZScitnhs/XZzQvZWKc1dQa7oFSduVODMM24/zgqZmm58XRoU3jiCBzLACgrvf4WbewZl08jakExNUOyVSQa96H5vsZgZjg2KPmy0vhhcTZJs1ks3I3F6+2m60PGY5tSNpTnTaGyYug3k2ocIAM84GlXBPRvmeEaAT8mtOrFK4vz7hM9N+5kIk6JS24bU9Gs5NRrN3BE5EpVEI0zO4NNEb+1sqkJ3/b4k1eAtkJDFS3G/zmrFX3QXYsX++tanw8QQTPiq9GvQL5tJCT/wkZhV5QtFZm5PF5Zv2iHl1ZkWoxRrWLXgVSG6SjRrYQVGdzSaZxMaadV7UL9mQ4hZEgyDhdhulog+F+v/Bf0pCfWZwnAAl6Vwkvm112S/B1UHWrtO7ZuUvhFBdvlbvDK1lYRvPM2oXLtuLywVheqHo1rDhR+VJkfD/jMHL0rh/yyk/O0V4zLuXDILKWMm5pksh2fVXmhiFbq6AEU+MpBm0f9O3ZZJZg+be9hEHHObuU8TpDToy8Ntb9a9ytDC5iEXeFxiOWo29IAQRgQLYPG77qx/q7huB0oE+Q1ly4rtBicGUya5sREi2XCkXtMQhmVLWfjk7lrVb6qScmMvhvaMzMiwwkQBF4rrQn8BDmqQ25nukyJryjNe1upedojxkpm4nxsO2x6QaPh22sVG8Ct04VFbj0rJSqlGaIKajNqvq6eYy8e5xvAUNFpElIIqSDmy+xNpJUhdIsAvl2g2OV51LVlvh4R6e5Y4oKrT1VkikD9z35W74c6ykIAeuRWQizMfgbkEGa7n0TRvVsGvlggzUF8byRT3y9+UqKNx3PGE8GCQjt0g0Pgm67ZZegECWrCdBj+BKGS2Q27EkbrPE6a7zVnPUtqscPDjdD/wn+klAkGVyYElqI6o63W7BNSiAOrPxXte5DtWrJYPIW0AFN237kN+mg4VesyOGKhb3XDf7fmKGsgoKBcO030PXDoCZtSl8GGYBKieZP+nm9KY6kCkgUMlWf4Ci5K0HIAjHtDoACAcq9WzrHgWRNpD6y9ssFW50GQRjLBJwBjfdNnwFz5NCrfqavZvvUGfqWCgTNWU6NebNXNOjlUCEYexBOGWr6+kDS3FE0xzoVMWqEKo/+7aftfbeCWnyFo8T4R/+C6sQZNdupELstCa8Hgp1CNAJr4LC9+wHh4CXXYYCpE4dPgMYRWvpkEpqQeT8asYB+oJOrit9EQRKvJc9fCddYht7qKf4P5pqr1LM5Ypebs8k6kyPTlqrdl2uIE6J8yujyyNkBScjco3rBp/h2Imwh7j++HavmWZM/7xnHce5vrQVjWPrsazNT2zfTvrP+a0tbPQVLYUamU92FfLNt0sGf7+C8QwlJsdd5SG5gC1VhiVxF+1HJcHo13NkTMNtf1FpffM57VNEEoiASgyo3WpG8ERc0ZtW9S1TYxjjmmdBaBGTcI0DHXIO6OHdEDdlslJYoTD1O9h9tjf+71fglHI5a4i77QBIM9I0HCrg/hSu3+w4o2vx8OZlSDq6okp5OeKNb6ZU71TiQ/Xdfi5H4Qv6bL5FfMBhA387GMkR0dD0sZ6GL6IKv2u9eRpJhTbbKcd3VFSQCVDFTNG6mS9qqe05wgBfqfLRhtN72oCBeZmbb9ycBaP5/TqQJcs0qCWHqcLmizHEvb3xPn9G4bObG2ubXNyctut/+9a9ktHVOZmgf0d6gc9VRHUCG/8qWZVBZzIb9de/lU2wJhmNscPd55FXt+jZdrvxwB8/Nk1AVbvzgkcFraG5ydvxzjldB1IjUyD47PIZD2pCHmfPTjV+MJL2sNJQlFugfHosrAtS0ZD0xQL99LKLE3D0mpGxS0XvKGyGOD/deABA7v1r7sMV41jVbp2823xTU2A25FIQ9easM1l79OqGuqDolhsBNrolgHjp11zTiC6xrJaoZiD2qG9wNjJ1gaiJbDGSDp70kcrUCn2Zd0uwTBUy2SwQQ3hALGXvIlA2fonPv3YLo+dbxaaDr1bZOQoxP68w+eiDiUUgD6SRdWXTd9F1sxeoOen0Jva1QAaqJONPDRiY/qtiHJx+21pgOtgJfvuv/Wr3MlfYrcg+CUgkX5yJo+yyY07Tn297qjCOq642WgmD/FZsLjJlAFq98KF74QZiMHZtBPj2SOfQpAA7TQq9/G8B//vte/San8rcYIoH2CdmqZFn4J9/tTrG6INSqssCuFaXpOehqSwETqJf+TjKX/8sVPY5bJdR40iruXPcdgVfYHZqvUlU79GlunidAn5tWBNuZShBu+zhWfj/R78N4tje8NpIOd8Wu/1Qj99iJwN9ilLJU/OIIvPnpufl7+s+eEodXh6IogYL6Ue2JlZV3YRq2D/RmEFrtdFwWHFuCtnm2U/aq01h2fI4g9xiCUz6nt85yTANoHyCktK+yW047OiCziepFNu3ouOsTVJoi928bjr2l5Yg6NvkK8YBUN2QjdgVNG3/DGCMRPX7P45NqC7IuL+4dvqzg+0ciGiH2EFlVJDWtZW1EQAKcQsYibbKXUHRQLZEKhAv7T7VfZ4v9gshOyjG2+XucVU1iNg5WVk4+OXC2RQOs6IBSXHLln9owzE//rQDqhuQimyW5q/rLMQ2wapFLhZ1MMPTpWLlVoTZ6PNqxBpMjd3mgmFj+eYAlNp3y9MmWQj01b2xrWG3omFN+5clDJxqN729MQ+D2nUW/EPAsqELKHCYOK3xKErixWC/g3NPZr7RI5n9EPoXnMIrlG0+urz2yaJCtB8FspxmHrCw1PAF7hSrpSuwnqgSejihrNwdY50Qrht7dwa+V0py+0jEOwQeUWSpLl5z1HjdnWN/XWc3shzZgA5yCvDBn5tUoT1U/TLi720WgdCNY6MpvbTVVKM6ETIH1Siz4USrTrSrdTvfHa/vBByc3RVg7UxjQQuwJU0n/1IydD4Qk3JfHjslYLPzwoO3vYcLcbdL6nzuHDB/1214Lfjt5tZM+8wVzy8hkC+xxat/5+PCxBpxfdVok7aGhRS1RKziku3vDfijx6GhJLcdf5eAJtfynD6Hf9dd4kyIjhv05H8NLCthSDq/IwYRgdDx33OViFYpcDHYVYD66D4RL1xunIDhpV3qK4nw4Ur1GDNEx7qis01I5Xz43Q1d7dz9dsweny9OiseL8ETpvItJcjSDG7lCxwog69fqJi7nYUq0bhy13o+t8AYbHRW96Qw0+m5GuvpoGQC0uw0q/v7jiz9fZ8hzO051t47xxBx7SAtQ8d89gzxg8UBl3jUfGGsufjcnmTEVEfWOGr6rTGJKStq8onamOAu0wnG++P64E8W3umtvwrShl8g4AZlgRLEvqFpEAHftbO1EyRnJRhUueINJJrH2x44VVFHotMNtbwc5Zxo558+gnGXj2sKE2dsVfaq2UeIVQosELuMd2zWps0WtueoYTyXOwx95xBkvZS/pZ3ODUeG5cULFM4KXfYui2JaCWy5WbTA/z/zaOv1U/ItjE14vdqRcDyQJKQPLtPzaB+ChYUeLqdKrq0TbH6cAGXbWR0VAHqXgB9Y4ojlGzABA1NAVRd6+KynIFG5novtiZ9Uj/giCNYCEGchpOSDWCA+pncYxCZH9+1rW+9KfO7TsRyhICLZAoB3OgaIWRvL8hHJz6xeiS5bQlwcPyJxQdg/CVEjmKClX0KxjQm9YmbUVtm+jGDIHlgmWf9lNFszB95BMKBSDeO1g3FlpoBMi7ITZpTY/9v7evGHJHPchCSDSyp5OMNtRnrbdM1rgFLNY+DpAt142j2cHU3BjMNktfPaVLxBQYE1Q8mCaXDzMfRmzTSvvyp6YJStBloK39XnBEVHrm3Taen6w9K1iPuR5W5D2Vaob3SC5smWg56m7hTpxI4C8J8T+O+uaLSG2aKIb0TYpg6ErRINU79PcJnGzOfYOshwpdob9kq0vcWRukFuwDQfI1eCrDRF6WG3dkLxr5j64wGPeJWR404Cjmfu6qBAa/iG00/7GbZF4EVwkgSJTkOximAeTMKUifTWSbeGBWN5+R630STXPOvDLeAuOLErw8+INZbsoniWoY1nvrHHBcSuSF37ZcuJZuXl23gKFjO+3LRbxmo4JXJ25HOnWtlAT2fIkmtJyAnEQ3dYrpQlt6C3y9VpFYYdgwdkSXlGu/5iJvu21+L1eldPFyEKAWZp63076hKovAzcehojTI7RjQvJR9PFNX3ZF5D4wX25Ow5Ll250s7wGvwVPbk2PKUVGJl7grs/zLkisWJl4MNDaK6X8VqYoWuGRsK9FaUy2GdVtE/6mCgBR52dtIjTrMR/o66PdpyDb5e64uRMVgH6gwyvls/Vs7VkseqEzPxJzAV4Qg+uqaHexY/8ZTFb9zUsZf3FSaaeZYT0vyTnpYoU3JYm5MTM7h+xRKdYn2DnFfLAAv4XmGBf8euZPmZzJyk1gz+REOR6VZiWEMKvj94rf8usdvz693KW8iviPeV24e3V8pIMojwFmu+eyOpVfM4zTIBviUJTI7G5Fb9fZ/yqXUx4g6l0pOzKmtNpvUYLaenyjjXH3orGG4ECup5RjKQKQMiXriXbCQrhIRJ8oRk7hz4jtk3/R1hllJofTYrllBNe4eBmj4vDJ5NPR+CKKn0jrrIOfbnu+AAAhjFj4grLG2nEO8FQwgg48gv0xNx9c3vHpZXQXaR1rQvVU3RdnsToE0tbOGPDOESkek5j+VIrvcft2FbKLlnknLDwCqy3eihKgtIKvVhm+dQnKZmyChBxMsyRvAbTNU+HAAu9TOsLtkmX/DWufopxiQLbNLObRaR8Ja4HMC7jHhQIQ9csI9FcZeCyWDmaEV5HhWXvOuCDRPjiTuuAHnReloQqrPfrlnTs05w9tIBP/RFZ4A/V3tJx/NhDtKy/fW5fl91Ceh5dlGwCgAzlrLl+DAq7Z52Q+6wX9qwkEO9KBiksjrGlwaXzpZlx6I+mAwXQ+t9X4QirBa/jjV0EKLAsfhoorcjDeWP3UFDouvJvIQiyC2LVIz3tb9oTyJ2OO6fMZZ7VO8PrjCyJPtZ4IZNNRMiPh3s292JR6Qv19RWPIgiRZh9cnPaBJiH1CQcnQ0EHCkJuQlChxcBZC5bcD03oYShPTqTn0+QHKGZ1ACbv1MTdkeBrXbV/b5qwHo+pyGcAu+C0W/GiCglxJg4BU1wOOmHmQ/xuNcwn2d92iJJVWGXYMW7cb5KVXI84SWPgyMlb6ewFrkBUuOsjd8qm28n0kjKotCyd+aidl1EXXhj6SKaEVQGy3LP5+wYLVZ6vJMoNciU/Dn0LEPeiFCmz+XzU3q7qQA38+4Fkyl1epH3JEz50SO7F7iLGKWYGVSAvkdn238t1zsYAtMimqnTPdJvD/xG8rriaLSt3IEaMqQB0A5FBzW28jVs0Jgt4bq40HEHkn0eiPjxAZ/R4fvpw0kyHYGwC5xGQfeW5xOH0rjVJcql6r/M4yeZBwqrItnXhZY39mUxIJirWXAKdh1sjiBafqKM0TIfLrNkGWgbzyGtoCm6j35g2Fv5TFUkhS8z7wkH45XMR8w9QmlM12yx33DRAEw/6g7qJYqMY5DEov1+V4ve12QSeyRI+6QwCxXIrlYVjmstLwplycQ1YII0Ve0aFyRhxybxshf7wKeHOBMf3gNugGmwfg20nTnZ4I6Jmtin7OgJurmEv3rPSaWo0YNIBkk3rZYRCJmlwR+R11KhjamPtiocYm9AE2LJJO7/ARfWzYbjhSntfoZnonK6IYjrQ2/eqpJgOmqt+0CIb1ZqPpnZOXyc/iZj3TgrhwWR/fkKwoJBVVeYPp4tdf8aooA6qo0xTwPsPRBvRDWjbXhOlzc9B/hrO9AStzkSkyo8i0210AkxTO3pe3KXyPvS+X8HKecakZgjVE+BebZ6SfWGOx5YNhQ0mvx5fbY9+nHCMgjxzhQRaOB5SISkimllIMwzyKzv0EoP62kN2SZseWfWbB/sV3AwvpQ8nKEnVrcCaKUnLZ5btXjGUq0jf5zGaa6a5ZtJsWS0om/ajUwxBpgPXjPT1mdmuD0us4i7BgrAY58TmYr1S3K3/VxjtSqy0Ewntd61u4HluTOVS+4woXYZEyl/YluDy4nFOyJ32Vw/1qSypbG4v0e2E/gJ4eQeoRhHeQXq5MR8Nmqltlx3N3KdNbOS6QBn/g4aDNr88E4S7M7k9mJbrxlA2W1BXTk4OYrrpRn+5RCPM8rx77ts7+KW8zVNBF0u2duW5PIG6toUgTK4pzV7cgVopp1hv26XGf/KFr14bhlfwKcBzJUZ7qLY7TdcmddE+wmuR3+bsvUkr4kuyo1bD229mBH3LfWiKNWV5MJe+bipkbkRmpkKVugyuzd9VH1VdJ0dMfmcL7jWSMxxwtPCpJryAUdB9jHthAu3CDnTjhRYnikHlLG2aTZZRthvYMEkVnkAcuK8UFxDMwR0CJuZll0nxGd9siRScdbf0Gf4tgnIwag3Qze7ZdUlQPcQivTOj5sJ5ddVi/2C2Ve5UtxHjO/MMVZSxGCq5dZZ1KZqgLQJ8jhm07FbRbE5o9N8jaDNAsGlKF+7IrhSqMDZFpoJeYvqyWyK36XwkDCjrSb5GMQa3sn0uFrkjJ9dHFGniz0Aoe4vbTMierzTK9u/Ym4P5fQwRjk3ePpkfg50mGZy6htkB6cCb1o0OwxTl5Sfc3NCIN6ngwVWQXHZLFOKiADx06UFeq42PuNTAUPENcyoF/bkn3ImmCn/KRt/LJ+qjf1Z1WirhJxABaBtifjqfGkBx4APFjeQEBVuiDmIShmJDvx4wTUgpatxMepcDkShcTg+8ahYrZsdIg0KO3vE18bXyGcfT/vYfje4RtV+wki/tYK1UkbLSOiapNMsMcMjMbO7kAfmvuQ0WOMPk8+iCR/EfGG3IQPl9NHbUzkesgH+dSYmQ0dTYcUee7vF06SQSLKtF7vH6eWSXED0doMhjwPQHkb0ZyZOtnocsXBrZvdOM2deMJ/Bu9XZK176qpDRoIgJS0inROhM/2CkcB1CXmrlo7CWrYajkn2bcpSjeFNVvDrdvWFe3vd3hMb4X/GSfbNoZhOEa/32+sv06WEmAHacnWPt7FcFxyIXMyqLCvb1rTYqnb2fNhJD2dwS/XOHXTmhiiH5kGSgC5b1r2z7VrChSQ0B1XH07SDLWKQw3/XhapWZJ+lwklH8uY5ZoYKuCFAekHojwVJFLyvTeENjl0mAd8Dl7dRhKruILMBeHzSUyVRneQR02XezxSgrkadmOIparTzVH17O6WUx0BX7Y/8qEr8B0bKOi9YhAD673PYQEgqiViBnWT4r7KlkfvRP+x72A2mWuiZS/AqJlL4XotWzU4fuLNbQuhIkJYMi5vQ/EyoIpA3ouyAV3NrjK7oRwPKTuplxRPdPkZdIRY3DgT/HJabEE6eX91ChfDH7S2WeLxLhqhzPyKgU/qZEnEGQvmtuQgMv7KN0+HUjHM9W24rpu9IJAHp/aVssrmuL0Q1WhftoK1uw5G6Jg/mRLgQAvx1lMbXqugdfitr2hza2/u771C//l9Njt8snXbw81gpj96E6S/FIo9C4aIVUKGCsqijs0mGRczN/7a3cjzBE6qcMGwmVEbwdMq3GqF7TQmUvxaIUjg+12BlVhxRVxxq63DsrTuuZqk4zeqSf70QFsOgOeqqmM2mawaSQ1I3T8bAKdDUKtPiELEfj6ANgGJhbrswbKzI1+c6gE0DcwkV2qP5Rq6vbtJyeTzIPnsQWR6GOEQWzGV6EPLv6w3CAmBKf2/ycVmlMvOVtEVH4Rf6x/iBSBslu8r6EUcKRkgZwjkQ5jsmn24lOYY6ChksyGUGSJfzYwwE3z1l4jbOl2LbwK9OmEgO4LU5VO8k+1Oj0WDiqmNIocbw5VgEI41hLsxo2MOwgv8yM1PrV0+6fxmXwAjM5ZeZrPbeBwsMVHGzgdv5W3s4FVr56DjlU4kEUpkqGuRnL4rQrlgVqhE8lbitVZbbfewVvP1Mb7XSD9ex/dFyX5kChO6jIawUITC4pBaZBXopNiRS5o2uyeoflYCGo+TtMQ1I64wTWFhbYGeQm0fHur/aMlTyduLYXOP9UiV895jvD5pYGfOGtwWEnIU2yGgGnsjinffgdGkS//Y3RYlthA/opbc6k+76MKYvyWQyLn1iwFZ5DUhay37oj7u2Gnd/8WK0+wlRsdnawpGFCOnJ7niSzUmjQPPFTCOIIzRz0fStTn5FQ1u9YGtkXNAqcXMmDjk50l9PraxsyjwOWuHS1sJJ3fAmu0GJE1GYAME7GtY3O/oyNcxfP9g/CqIWzPrMbxDpss2Iub+OP/XD1x3BY6x39A2lSFTLSkm0b/PT6Qt+PSmuXz6ya2YJA6j3WNX6MmHW8GMuDwLKJIUfnno+8dWVKUrB+CVjMHPtBUxmiyE8mYNTKbi3WFgU1H17F0WJWc/0WLLvUMeppCfD47E4yClCJ7hJvWsR5G6Pt4WewHoWIfg/ER0MrednvzlRPTrFZvsNahWbB8YsCg4K1iO5hXYiNaPa29Ao2MdxMouNsHUIZ/Bdgf/co+JwoGbCy4NjdpmrXf0O/n3WSI2Oht4u/X3dFi+GOFOMwWQb11y5UgulWeHqE9+ARFnkvy605bQIRCwtLwKas0QloXPjb9Dn2VoybtsCvob5SuD+mBkziSRyChXVx+pHJdgAOhJaL8to+kiVTKsa25HHdxX9t/8DDmtdI/+SNBQOpiRC468mhYrm4veFITFqokGhLU/0hMZZqgYvcMbfZPFrF/4c/jGJUR0w0cPGmirN6Z1oqxD9HY/pAORS0UDUUjt1wMOBWrm5Alx9Aa1tH8Y8KODjwzw9j8XKBvdC0MJljq399mGKE/ZpF3LSmW9DQ2Ds4JNfk8IfnnaOUZc9nlsSUlCnvhfrpoo8kKY/TagQ0nKcfMzHpPw53OSrK+Q5ir8tAowzWgw3d15v2W2//DoVnBWeBdFC14dPvbTiH5TPmaI+7oTCEUim0YPYECbEhnZHqhgd5PRn/RufEBKVgEsopi+UbKKuNtnrTvONpq2J/z/xnV9sswK++UZUbx4CBl4lqNHm+vowQePeZ+7ibq1urfwBzlyfmhXOHy/RR5UJYJnj0RYCW96FHkEFxpC6f52a0Hmt1njrhwZ/fwv+iAm66+6DN1QaVIJZh/qX3aBFj9bYb6YFMwNkhGqW1jF/1ME754+rhGSfvuvV174rgrETuzLQmMGgugxNzpWqgUpCV2aDaz5IdWTGzZdUnfh12ONLRX2qDSi3o2kieFtdyDU6GIsQlF2cANQ9ZICi7zPw62nt0X2t+UTezasyRcubPXLOWrviZhyytHw4uKVp2ueLXrbQM/GBXj9LJ/kI2ENSTloXb2nK4DFoqc/x7eTP0nY453HdAn12gNhsd4ckJ7KH5R4xEq52ThbeDYaKFwziMHXz4z4LWd8hhr3gBXhh618ioIsHlLm/ryE2Nmu4pCZFytjKlN7YLsGZK++nARojyn8bO5WT2GqQ8kH4FNQ/1tOiYuBGumuYvhifuss7BL1suuGfYvVtzRqKhvyRhnaXbTWEWziWPsLoPbUgmypacI/zfX07T0wjJXeKh87JeASY5up5KAG/V1+5F1ewt5FXXfqibnSopY863PdM8q0RdBsCtqD0Eu0gQ56//+lJrNTkx8QVjh4QTJFEjcrkd6mnj7bXST2ghT67kRTFM+Qxk99JBbR7Yk5g2bAxl2h3SII1/lH5OMpyvYhh6cr6Y9XInia/aXZbIiNnPkNxixCOU0CMbQULW5ur1Z7FloWtVSaK00TOByPCh5nI33bmIDOP25VvcTNeBoacwweHNgmgemKgKgPfJg7CP1cE6cdvr9vsm1x8OM7haaJF0Rb+dACcNzsnsmECDFSNS224MB4Om4YgSPtBPbXu2yp2yJIYTIhErSbOmmWYrk4Fxh0ENKFR93SHyFN2WHxRWm4sTXOG6/T/DU9k7MJQLLIahU+/xs2I+73tY7fuLTlr/BNAt9zx7LU9gtCgkKpJwTVaAjKzK+g9AYX048XxjV5+Qx60FNN1K2sUT1UKu3nFK0KDPKsESi/1ynxsRsFNCfdbpL1LyZeCcQtZXF5aLPRg5SQPiqctsLQGDyywBghwfodrQRCLwwyeei7f+vf0QZ2ljU4uGmExbNqVkgGZvRMCFwVp4BiKSRMAqSKlKP+8qo1SaowUDLQDbtPGEJthPybe39K4dm7xuSX997B2jVcsR7ST+e/isOz7XyMD/YPGdau/ZPV5Gmutr7ci9WTiKsOIAp0tC3oG50Jfgq1S/oNoAVzaa3/6DAslncQ1762MPp442A170iST4cwYZouc2Z6qMXanp6JNDeC8wJZNIOLO6t3VGBPvVomCq5Qe7tV4M0ESbHHkwq8+TsRrYxUDzcChprtnpZc1R+ooIa596FB4PjlDulX+ly9nPp9xfUbO3O6/J2DUL+FsiLVm1n/wQ/n8BSDEbiTBck9pv7MXTzzIJMUXbSa/auEDFDOzWYlKqtpD0rzaUjSzB6W9Xi9wNsar58+7bht5Tpsarw/MLL5JXxBrSR2NqlRYmUL3YfyC0PD1CdwXQQk6ERidccbu2QtnV1oHfK3u/y185Gb4RKQRp1yGARiJ+glkzaeAAdpYdpLwQ4Xizt2i4lNJTjJLbGAU0IXsOXQvix15GboW8nR7WTaf2XVLC6jE+3CYH/x3iuhLcwn3gV3tDoNnUzA1SmWgjJWLFyDikUQ16fwjljlOJhvgvQ0p1IMVwr2jITFStFuUQ69npoGNqYo75GKHd/ypX5nfFffDBBcWI6CZVevESSKrhu+l4qOtLtVlmdWwLgPg+ErYr0LVmfTjip8CGVukVydm2iy+cgzshZnxowm7eYePVArOWeoI8FdbCD4+o6puF2+RF/v4yB5EsyNebj0sfkpRlOcid/7VBzQmUoKGzvN2bqLarlz2UcIp2DM1dSKyJB/i9U4fKD8KqTxK0O7hh+ejfIdcF7wbNVYi+E9O8Y9MDQohDBItcBUP7T4SgJ2yUliRwo5jnV+vEHVxecI3Qoa+zuTyHegl5hFLn7VDbcf+8EnFfMkpZEbtmACYTZpnsd4h8s/68ryaSmbSbkLc4r/FAnRyqnhOtGG42yC77NI5UGwmAKyQ6Ia9FTIh0DWTPQXTJ7d26dq+cRHuHZ48j3C5FOI/Qc4qBfbao2XmHy7BciEMbMyFJkLWVUjIFxyXSb+GFPLW0zL5Izm4pYQaVSuRDdzVySLAmAeeCwhSfI6YclFPCxeTuOliZyo8xZyaVkQ9Cu4MrnokoG6M6gXl1P2HyTn8rlO7EvVJwOL70FyYMv1/QRXmOdhA2+NdtFhX073RYlFDhwofrY2nE84EiYfF8JxmfynHSnzsVZ3quVVoehQNHfO17T00bcI29XdUsKrWpCN2sH5jAZfOgvNgzQF5T4Opg6IELGYnE0CROpeDd4lMzbwSXEpgYa9OaFmM1rvNFw3IVxnP+yHuHNwLU5/i0VllZB77yPc0DeD8JwgfFEfYsUGFYG90ffmOKRTUDMxsE5lLxL0eFL2MuRSJ7LtMrQuuYXoZ9rpmbujWWqdYIy0ZYEQGpI9IVen8CRy38pAcnxEPUqf3gspWi/UizT+KaxjeaoBPbV5KxTVthWLa5S7Xwsnu1MjgF0sUkEVpXjeVUpxXEr1dRoFs+/Tk29MMvol1VgDS+dctZlsTkbPrjD2JUSjtuHHc4ErK+AWkfp4Zjb4QEK2BhcsYaoWeFBwXoytvQ83hK/ghURrDifVLribEtdowQr0gqLgvxXOpkseZpPDSt7iTHmI3WYGFljF/k9/3UCbJ0G7nfkgw9q5n8C2m52L/CjWnAgHGwAChf7LnKd3pxQRMxPHDtsZW4hn1dtE1Vm7p+PSFWnzSoGFah0c3WJutDoZp9PBugUlPQRr0wvAt+1JAEM5LwwKfJLbg539QlPMppRHfbzCQSZQKIEDN60JJJ5OUFNhVWwjrrqw0W7JQBY3vc+rXqyUXvn2WWib6ka6DI+xiq5v7k/2GCFgLjkpBNmA/01VmdUO2dtRdxr4lEH9lbDqvPQHSSI1dwSElwbgtAgCfQOFqoPjwn3NUAFrEbVwVRvd7SJ3/nE/j8suoopWBCpdzPgzDunfc8HYlIuLWxuiBamN7+WDtIpauxwK0fzVyJuf5lLaXEK+cydbiOqpj3R2PsLTATW6z125UddchmsYpliIE8Ef1w15yIurW0k1icfJ4xjxemdWK/5y0QEaBCqLp7xsN344+jUR2nuJhmRG7dKEwBWwrR/LjWHFaw105Jk/WzObRIwpfqrmGfjWuOdH1kXBd0wWMBk2E0EFfbWsRaoJf/Rh2D+UyoTGt98ngOvf7HKJvY8qt2uLVAY3oJzL/uzwQ+sSbgLyNyAWizUCnTP3lIgynr4C6lMNdMorPVAh6NWRGwrGX7HVyCoU1GrRsbYE2Q2QgM+olAZ17VcWqdvlBwunqv4veobxR9obURhUkXsi+KHeOkID+0nW/uzIdHxEQaWs58Y//31yMQ3f+ObKxbWQQVa1VcJTbx7pCkHpzsrjr7eYwCnRC3vzyuT98KlMxVqxCepkUm916hP3p65WzzgfVasf0JNOdZ1zQ62JOa+yChZk45YNFH3T0e1sNQQRXnyGF78G3p1tyGAB7pqz3pw8bcdVDhX4Q3ucS8FkIA5jdmHLfGVe5Jr9wBnsXhh4y7UFcORSfbIHw/93UARCVbRcEIpjPru21qa1335qofOUQsVp6FCjTXdmWhvR2/ewI5mkaFFLb9t+vSa2bM9mNcSFCN5vjcMRwl9NI+zNyAwi6G+6khKxz+LGL/bERc0y/3MaWQ2+Zyo2uyGUhT+mqby1nEuwMbGetFKHNeVm1n9YTwEaLUii+LNI0/sUDMcUgkDPaPEU7jaCk1TwKIZ0WZtjenb3Bj3ncqmkwLEvEWumrsji9+bS2ioVuu/h8xtufoHQVXHevWwvjMLVVTkYU66aLl5gDpjFPo7SbQWtxWlmZ6WFyPvgZc3ieTGZFdnJ8ZEMfpsf1mOQeUBSdOk5uh2N4w5eJTBSQCLxHl6aJAHlOXiyB7NKz/dpjLUuRpVFNG0zZlMs8vV2V6GmZgLgsPT+ecB7lTO1P0cM4t99Pt2G8unM6OgH2XTqemXxwFFvpxnXR9vkmAuQ2pzrPPa8vE5ek90NTyi1a3xzXLC3TfsddQhZ8Z4JdazuiBIVvfRGYxN+uv3IGtpwLMMgP3XdANvUa6NqBld0xIuQSBO7WmCkeW0Cw6wEXCkkaelqh9zdxoxUHMahRqkdrspp5cBA0ARjI5yFN5NvfOoO2q1bubHL/qjPABf9MBkvm+eyafn5RBWV8utwYZcRlt/HnXHFFj9tJYOLmqr8b1/9L9CaQTolqIo9Ztgs2snTn5JLIb/OCe/iufU2rRw1x6DYC+c4hfxxA62zSTOFJq2NLETSjlQ9ZkeSPY2T68IbfCXx+hddI4sFgnba/O6St/pqBZcrshbGWEX4XIg9T5qKqC7ts3hDHIAKlwCz6ji+jae56N7Q/2w9NmtQQHrqzahRGo1iytV0Nf+rO5hELaYY3B/E+N8e1BmJKoTqSDnbyWIJ5U663Z6n5bTBziGsJeejcxKsEusavsUwHCTZXRP2RwfmGp6wnl/HLLfRWWg8tY7/JCOLiWJWtMPv/BNpYuc6PoCLg4uF80cOAchYy2Rg1VNGc+Foghx/91EkReyiX0PAy0OXqdq2Rzrs6ZJoiBe19Vvy+G0b6qYaCIbMKLGEc7G1JtKBzDsBmpp6IEjPaO+ZPZtspnTNYQdypaRwKtZDbLZVD2VLQaOd9YENwxopN8KWNCWx8i0UwZvuwnchzQUQvpk/JXSZ6kK4Xz+pVl0MhhO+kSamNTKpicyqlOl3BjF9paWOwMgHWONZyQtrTPPbq5pe6MsHT8bZFKQv7PEShzUySrF6t52OMdjM5ZGhaaffK/76e1Qt8UCZgCaeX0YILaEbWijfdWk3at/pXc/FtTwjAHfTp55RsfKtydSA9MmPzfA8joS3zYn3PzaqSwwYLwZNiwICH0ZywEXRvtfaUzgJSOfRpck9j8udIrfltFim9HHpdVY2fd61LPj9oMNqlaWYm1n3afvsMJK5uKwEq1Qh+92oMmjcczdPDE007bF7SREYEKgH61Nwao7wsQbtB5+rEgxt8VbrTmN5fDuoIIFeGmtoWAwW99eU3xaZxoOyhtRQF5EncGi6jp3moz3Ttrw4zZMy8OxGIIpYhTAzW51oBXuRQYNknc18Rt5IAjJIHi29oyVQOSdDpwCqmE3n0Ej5wXDnH8XHGhEgdtGYoB1LQiCz5SMgoV6ym+K6QRUkOD+ZCblJNzGuWQfBqze7ClIT7On9Z8YZvcR4kiQKLH/UCrjnWYSDpIxpuePMfg5k4Y6HCboubF1f4W6GgSmdWL39B0/0wnPatnSVMejKnqdsqcrZ7pro0n8E2kMH6sfmljxktoo54OPuvtkfYE2DVM2CijmoRQERiDzBkwwmQ9LwSjYnnBVyQe/T/4Av68LGs3UBS+cNuerA+ZAtKAb4qgbXUj4tmIolhycw8hrAiUZwxZB0jmcGp6QGKoDQcoSGAMSPyK4hOzJXuWoWS2ZK/5CNtQrERR7AGNOAde0n5dzghuDJaBBN/apqbcDbWkNrcK1oGB++m3XJsJuIFroSvvdOhXseFB0U3QecepSJSyKCUrg4yEExnd2APLAcEIN1r6L/iKazQsn/4aMQfyeFVcVJbeibDjGxmqr5RGdw8HQ7LT+FO4jREh9+bgF0zzB82QdoXv7m1r5rF7PTJ3y55A+ygKa58W7r6OVRuGzDqAzXrXktvQ1DIt97ubmllbD1rlWVvSLb/m7tHdlXcEh/ymLL+lNpFErBHW3hBHdJ8eUitH2GMKzEQiPCLE4LUBgrhdzlE6CNJ1Bvm0zsRAbeCS72WdyH77P8dEn5RrbkCBzOWj4Lz7S3yHd8ZVGvQTGfBxMatDRNkqlYoDcTe/wf0mZOZBadiZlEtnz4Fu++5N0pRhxDokplM6PFkvoKTnngt9UTuRqAyNwrJ5O3yWbATmP3/+4mWl9HrswfuVb8Xq+ox7/7YUc/7lDkJ4gwatyN/g/qjX4aZSkzHLvhnVtCr1kiIW6Tn563ojePYx6Q2Lgi7XZKLlq4ceFihRY/IWqXTHZ7XDbDI61hgWaumbgWar6M3PChUUTCbOVFDhUESzS5IP5rsHCrI9/NqE23/7jNb2a2yqrQv3g1weUGTeUdzqoyJTGGkEDNjv60xqCezlptv92x4ZiWUVBMIfl6jCRuyfhBNvtj6rnt22Nz/XeWH1d3Bo4IOw5Q9ymtLkJOKAa4ApOR4n5b1BaKeNK657sjOtZmu+e4W6OKIX4IcJ2mZvWzGJjeO6mRCMesa3siP0FI20YG6hHEcPM/uhM2VbidRJZyZFEz1EMAoKCoC91r8gWpJHbaCiCH8nvv4ixsx4MKLPq4HSoAkXPAoy25BBM0lFH4DF48VU1y0aLSXq7nkb3851VI0PIzIN+dJr9SSPvefHbxt/lZKDq+NLJ01aJe6FGLbUQKXlmFDaODZ8HtNf1dJrgdCUOaNMuv7l57SC2GT/J0YhR+u95zdx5hJvjBRFi5zhSkvkq/kxFMwqlsQIZMi7ilK7L8D+CT/VYVyHWyajbm7CV2FU7+AQlWJHJFdr/QSpZaH3Lnz6grxCmPX75/LgiDm82jC5RcOcbx8S6cI8HXIN/cmBqQ+5/JmwzA6rKiE5oe9u5AVFltEWctdRmLSde7bDvme0jV2m+jGj7h+nvKvSzRMDK+K96LPKOaAo8oWBKUY9vKHWm8sjQO6yDc3VQc3LkpiUP+I117VkXTKxKVhKUXkSEuG8eRRlM3RdPHfSlkQot4ns699CAtMiLSPyKnKdxG57TrRghEMOSHnO0VD8TtVOtej+RXw3DXr2G+gaq9DbFtVGLDrOCVdj4Eozkuh7HM+FUeMbgdiwI+9+p3mXBrDtMxZnFKk1p1pfDAwZkuWHRT5T7AqyqetdHCyoi+tboIVpvxOqJn9tD2RaesO26bwxFoEpDEv5AgiD88RbQY8iz0e8yAeYJgPt/k23zwMagPX/5JKs3bZCDKRDnnO2eT1Ug2a82nkpG5zWbSE98pY9xhIjqQHKgiZ4wvuH6z0LZTHYplp450U7MlaeM17o9qIUKf07KLyUNXSaozADQvdR+GF6TVJ1XN5ytqRH7GSSeDjpG+d5GegEc1IltMmYbH+qNA5g774A1yKjMP1eTJZvELNfT/A0srL3SwKGh1OR538lWgIWsk6kUSeUKsJxz9PnJnYTkBg539bKHmtqx0xiod7z9QZtIfUQyIVeogZtsRixw7ECNk89scsqKSbyerWGv8Blna70ZKJuhMEPY6YhTfIhag2FYokX3p2NtjkRHH1cYUPRxgx9MQOte8Cb1VEdVklF4+4rNXTUd94Y0S21tAmEkQUSoVyueAVpg0fjCVHNlPeSI01PNhcpksUu6CD3/YRCY7iRkKyLp4/KyqbfmYi5C5VG2jrm4XdnaKI3gv1SwGKjPfyFigQD3s6L4Eu3b/uqZ2sHIeSDmacKB2Y7pHW0RPuv+UIcmlXu6YfiDod+i+LmZHQJlGgZCBoae/UTZbQyUAFlii6/hd5AO6QBkkBPraZAyGeUpvVVHZLRzKiQUR8e0nA2Iza1MhElcMB18hb+sA+T1mWnK7OjS64TVdCCFbhV3YAyR/QYuo/UJyIC6wsmGJWgEjbCPcGydnMO4QtKCkx0/Ifmr+gIzxbvTA7HnWuTiDzW9on7Kblq6aLrwThl6y4XrlZ+cjVT5eUCAh0Jtr2nHBhZH9LaC+uGpLEVEN678xPiAN7kv6OegMzLJZsFuJLvQwnIFOnHWu62vmg8nnI54A478QDU/WJHDo9jITI2KyOLWnHxQTfwqEL33HqMLZY84heQ7oM+6ReDcQ4MhbQ5JZPAPtEufTtD8plZZMrHsPH7tNqJp2QCgLjTHDeitGSfUZ+1jdTlIM4V9ABUYRMYaKMoRhvwKgAL+60dbtxPmBkbPveAnHw7et1FYgt9jAKwMraaLSejapoQxOnb5UN4p44d30R+nVQ0OsB70vL9meNVAxRJjLk3BeVNHwgDjxIoYGJrVvGpn25215Aojjvu/xaPn+3AgKHlGf9eWTHGqFr7ZphFy+APp0vRrmeTNvSXPCkFl902EOYuKzjNpEq2pefB5PFsMtvRqs5fMOMLpOaQFcwsZjq3fiqrtDImsUcFcHKidFZGT9BCgc9af+cyU1dy2W4l9XKLMsU/1nx+KFAbcq8+gLejI0l15HBa5M3tlEtdkKkII+Fa42YvZXKxBFC4cpMGpKquAfP1zPzlsarxvWeWnnTli5vr5SiK9N4aWPKgit3qPzZXFzI54hYnkzBbB5SYcQjg3V2hM9CmJH8XuhInW5DP5IiWnaX+GVXlB2f3Rn9069tZqrr3ptAAmcalZhK8wYLLSEB/e2x3QoKjxZwzbElnJWT6QiA0E/q5tzvN5Md46+iYnO5KIOFNvs/3V/ewEEbxmVSy01m2lsHBLhgD5dhOkOJi5+alg5Rx/eNLyUbfZQ7xrUU9NOhPE3sgYvJT0r3JFcJ+LZSi9TJGXdsDFxIz1EXv5orTsoqJpwJd/C2WYHA6atO/C+itc5RFTqvLY7lE0T1t47R3IXqF4NHzGpUeZoayM1wTMhj6TsER+ueAnZvbp6vcGqhrbMtUGplh1N1A8JqOBJOYAqHm0ATlP6XLY9SEej4Zb5WZjwLsYqxrbUHeWs5hjx7QXLTkPYPJlGJ8izNobcSC0/2biH0bM95BiDuaY6YLs1Q8Jm04R1RrJl3r6Tvfwl8y2GGaklX0DBfWvAGfOwxen2bTZhfkFygJlYQuxmOEQ5uSCsNKBFZsjcdR9uFJnMP6O9jNT0iIf0xm02RxVLzXrQH8zZLb+r85IVwwxoh/0xpgSIHWmEQzxye/bYGfWx+p0K2FAxvncOH6Ef1NYo+ZtbpjbQtbnD5q5Q2Owuxphmv2ExxEZSf8NaVRyo7v0HQcNhn+QTb0OBchj3tioVeCpvBBm9pOm8JIguP9F4LFRKk7lZcpB2ewbgB/mlhI+zGyWI5f35UHNZTojl69S8cQBCG5lY8IBKPLRQxWwaEsHQrt/v8dVfCBcUAweJTQ7wm2boPdQnfFsm8Jtacbk55pnwkHpX3D9u9FPIgyTlOte7v+BZMPnlGXaHfr29GG+JL8f/txWUGYsFZ7OAZT0Q+Oh6srVjr1mxzNxio/wDx5NRL4ds6PjNss+r1s6rpqlVj9auTufJsJaSCpeYuok7MfX5a259YWeNkNnv3uO2xNGUO30W6D5FLhiDinek8UQmyeyQW3HCXVHtlZWbPlkQzdXC/bwwz0vRr4Uhow5bmeKXVdNJdpDqFnHbASrE6OzYN2H44o9BXye0Yz8TKCP4coGexadD11bIaBLQDamaAsW5D57Jz3aeTgRo2Eyi1XR4hoHfIQrH5GnZEvkBPlUvlJFcGOSFF5TElW2wIqKM+6C3QorZ3wM21ZBueeUJgW/fPiT5JFmW3U4DUiGg+M8sZoBCWgTtDU2AR7Cvyaf0UbS/J1tDJSdn/CaSkOzVp6xn/JR7YQF14VjBYYdLE0S/bWGV55hbxVLOv/xMk6K6A4ezvIAWlFPZaDJMgMfoVKHuy9zg0vwj+l0PngQIBFTCdO6aZKXvT+xzlPiHecNwwHxuK7A0JrMT9s8E6PB4B6v6Uh1Ji+HsOIs10ICNOKcmnlGN9Yy3INn1xIm6Rw4mLR9/3TeUYvqeVuULv+wiiBh8qiqrWmDrdbJyBqklZ21kF/G8bujntHp+/jEQjsI6D2qCXjV4Sr6++oZ25vJwBxp8+Pq/Ekbl4/uuVn00Cs4lzjNlWTySTKz75A/XCBo4I/TGoDYP/rc56eiIm4JF7A/Z+GfdZKA8NF5+DfPvEi5Y1E6F7qJeDxyBwBEnMnWVcDdNS/L5Il+AiBffKuUFcUDgIwowS0QpYGZoqWKvK4p19jBzRvWj3zOvEQZWZZS9ES5uDfUYHnC6gJhjyoj85l7balC8eAHYmsgbSDBQWdZywBSlIb8V/14T8iHGBo1+OjXqVDlC3FH6jAfgoMMNV2lamfg5ENubfvYMQvpFx/F3vHPHDHnmSQMDPDjqf4+nRw65hGoglsW534e3URZJtyTR9DmgQF3l2y+87RrwAxVQSPqbumZdXHcnvp65WK7CriHqDPHpfaxk+tcZ1jICq49ifag4dL0tnsvcGh6Np237u5ostPm7mrBrwCG+fVP8PK30HMIUiuk8UepU6BlvtzMT2eb1bpfqmfmPLA9UNoAOdW5DVtuptNLeEqZai1gTeDgtggTNW2niw56/SsWOmMRbjO7EQw7qFDt1XKgxz+9F4hJiuHry79HwruPCaSTSfcFfq6HjtagGzcSuDdsIAirSjO9IiFLqjXEvdU26bTUtvbwFfo/xExYb7KHdib9UWgRRUlYAGv2pxOx2z43+nna+70KGyRtVNLA4A7hXb2L3Quu2tHNZYgI9Sgsfl8nX6f7s1gMcLNLE3XWUy7zwM3zzd6In/jtT5A81FFlGWJbzj9vd+UqQX/SndMw+DzxvUSjVkOSvLjYcZkZzopSeXlAPJpV6H1Wt9deU0/UQ5Evn/Y7b6jITokF+inVh1cIqCZvGo5JWBJR4QsJkUm1w8Ds5ZhmNpDV/x/R1VMRpD71XoxibRN8kRY5Il/1LY9yJylM7wcx0xItl22PW3bhSH1IQU2c66DlZGdo09yQ9ykZsRyUK5fs34jqRBuFug51OYJ7n1wAbb6gtPA95PYMPG9l03ZCWS1wyvEtlWWxPHwH3t7AwzxjyJpYKkT8hkB7Cb+SaGQxvfim3uOlT6A15IbK0Y1ePyu9xkg0x+zQZEiWiuC3ScLorwEBx2okoBuCU9BWyrt+CYfHQUVBcaJwl7/ehXgmEQ7N0+AYNV8SxrKjZfcAuriRyAmFWzP1q/dY3Mz2MjTRBHOwMEmZ+pM+vJUt+xRByAuvqniNRJ6AoigDMh17pGTWOpY2AurVeXkbyoa4D058bvlNIPrr0zWFQYeWok21p+TdDKIePwa240gb4Vtp2wnSar3IzAWxHizynU9P2cC0gd8MQrGJAOI9QzHpfi34f/DiASCKVsGqFJxdqy0sh/hraxht1ZAEq3JqjygnvJVxqJgzs4unEaulaqDpyRf1JpnpR6/rEkBkPbeWh9dBAKTu0tmwPa1TNOjU818HihqOZEzvvsZ9qHSNA10nmSM1BVeLsXPdF77Vcncdf6str+EF8UCds0J8o4JGTk+Nu8V7n+aImxdhxwjV7b5PNrIGnPcujfHwbBodK18uBYYQaChMvhvxy1m2S81dAZl39Ci/3Xmb7Rm5OwUXcf9KaalM/QLOYcZvaSxJybx5NmtFiG7z5MGuCajYBuqS75/6XeqBrl3R96JGwVNmfEolWO7KI42vkllrGc1mOWvGgvqsrevKhrmhfMSj340YZCJAKDse60qx1epR52spbMod2EdpGat+kJo688MpWHuB5UCEQgweWgSmiAuKYkcKzIwd99Sq8vBBpBMPk+3pOiEwXIA2uMMZhwu4z2bE40bD9v+A6fh1Ww/aWm18KsgIboJWWXu2kNSS9Rr89h366Rm+luB2/qVHa80onro5noa3LeUJpdhItEKi+v3+cfZyQuSyY+0Zhv5DTG8+eMKHB5RxcDWb92WkQphoawg8WXG1X09qfpQmDKvWH//4YbhOAVxgaaohS7YHiRm0FL2NorxOXoIi0/12/CLpzjLiRC6yZqTXn2+gXd2IzD6BEhDbXh9xIT92LxW6VLjhLTGr4ZfTMYEme6qchkvUDQA9na+EUF47QHaHpJtRCQeCpTvkzc7g2RUJSMNXkz8Yt9DlIlKPg1tVFfxLiYn+XflF//iEyc/lpM2EsdVuaYjXAjIGTF7zG3LqXJfxGLpnnI818+IzFe2YbSnMJZyoaRDrtQOCN+6Ub+Q05xCcCuhLk3C0nrXyMYd8w2ydLSr68PKiPpVM0uXMybWKwEV7dAn/MuVhu2hZGkKRTszD2EHDVBi3xDdm9n33QCwaT6Vm+RZ5JV/Q/bp9OvYnyUmRn5qhlIKxDEIQMp24uUYJautlXJQ4hLrOs7fSPDSVWAvbn02Uxd9F81pRDo+wcmonQOTqIMLDMKwI9zywVVQcdVwIj8eZDJ5Nk/5PryphB0o7/Qg+LPnIC91UNCHKxHawLcVbCM/k+qP65LdEWcpaumDLsorY4s1AkUm65BuOIfmJFc/6M+OF4qU6GXreTAhKhEXRnlXP6afOQ7MrJ/2aLEu/AT3G4W76fPVtvbkzgdG8czPq1qlJQ4rv2AmIfEj0tbXGEE93csBOFY+Wd9+1+RF/4rBeaGhvtkzrdRuceEzOYsEEJRU4JeAs6Vm9c1Ob+1CleG7vpQooA3Pr+bUWbweMe0BNjRQvuDdVhGjt9nUxQvy4sdldts3QC7OrvmPmnx51+KdtgBp5Hm9GU1ZMTCr+VFjVdb67RbH+uHFhYxPMewVV5R5giyaW3/HPzsBkrO6z4ICNkKKKv74fho2egR/oNNeiJwGbbxLm37elctUXvXGEGX++TgbABZIbuby3avniQtFeT06bFhJQ8Nmq384p1HhUh2043M4Haj0kX3eRGD4fsfLqzI1Smb8LxXa5B9C3QKXEWqLvOAGlDFhErvWRG4UMyHoc6Z1S6znnb0vs6Lx8YhLhdYua2VpSrO+SbPv/B3MHpdpk4R++z7uqwQ/rW2FtmrSewfP86xt0rNQPvw6UQAGw8tE7fPPwqyrr4JuqvdWMhtsXTL2gwmuETOjowzh9sHBOLKh5IfR6TgT6AweZict2huVQMVCKwBIF0Ze6ZuKMhMOc2fMILUg0dFQwxpBnJ0KWjlXmNt7Lz2oQhkQ4Dv10/eUPkl1otmXTVMfMCbf1oHSCwEtd0PbR15gv3k8WEuZ/1Yb56RIZxF1bF6RB/vS8OftnITgNLwqZOw80QNFYpTL4n/Vcfq/uIjIQcOkitxduv2rx+3guiLD/DKXtjYkNlqCygGsHxxiu/2Qk2icY/z9K9sXul9qJt50KYmIt1c5QBS/cXQMGyPWgJE2lSR+VSpN9KDvRUFO+1ZDShjDDqVKAXvcsUwKGssV1nAncOHffMvbUNYYtlsY1AtGuTLdTbTnw4bkIewt4bJi0rm48M19RzZbpvZg/6q9AwA3PNtIGjV6CfI6xgbPzhjhf7a6Gjat/x2iql1VJ6eCEUZd4n2aeG2ctp/y2i9w3QKBROW4jMb46DrDrRnqwAeofgu5rPgukhqUo4tFiLH4cCoSjathq7Fb91iMZ8HLFDCg7cJ8JFINtxr/Mn7PCt3l1hmvDWi/oKx9gYIpx/9LEHtDQ3BuWm4ef3TfCb8Stf9Pu9B1uvaZ3+fKXlXQ7ZEpnXStrl+BwnUPZDD0sUIfJfy8PzUknVrgCYBkfXjsYm6Pud9lTGjs2MkSVSnrvVHxwP6ibqJSwLmvNC3a7jmtnJjsEszz5diro7ryH6235cKXaSNDbcBwYPwqrFpFshmN4lAba0r39n7dw/PCB8alebOVEWvkyeqHdCxEzCWlpHyFVIjbDAIT8ncU2NIvty4/zGVOEW/hsueWFLD98qO3lOOau3wnSOAcFUj3cz2Kcyqfi5e8PfqHgtF++S9noX5QQzYGbc1VL91nu5GklYYhc9Sx6bIJzasmCfxUDT7T1Xe7lfj5C/0LoxtUDrwAbqc2tZ4nm71Y1suuzkkVCX8QbiSoTcw/tTX+fPSf+szbD6ajCl5+W4Ndct6tL7TrknoDZAsIDA/7+WlHPxV1qWwVGvsbZ915pv7Iq7gGlzbZtkGVGw35Ns5qGVSBEjtijzQOZSZO374ZxD4hJvqv4ajc3q3eplpwjlcHCbHMmzCnM3LDA7QXuRLNeygGZpnLyvMXfK2g8C2a8IVXYrpkfxIX9sIB5CPx5kMYYuULTUZkL74SZ6W5lGUZAtP0KjVW5vRPqpyKHCooBa+84yNWBtXrxuL0qIEaKe8iFHDhfFPRxZaFeWHLy1piXWNbHHB8MhLdE2DES+4Tx062xPBo8WGJS2yn1KcLPWx7n3WIdogzuJgoJOBU/FS1QgiKHT3PRF+ZmWUgP7POW3WnXd6wAEq/4BJjFMHQc78waN4lQ3tGQiIF8CwwUSr3ZSwJKGeLykJgk7Azd41eX88e7YiKbkvN5C/vqH7aXNQiFL5MMgRyMShhzDO4E77thLAq6DhZXjZ9CnBcRK/y/h6Um+vEyb4hRYcbfSTMNSG/2aKvzrDJ7+Zic0eRVBaZoUKtdHkl+NkgdaMlxQB7etDCJbm0c9utkKkDNE65s+4aBM+7EHwNiYmMzcOJf/pa21Z2o5/hwmvfi5fZY0YRVcgUUoR78tDZ4fgNQoMBh+ela4tGQH6n1YwRuLXmY/a66xcfgo3aCKWJvz+ugNQmJftZ8u1bZvm6bmNkP6sJJkQLn2a0Hng62pfsMSk0hcfFwSdkHPdB2s9psvChZd+5AJDWk4rsk8p05NgXyywKQbbhQhxndggeW2lpUVdbrcNY9u5hYIkPhD/u1X6Qz4aBqDFMORoeR8f2ecURBR9shOCsDMdceYKzGng3Z5CUvpda6UQvKFaIE5Fp+/LZ2Vd9X0cMRzyeKtL9WwlziNnk1wsOMj5Vqow9NJfYeU3ZBT8HzJv89rxz9yxkar//J2xrU+xSG0ZU0Xy7nxoi+7RLdZHDmGt1+jkDO2KbI0z5zmIXmZpb+anoZZEYSGkxFU++0puqrQN5tY6L4Jk36WvG/2AF6+ZMB7viIKLcsmgeQpl1Vlyc7GQGx7sgzyPVKMQxlAS/jhlF7D5PiDpki83HPSni+1Vk4mObBJqRTtO8VUdMQBPQ6p+4VDtQQApfQVCxr7/hpEzeinibb+LnqEsU75MrIp3wPMAnsR3KckBsHugnew0p0O866GfSfw5SiR0/3OoeDur/oOvuEp7mrlRjQSgvvMmHePuydypbWrgaEZ03o5SS8vHsX6MUqOXJVdCY0BDJU02El0HjYNoflsbqaF1ewXNap/vszQQfXxDaYhChX4K3xcdZAvuN08qjTXmGHcABC7Gnnre6Fc6CgSkaJY7wo+69sVe4kvyAPSUW7g0yIJ5DDrQFvJ9LlnSNhKw86SbF5gc8S2B+obNsdEBJbNg+V+89xFjoLGL+tSv1X/l3ssr2NzXr3sBaRg6zOkZknKHXNrcYnus3VMHuDN128BvG87pMDJngFrtnye1xQfCj2mYek15hwLqV/528V9QO1o1T9OL6RDGdNRC315mlmUlN45EvoeD47JtIhy1I4qMgoW6kiZeuCSEED3Bc/h2VHK4mpks9ItibyyaVLQ5a9ypFdBjqK5OyzmoWRERqPI0tpdIrV9ofrklRIB6nZx1xboSKciho7ELcXJRxg+lNq60T3wKANtFOdtvcpH13anJCAlwcalCkwb24dxCnLkWHX1LeFQFr2ig0OdBbTKsXeC0Lrvi0qKb6f9ikJWyT+wLi6LSXscjBxmDvH3UctCOZF46tWRxaNOlrExT10X7iGSqaFPQT2ViF+9KBaw8dg+yly3Rik/M5opqFq7VbJPs8kjggal0gP2wALT1xzWqH3klAMA7UR9WgdMFaUPNJ3EehHJunA9X7uMYjtqnJZM2HajW78MlNHoAu6ULUVolGX3ufGF+NHH6RPNXcAQXWaftjTJ9Vqm6LaZ1RmxQxEmg32/irUTwJiborfcvRHYxt5Y4aWxIGPX7ExdM9tOO47J29ErW2TaleRLrIz31OG9JwcMDkpM1HFfmzjPaDf2q1kqLveb3PEIyZDH8sTRd280Owoh/c1sYESncwGPP+LIO+FI2lsF/SRYh6i/NXQs0vGyqDxO+QteUqUYqlr4zLenxJhPOhihDBV/9rc+ZkP2V5Lpkm4/onDNu1mc5Yay41q4bVEJae1YeJFb6tgHpsLIR3zlBiVbAXKRSVFXnhdIG5We3564wjXGgoQc8Lxx5i4ljFCn9lAVbdLT5ojW5yKGb4weesgx8Rnan4lBdwaB1w/27VKs7Bb/KpvcBqDtuRp0lszG/VSof2C6vJ7PI7upLH7hazGGirJQclLwCVMc6G4NfZoTAp3UGyE/drfTIc9Fa2a8MR2Wm5sffGzH+JReWZ1pH1KR9qLPoiDmw2Td90knpWRCcNmG31BfRmtwZnIubxc1IFcNvQ+wH8a5ZcttkOqN40lz71Q6es14uDYFfeSk3I2IqgQHA9vz970EoxWl97DIcT+VJo16v0fQ1tJuReW/Ku1CaXRWtBq3Plpy9D5BUM0FrgZPerIh1JZauhtXC6LD4/2L9UasKSBhWbkmrWCGK7mTHOHTewX/FNMMMMqPn+eFXYABDMgSOrOGkp27u3yBCg5MIWDYn+BNJtS5mBxycHnQyGl/YwF4/0NZiPmdmbV5h5KtHkSoDQ7KnFqVQmBTRBVcN2M46Bpn6VXxfbfuLL0w7uU7eKvXa8eZElNLXCY4DsBm6mXVEf38Fq7WTlD62XXth7VvcwOv/O8nSrCTH+rWuFj0WUu+FwSd0WJkXqeLCisl80VZqyKgxax1leqLq9WGbS4/OwsocToFHAMtUDzeboR95SA+yUpBoSaqEerGhH9eFq+io07o1yHWLmf66+DkZ9s4G69DR82sHWcWadB/3sLGzhea/ekf7HUeQRwXKpib7dhrtjcwDeAn8NTICEHUEem/dEeCMZn0XUvUTI1oSfxuWfwq+v/Smw6WZTKvTqgQ2a3bYFCEAwpcTHoY1rT15z2M3TC0obGA4wFfo95vPjzaSrkXEgNaOonsThTDCYm50TdU2AhO0VQQyfQA4bY8SAH2We04x6Nq+VD7/3j9EDQmnp+CJ6bVuiTicC7oc8rEOJdsRLZ8GOKVHIZAdnEl/bXyzGjstdYOdSP+F6loCJqDQ24jEafYUWIFqgO5Y1ghlsx83oErV1eTUK8nrw50wgJCqN7ftcm8yTVfSrHKo+iuYGcnWf7CPiH5t5psyshquBknULTl7QAgberlMXespatY17nFox8pznSunQg03dnaLpm0nPSsaJl6hSyj36FBWLUW4vm9+HakOlVVmbo4ydxRB18SuKgRcnz4LSiC8G4JH4IiUCIsB72OZVVaHz2LV5qZPl6r5vXo4q8oseMzoZ2MGMhsfzZEolVqnDZggLV6n7IGlDzqFMRVilUL+8VXJ5fJ49B1l3NCj2T6uXtQ18j00Pah3e+Ihbrp73NMVoSBddYkYkVy4lf0+CwgvQXoDmXp4NAiNWcoo/rATOICwJgobQpznNRYYfeVCRYuoPgcV/8mLHnt9htyrBvwl+v8buSg6AunXi2za78xXiAdRHOZtAHoOj3yjpLJsfHbY+EPl8UuZW7J+AxW1cwH8WKvDIkFWoMgCiUDB8b3xw1JuwZU8bM6dswjraZVqhjAoN0erG/a7IDrel8ftHytpIiih74hVHJBgZ9a6ZtyyQcYApyk1ZyPo0yUmc1p+Ru3j8JAzFuj5VWhmB7GkeX/SmcQNx6oMBZsdi99YDTw3oh8fnmdO+/lO/wDTA9l2mP+GjH3KjE3xenwQ+tzftpqJT6GLotg/GiWEF54sLwv1EEgvzwWs6VOu8sFbiEhtaOvyOB4OcspD4ehG6/ut37XvC9ek0DkpeTUbh9wv2Fecod1oQRvPCj2UZbOpjR3vA5OtaoA9kHrg1FmiuCMErYyVTjhiOlZX/s9K+cpDt/Bk4n0Q9H8zkAO+znazc3dXBwF3egGKxnaSU3EGrVDfOO7XH9O25GHXqkpQJdPap/bT9LKxIk1iEHOGjnD9eKNBjzjFKmpnvmxrNgOk93z6gsRv15DazdiYBDtzE9JUPAyyXdu1oScD3c+5p2/qgfK3q63lerADI6E0EuekiXh2fhVCVhqMqcfGrIkeik30sHH0p7ixdq/1xvrRYdIdBMc/3fsj38jtcilJ3XrfhV0+PZwNF/IECtTFKN1PX7SDgm147Hk9n99XoemzeTbeMiDE21AT6L5InJ2xloVWk8n1SNzWcCM7IzQJimcC36c41gSGRQD/Os9wArF2q/EXb0B54ADT9JvzR0DHEmhNO2TPCYFciKvyJ+uSnkliXtOhzEqWk/XV/RtKPwHw3RvYs71e1yZFDmXLUVxXF1APssTNWWVntL12pXsdbNts/ptbOYBpaSnaqKmjf03V5OghTI2Pr2NPc8PPJgX7ovPb8E6haIXJkNeXOZmwYBb4feE/mH8LzFI8hxsBwQcdezWUWKAKRosimXLpR/0/7U3gFTnbLG/tqP+HHrKBsA2GFniwc5sD60httfEFk1hH9e4BF/NBg6GfUETdN1eTeJL6ZVwjXT6poCDX5qqXyqKFFglqKC2oUkw+6dJFRtNSkVqp9GUT7t+539B4ZSl9Tt9M+s9N7MrPmye+0gzOx5Atu7rsYFTHLkbQOtAiECioGaDbFszr4xfos7B5VWO9EWgx5Rg4Un9yu1CMIL7IQoiz4615CXxJ4q11vR/BmtpH37YGkcZI9yXkj1tcP073AbRDOPKEN+obk/rPyNe9e4P0kJ6Gjtz7LLEdgAqqaOPYGOBOiJxpxM2+/EZ3RrdQ3Ca/G/1bc58PgTzIdrjVxyM0YADfXdyEIgAfHRekky9+cUYHCQ9Bea/xsvb6mF56MiKE9SA+2rkp/7P/c9qGwHqGqDDLeVKcJnbGB3IfpA3xbSRbovzwOdR2JfCdVhC+JWL6IYgUHYKLXKpe0v/FJkh3DV/0//bS7sGY6giDuv+P79+UeXefvAPuhgu1Nxpc/Kpp/EC41sr1hCzfpp61lWQ8OMYMD+7YZvdOxvksnJdrOVzGZDyIWlvMMJuFrNqKPN3YvLmfK+Ufg1ruWm+6v6ZKpBJQW4s3zNRvtbP3lfvMJRVlbqYZHodSw8WO1M4XHND66lsW/V+M9sccVxJnFg6uJ8LqorxcXnhXN+a2mOTLjr1mLkMxBzKYvEeicfYwH8NnyPeoRoXVQjEcCnDeE6jFigUH6RmXhQZmnzrmc3SvVgHpKwIwMesgf8muE52lD/66Ciy7l6ejcpOEvHzOobehNSfFTR30EY1dl5pLXHim7OGObSdd515WsE5h89KdsmfaGXyFNXhvvqWJLeRf0T07KWqqTFwGmWM60xD+vnYIM0HKnafwANaCCJ6ADyoZBz0qSO
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0110]]></title>
        <url>http://zxy-hhhh.cn/2019/01/10/contest0110/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[多项式]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/Polynomial/</url>
        <content type="html"><![CDATA[<p>这里是一些模板<del>然而并不会写教程</del></p>
<a id="more"></a>
<h2 id="蝴蝶操作"><a href="#蝴蝶操作" class="headerlink" title="蝴蝶操作"></a>蝴蝶操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> r[maxn], l, lim;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> type = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type) &#123;</span><br><span class="line">        lim = <span class="number">1</span>, l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (lim &lt;= len) lim &lt;&lt;= <span class="number">1</span>, l++;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        lim = <span class="number">1</span> &lt;&lt; len, l = len;</span><br><span class="line">    rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) r[i] = ((r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="FFT"><a href="#FFT" class="headerlink" title="$FFT$"></a>$FFT$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> xx=<span class="number">0</span>,<span class="keyword">double</span> yy=<span class="number">0</span>)&#123;x=xx,y=yy;&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x+B.x,y+B.y);&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x-B.x,y-B.y);&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x*B.x-y*B.y,B.x*y+x*B.y);&#125;</span><br><span class="line">&#125;a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,r[maxn],l,lim;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *A,<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">if</span> (i&lt;r[i]) swap(A[i],A[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;lim;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">complex</span> <span class="title">Wn</span><span class="params">(<span class="built_in">cos</span>(Pi/mid),type*<span class="built_in">sin</span>(Pi/mid))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> R=mid&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=R)&#123;</span><br><span class="line">            <span class="function"><span class="keyword">complex</span> <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k++,w=w*Wn)&#123;</span><br><span class="line">                <span class="keyword">complex</span> x=A[j+k],y=w*A[j+mid+k];</span><br><span class="line">                A[j+k]=x+y;</span><br><span class="line">                A[j+mid+k]=x-y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NTT"><a href="#NTT" class="headerlink" title="$NTT$"></a>$NTT$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;k;x=<span class="number">1l</span>l*x*x%mod,k&gt;&gt;=<span class="number">1</span>) <span class="keyword">if</span> (k&amp;<span class="number">1</span>) ans=<span class="number">1l</span>l*ans*x%mod;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;<span class="number">0</span>?x+mod:(x&gt;=mod?x-mod:x);&#125;</span><br><span class="line"><span class="keyword">int</span> lim,r[<span class="number">100005</span>],l;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) <span class="keyword">if</span> (i&lt;r[i]) swap(a[i],a[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;lim;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> Wn=qpow(g,(mod<span class="number">-1</span>)/(mid&lt;&lt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (type==<span class="number">-1</span>) Wn=qpow(Wn,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> R=mid&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=R)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>,w=<span class="number">1</span>;k&lt;mid;k++,w=<span class="number">1l</span>l*w*Wn%mod)&#123;</span><br><span class="line">                <span class="keyword">int</span> x=a[j+k],y=<span class="number">1l</span>l*w*a[j+k+mid]%mod;</span><br><span class="line">                a[j+k]=Mod(x+y);</span><br><span class="line">                a[j+k+mid]=Mod(x-y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=qpow(lim,mod<span class="number">-2</span>);</span><br><span class="line">        rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) a[i]=<span class="number">1l</span>l*a[i]*x%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="分治NTT"><a href="#分治NTT" class="headerlink" title="分治NTT"></a>分治NTT</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NTT(a,<span class="number">1</span>),NTT(b,<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) a[i]=<span class="number">1l</span>l*a[i]*b[i]%mod;</span><br><span class="line">    NTT(a,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lim=<span class="number">1</span>,l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;=n)lim=lim&lt;&lt;<span class="number">1</span>,++l;</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) r[i]=((r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(l<span class="number">-1</span>))),A[i]=B[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdqNTT</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    cdqNTT(l,mid);</span><br><span class="line">    init(r-l+<span class="number">1</span>);</span><br><span class="line">    rep(i,l,mid) A[i-l]=a[i];</span><br><span class="line">    rep(i,<span class="number">0</span>,r-l) B[i]=b[i];</span><br><span class="line">    mul(A,B);</span><br><span class="line">    rep(i,mid+<span class="number">1</span>,r) a[i]-=A[i-l],a[i]=a[i]&lt;<span class="number">0</span>?a[i]+mod:a[i];</span><br><span class="line">    cdqNTT(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h2><p>$$<br>n==1:<br>\<br>f(x) \equiv c (mod\ x)\ \ \ \ \ \ c为常数<br>\<br>f^{-1} \equiv c^{-1} (mod\ x)<br>\<br>n&gt;1:<br>\<br>f(x)g(x) \equiv 1 (mod\ x^n)<br>\<br>设<br>f(x)g’(x) \equiv 1 (mod\ x^{\lceil\frac{n}{2}\rceil})<br>\<br>f(x)g(x) \equiv 1 (mod\ x^{\lceil\frac{n}{2}\rceil})<br>\<br>以上两式相减<br>\<br>g(x)-g’(x) \equiv 0 (mod\ x^{\lceil\frac{n}{2}\rceil})<br>\<br>两边平方<br>\<br>g^2(x)-2g’(x)g(x)+g’^2(x)\equiv 0(mod\ x^n)<br>\<br>同乘f(x)<br>\<br>g(x)\equiv 2g’(x)-f(x)g’^2(x)(mod x^n)<br>\<br>时间复杂度:<br>T(n)=T(\frac{n}{2})+O(n log n)=O(n log n)<br>$$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">        G[<span class="number">0</span>]=qpow(F[<span class="number">0</span>],mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    solve((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    init(n*<span class="number">2</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,n<span class="number">-1</span>) A[i]=F[i];</span><br><span class="line">    rep(i,n,lim<span class="number">-1</span>) A[i]=<span class="number">0</span>;</span><br><span class="line">    NTT(A,<span class="number">1</span>),NTT(G,<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>)</span><br><span class="line">        G[i]=<span class="number">1l</span>l*Mod(<span class="number">2</span><span class="number">-1l</span>l*A[i]*G[i]%mod)*G[i]%mod;</span><br><span class="line">    NTT(G,<span class="number">-1</span>);</span><br><span class="line">    rep(i,n,lim<span class="number">-1</span>) G[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MTT"><a href="#MTT" class="headerlink" title="$MTT$"></a>$MTT$</h2><p>此坑待填<del>暂时就不填了吧</del></p>
<h2 id="多项式求对数函数"><a href="#多项式求对数函数" class="headerlink" title="多项式求对数函数"></a>多项式求对数函数</h2><p>前置芝士：</p>
<p>$\frac{d\ ln\ x}{dx} =\frac{1}{x}$</p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%AF%BC%E6%95%B0%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">证明</a></p>
<p>设$G(x)=f[g(x)]​$</p>
<p>$G’(x)=f’(g(x))g’(x)​$</p>
<p><a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E5%BC%8F%E6%B3%95%E5%88%99" target="_blank" rel="noopener">证明</a></p>
<p>$f(x)=\int f’(x)dx$</p>
<p>$$</p>
<p>设f(x)=ln\ x\</p>
<p>B(x)=f(A(x))\</p>
<p>B’(x)=f’(A(x))A’(x)=\frac{A’(x)}{A(x)}\</p>
<p>B(x)=\int B’(x)dx\</p>
<p>$$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[最短路]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/bzoj2125/</url>
        <content type="html"><![CDATA[<p>圆方树</p>
<a id="more"></a>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2125" target="_blank" rel="noopener">题目链接</a></p>
<p>建出圆方树，圆点到方点的距离为它爬到这个方点在圆方树的父亲的距离，圆点到圆点之间的距离为边长。</p>
<p>两个点的最短路长度分两种情况讨论：</p>
<p>$Lca$为圆点，那么就是树上距离</p>
<p>$Lca$为方点，那两个点就都爬到这个方点对应的环上，再求一个环上距离</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/09</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 500005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m,a[maxn],Q;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> len(x,y) (mp[make_pair(x,y)])</span></span><br><span class="line"><span class="built_in">map</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span> &gt; mp;</span><br><span class="line"><span class="keyword">namespace</span> Tree &#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(v,'\n');</span></span><br><span class="line">        nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    ll sum1[maxn&lt;&lt;<span class="number">1</span>],sum2[maxn&lt;&lt;<span class="number">1</span>],sum[maxn&lt;&lt;<span class="number">1</span>],Dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> f[maxn&lt;&lt;<span class="number">1</span>][<span class="number">20</span>],dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        dep[u]=dep[f[u][<span class="number">0</span>]]+<span class="number">1</span>,Dep[u]=Dep[f[u][<span class="number">0</span>]]+sum[u];</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(sum[u],' '),wrt(Dep[u],'\n');</span></span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">16</span>) f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        cross(i,u) f[to[i]][<span class="number">0</span>]=u,dfs(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">int</span> _lca(<span class="keyword">int</span> u,<span class="keyword">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (dep[f[u][i]]&gt;=dep[v]) u=f[u][i];</span><br><span class="line">        <span class="keyword">if</span> (u==v) <span class="keyword">return</span> u;</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (f[u][i]!=f[v][i]) u=f[u][i],v=f[v][i];</span><br><span class="line">        <span class="keyword">return</span> f[u][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (dep[f[u][i]]&gt;dep[v]) u=f[u][i];</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Lca=_lca(x,y);</span><br><span class="line">        <span class="keyword">if</span> (Lca&lt;=n) <span class="keyword">return</span> (Dep[x]+Dep[y]<span class="number">-2</span>*Dep[Lca]);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> xx=jump(x,Lca),yy=jump(y,Lca);</span><br><span class="line">            <span class="keyword">if</span> (sum1[xx]&lt;sum1[yy]) swap(xx,yy);</span><br><span class="line">            <span class="keyword">return</span> Dep[x]-Dep[xx]+Dep[y]-Dep[yy]+</span><br><span class="line">                min(sum1[xx]-sum1[yy],sum2[xx]+sum1[yy]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;</span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],val[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> L)</span> </span>&#123;</span><br><span class="line">    nx[++cnt]=hd[u],val[cnt]=L,to[cnt]=v,hd[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;dfn[u]) &#123;</span><br><span class="line">                Tree::add(u,v),top--;</span><br><span class="line">                Tree::sum[v]=val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (low[v]==dfn[u]) &#123;</span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">int</span> x=top;</span><br><span class="line">                <span class="keyword">while</span>(sta[x]!=v) Tree::add(n+tot,sta[x]),x--;</span><br><span class="line">                Tree::add(n+tot,sta[x]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">                Tree::sum1[sta[x]]=val[i];</span><br><span class="line">                rep(j,x+<span class="number">1</span>,top)</span><br><span class="line">                    Tree::sum1[sta[j]]=</span><br><span class="line">                        Tree::sum1[sta[j<span class="number">-1</span>]]+len(sta[j<span class="number">-1</span>],sta[j]);</span><br><span class="line">                Tree::sum2[sta[top]]=len(sta[top],u);</span><br><span class="line">                Tree::sum[sta[top]]=</span><br><span class="line">                    min(Tree::sum1[sta[top]],Tree::sum2[sta[top]]);</span><br><span class="line">                drp(j,top<span class="number">-1</span>,x)&#123;</span><br><span class="line">                    Tree::sum2[sta[j]]=</span><br><span class="line">                        Tree::sum2[sta[j+<span class="number">1</span>]]+len(sta[j+<span class="number">1</span>],sta[j]);</span><br><span class="line">                    Tree::sum[sta[j]]=</span><br><span class="line">                        min(Tree::sum1[sta[j]],Tree::sum2[sta[j]]);</span><br><span class="line">                &#125;</span><br><span class="line">                top=x<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"test.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"test.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    n=rd(),m=rd();Q=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd(),z=rd();</span><br><span class="line">        add(x,y,z),add(y,x,z);</span><br><span class="line">        len(x,y)=len(y,x)=z;</span><br><span class="line">    &#125;</span><br><span class="line">    tarjan(<span class="number">1</span>,<span class="number">0</span>);Tree::dfs(<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,Q)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        wrt(Tree::dis(x,y),<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[小C的独立集]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/bzoj4316/</url>
        <content type="html"><![CDATA[<p>圆方树入门</p>
<a id="more"></a>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4316" target="_blank" rel="noopener">题目链接</a></p>
<p>建出圆方树，圆点和圆点之间按正常转移，遇到圆点和方点时，把整个环拉出来，单独跑一遍$DP$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/09</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 500005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m,a[maxn];</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(v,'\n');</span></span><br><span class="line">        nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mx;</span><br><span class="line">    <span class="keyword">int</span> dp[maxn][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> Dp[maxn][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> A,<span class="keyword">int</span> B,<span class="built_in">vector</span> &lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; x)</span> </span>&#123; </span><br><span class="line">        Dp[<span class="number">0</span>][<span class="number">0</span>]=A,Dp[<span class="number">0</span>][<span class="number">1</span>]=B;</span><br><span class="line">        rep(i,<span class="number">1</span>,x.size()<span class="number">-1</span>)&#123;</span><br><span class="line">            Dp[i][<span class="number">0</span>]=max(Dp[i<span class="number">-1</span>][<span class="number">0</span>],Dp[i<span class="number">-1</span>][<span class="number">1</span>])+x[i].second;</span><br><span class="line">            Dp[i][<span class="number">1</span>]=Dp[i<span class="number">-1</span>][<span class="number">0</span>]+x[i].first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        cross(i,u)<span class="keyword">if</span> (to[i]!=fa)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span> (v&gt;n) &#123;</span><br><span class="line">                pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ans;</span><br><span class="line">                <span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; vt;</span><br><span class="line">                <span class="keyword">int</span> tt=<span class="number">0</span>;</span><br><span class="line">                cross(j,v) &#123;</span><br><span class="line">                    dfs(to[j],v);</span><br><span class="line">                    vt.push_back(make_pair(dp[to[j]][<span class="number">1</span>],dp[to[j]][<span class="number">0</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> xx=vt[<span class="number">0</span>].first,yy=vt[<span class="number">0</span>].second;</span><br><span class="line">                tt=vt.size()<span class="number">-1</span>;</span><br><span class="line">                DP(yy,xx,vt),dp[u][<span class="number">0</span>]+=max(Dp[tt][<span class="number">0</span>],Dp[tt][<span class="number">1</span>]);</span><br><span class="line">                DP(yy,<span class="number">-2333333</span>,vt),dp[u][<span class="number">1</span>]+=Dp[tt][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[u][<span class="number">0</span>]+=max(dp[v][<span class="number">0</span>],dp[v][<span class="number">1</span>]);</span><br><span class="line">                dp[u][<span class="number">1</span>]+=dp[v][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[u][<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(u,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> max(dp[u][<span class="number">0</span>],dp[u][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;  </span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]==dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v) </span><br><span class="line">                    Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">        Tree::mx=<span class="number">0</span>;</span><br><span class="line">        tarjan(i,<span class="number">0</span>),ans+=Tree::calc(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd(),m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y),add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    init(n);</span><br><span class="line">    wrt(ans,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[铁人两项]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/luogu-4630/</url>
        <content type="html"><![CDATA[<p>圆方树入门</p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P4630" target="_blank" rel="noopener">题目链接</a></p>
<p>转化一下题意，等价于求$\sum\limits_x\sum\limits_y S_{x,y}$</p>
<p>$S_{x,y}$表示$x$到$y$的所有<strong>不经过重复点的路径</strong>可能经过的点的个数</p>
<p>建出圆方树，方点权值为点双大小，圆点权值为$-1$，问题就变成了求树上所有<strong>圆点</strong>对的<strong>路径长度</strong>之和</p>
<p>路径长度定义为树上两点路径经过点的权值和（包含这两点）。</p>
<p>每个点的贡献就是经过它的路径数$×$它的权值</p>
<p><strong>注意：图不一定联通</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 600005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 600005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m;</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line">    <span class="keyword">int</span> g[maxn&lt;&lt;<span class="number">1</span>],mx;</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=u&lt;=n;</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">            <span class="keyword">int</span> x=dfs(to[i],u);</span><br><span class="line">            ans+=<span class="number">2l</span>l*g[u]*x*sum;</span><br><span class="line">            sum+=x;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=<span class="number">2l</span>l*g[u]*sum*(mx-sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;  </span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;=dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;Tree::g[n+tot]=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v) </span><br><span class="line">                    Tree::g[n+tot]++,Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) Tree::g[i]=<span class="number">-1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">        Tree::mx=<span class="number">0</span>;</span><br><span class="line">        tarjan(i,<span class="number">0</span>),Tree::dfs(i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd(),m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y),add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    init(n);</span><br><span class="line">    wrt(Tree::ans,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[圆方树]]></title>
        <url>http://zxy-hhhh.cn/2019/01/08/yuanfangshu/</url>
        <content type="html"><![CDATA[<p>出题人把序列上的题加个树剖放到树上是错误的<del>应该加个圆方树放到仙人掌上</del></p>
<p>圆方树题的整理和一个模板</p>
<a id="more"></a>
<h1 id="圆方树"><a href="#圆方树" class="headerlink" title="圆方树"></a>圆方树</h1><p>初学的话点<a href="https://www.cnblogs.com/cjyyb/p/9098400.html" target="_blank" rel="noopener">这里</a></p>
<p>然后放个建树模板</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="comment">//if (low[v]&gt;dfn[u]) Tree::add(u,v);else </span></span><br><span class="line">            <span class="comment">//仙人掌时加上句</span></span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;=dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v)</span><br><span class="line">                    Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="problems"><a href="#problems" class="headerlink" title="problems"></a>problems</h2><p><a href="http://zxy-hhhh.cn/2019/01/09/luogu-4630/">铁人两项</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/bzoj4316/">小C的独立集</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/bzoj2125">最短路</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/CF487E">tourists</a></p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[小清新数据结构题]]></title>
        <url>http://zxy-hhhh.cn/2019/01/06/luogu-3676/</url>
        <content type="html"><![CDATA[<p><del>真是小清新</del></p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3676" target="_blank" rel="noopener">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>查询以$x$为根时的所有子树的权值和的平方和，带单点修改、</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p><strong>为了表达方便，记$q$为询问的点，我们用$x$表示$1$到$q$路径上的点</strong></p>
<h3 id="可以先-O-n-的处理出以-1-为根时："><a href="#可以先-O-n-的处理出以-1-为根时：" class="headerlink" title="可以先$O(n)$的处理出以$1$为根时："></a>可以先$O(n)$的处理出以$1$为根时：</h3><p>​    答案，记为$Ans$</p>
<p>​    每颗子树的权值和，记为$S_i$</p>
<p>​    所有点权值和，记为$Sum$</p>
<p>​    点的深度，记为$dep_i$，$dep_1=1$</p>
<h3 id="考虑修改"><a href="#考虑修改" class="headerlink" title="考虑修改"></a>考虑修改</h3><p>修改点$q$，记原来值和当前值差为$d$</p>
<p>$Sum=Sum+dep_x*d$</p>
<p>$Ans=Ans-\sum\limits_x(S_x)^2+\sum\limits_x(S_x+d)^2$</p>
<p>$=Ans-\sum\limits_x(S_x)^2+\sum\limits_x(S_x)^2+2S_xd+d^2$</p>
<p>$=Ans+\sum\limits_{x}2S_xd+d^2$</p>
<p>$=Ans+2 d\sum\limits_x S_x+dep_x d^2$</p>
<p>所有$S_x=S_x+d$</p>
<h3 id="当根换为-q-时"><a href="#当根换为-q-时" class="headerlink" title="当根换为$q$时"></a>当根换为$q$时</h3><p>此时点$x$，不含点$q$，$S_x$会变为$Sum-S_{son}$，$S_{son}$表示$x$的包含点$q$的子树的大小</p>
<p>其余点不变</p>
<p>所以答案为</p>
<p>$Ans-\sum\limits_x(S_x)^2+Sum^2+\sum\limits_x(Sum-S_x)^2$</p>
<p>$=Ans+\sum\limits_x(Sum-S_x)^2-(S_x)^2+Sum^2$</p>
<p>平方差公式展开</p>
<p>$=Ans+Sum^2+\sum\limits Sum(Sum-2S_x)$</p>
<p>$=Ans+Sum^2+Sum\sum\limits Sum-2S_x$</p>
<p>$=Ans+Sum^2+Sum^2dep_x+2Sum\sum\limits S_x$</p>
<p>用树剖+树状数组维护<strong>链上加</strong>，<strong>链上求和</strong>就好了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>时间复杂度$O(nlog^2n)$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/04</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">namespace</span> Tree_Array</span><br><span class="line">&#123;</span><br><span class="line">    ll sum[maxn],Sum[maxn];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=i&amp;(-i))</span><br><span class="line">            sum[i]+=val,Sum[i]+=<span class="number">1l</span>l*x*val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=i&amp;(-i))</span><br><span class="line">            ans+=(x+<span class="number">1</span>)*sum[i]-Sum[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span> </span>&#123;add(l,x),add(r+<span class="number">1</span>,-x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> getsum(r)-getsum(l<span class="number">-1</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line">    <span class="keyword">int</span> top[maxn],sz[maxn],fa[maxn],son[maxn],dep[maxn];</span><br><span class="line">    <span class="keyword">int</span> val[maxn],a[maxn];</span><br><span class="line">    <span class="keyword">int</span> sum[maxn];</span><br><span class="line">    ll Ans,S;</span><br><span class="line">    <span class="keyword">int</span> idx[maxn],id;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dep[u]=dep[fa[u]]+<span class="number">1</span>,sz[u]=<span class="number">1</span>;sum[u]=a[u];</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa[u])&#123;</span><br><span class="line">            fa[to[i]]=u,dfs(to[i]);</span><br><span class="line">            sz[u]+=sz[to[i]],sum[u]+=sum[to[i]];</span><br><span class="line">            <span class="keyword">if</span> (sz[son[u]]&lt;sz[to[i]]) son[u]=to[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx[u]=++id;val[id]=a[u];</span><br><span class="line">        top[u]=tp;</span><br><span class="line">        <span class="keyword">if</span> (son[u]) dfs(son[u],tp);</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa[u]&amp;&amp;to[i]!=son[u]) dfs(to[i],to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(<span class="number">1</span>),dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        Tree_Array::n=id;</span><br><span class="line">        rep(i,<span class="number">1</span>,id) Tree_Array::update(idx[i],idx[i],sum[i]),Ans+=sum[i]*sum[i];</span><br><span class="line">        S=sum[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link_update</span><span class="params">(<span class="keyword">int</span> x,ll val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            Tree_Array::update(idx[top[x]],idx[x],val);</span><br><span class="line">            <span class="keyword">if</span> (top[x]==<span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">            x=fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">sigma</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            ans+=Tree_Array::query(idx[top[x]],idx[x]);</span><br><span class="line">            <span class="keyword">if</span> (top[x]==<span class="number">1</span>) <span class="keyword">return</span> ans;</span><br><span class="line">            x=fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> Ans+S*S+<span class="number">1l</span>l*dep[x]*S*S<span class="number">-2l</span>l*S*sigma(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,ll val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll delta=val-a[x],s1=sigma(x),s2=dep[x];</span><br><span class="line">        Ans+=<span class="number">2</span>*s1*delta+delta*delta*dep[x];</span><br><span class="line">        S+=delta;</span><br><span class="line">        link_update(x,delta);</span><br><span class="line">        a[x]=val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd();</span><br><span class="line">    <span class="keyword">int</span> m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y);add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=rd();</span><br><span class="line">    init();</span><br><span class="line">    rep(_i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> op=rd();</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=rd(),val=rd();</span><br><span class="line">            update(x,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x=rd();</span><br><span class="line">            wrt(query(x),<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[大森林]]></title>
        <url>http://zxy-hhhh.cn/2018/12/13/bzoj4573/</url>
        <content type="html"><![CDATA[<p>有趣的LCT题<br><a id="more"></a></p>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4573" target="_blank" rel="noopener">题目链接</a></p>
<h2 id="写在前面的一些结论："><a href="#写在前面的一些结论：" class="headerlink" title="写在前面的一些结论："></a>写在前面的一些结论：</h2><ol>
<li><p>合法的$2$操作只会在一段连续的区间内发生，所以合法$2$操作也只会在一段区间内发生，因此我们可以把更换生长节点的区间，和加点区间取并，使$2$操作一定合法</p>
</li>
<li><p>如果$2$操作一定合法，加点操作区间从l~r变为1~n并不影响答案</p>
</li>
<li><p>一个询问在该询问进入时处理，和之后处理，答案并不改变，并且只有涉及到该树的操作才会对这个询问产生影响</p>
</li>
</ol>
<p><del>结论是显然的</del></p>
<p>知道这些之后，来考虑如何解决；</p>
<h2 id="一个想法"><a href="#一个想法" class="headerlink" title="一个想法"></a>一个想法</h2><p>可以基于上面结论，产生一个<del>愚蠢的</del>想法</p>
<p>设$x$为$2$操作后的生长节点，$y$为之前的</p>
<p>将$2$操作拆成两次：</p>
<ol>
<li>在$l$处，将之后加入所有点，换到$x$下面</li>
<li>在$r+1$处,将之后加入所有点，换回$y$下面</li>
</ol>
<p>然后将询问和$2$操作按位置排序，从1~n扫一遍，依次处理就得到了$O(n^{2})$的优秀做法</p>
<h2 id="那么如何优化"><a href="#那么如何优化" class="headerlink" title="那么如何优化"></a>那么如何优化</h2><h3 id="虚点"><a href="#虚点" class="headerlink" title="虚点!!!"></a>虚点!!!</h3><p>对每一个$2$操作建一个虚点，每个虚点的父节点是前一个虚点，第一个虚点的父亲是1</p>
<p>每一次加点就加到当前最后一个虚点下面就好了。</p>
<p>每次移动就直接将该$2$操作对应的虚点及其子树移到新的生长节点下<del>然而还是T</del></p>
<h3 id="统计答案"><a href="#统计答案" class="headerlink" title="统计答案"></a>统计答案</h3><p>我们让虚点权值为0，实点为1</p>
<p>设一个点i到根路径上权值和为 $S_{i}$(包含自身权值)</p>
<p>$dis(u,v)=S_{u}+S_{v}-2S_{lca}$</p>
<p>大家举几个栗子，想象一下，就知道这是对的。<del>我不会证</del></p>
<h3 id="LCT大法吼！！！"><a href="#LCT大法吼！！！" class="headerlink" title="LCT大法吼！！！"></a>LCT大法吼！！！</h3><p>移动子树相当于换父亲，LCT就可以了。</p>
<p>但是此处<strong>LCT 不能换根</strong>，因为有虚点，不同于普通树上路径，所以根的位置对答案会产生影响。</p>
<p>此处cut操作一定是儿子cut父亲，所以直接cut掉就可以了，like this<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(u);splay(u);fa[son[u][<span class="number">0</span>]]=<span class="number">0</span>,son[u][<span class="number">0</span>]=<span class="number">0</span>;</span><br></pre></td></tr></table></figure></p>
<p>而link操作也一定是一颗树的根去link，所以也直接link就好了，像这样<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(v),splay(v),fa[v]=u;</span><br></pre></td></tr></table></figure></p>
<p>然后就愉快的A了此题，时间复杂度$O(nlogn)$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/07</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, a, b) for (int x = int(a); x &lt;= (int)(b); x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x, a, b) for (int x = int(a); x &gt;= (int)(b); x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x, a) for (int x = hd[a]; x; x = nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll _x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> _ch = getchar(), _f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(_ch) &amp;&amp; (_ch != <span class="string">'-'</span>) &amp;&amp; (_ch != EOF); _ch = getchar())</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">if</span> (_ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">        _f = <span class="number">0</span>;</span><br><span class="line">        _ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(_ch); _ch = getchar()) _x = _x * <span class="number">10</span> + _ch - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f ? _x : -_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_x &gt;= <span class="number">10</span>)</span><br><span class="line">        write(_x / <span class="number">10</span>), <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">putchar</span>(_x + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x, <span class="keyword">char</span> _p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">    write(_x);</span><br><span class="line">    <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LCT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> son[maxn][<span class="number">2</span>], val[maxn], sum[maxn], fa[maxn], cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> son[fa[x]][<span class="number">1</span>] != x &amp;&amp; son[fa[x]][<span class="number">0</span>] != x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sum[x] = sum[son[x][<span class="number">0</span>]] + sum[son[x][<span class="number">1</span>]] + val[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = fa[x], z = fa[y], d = son[y][<span class="number">1</span>] == x;</span><br><span class="line">        <span class="keyword">if</span> (!isroot(y)) son[z][son[z][<span class="number">1</span>] == y] = x;</span><br><span class="line">        fa[y] = x, fa[x] = z;</span><br><span class="line">        fa[son[x][!d]] = y, son[y][d] = son[x][!d];</span><br><span class="line">        son[x][!d] = y;</span><br><span class="line">        update(y), update(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; !isroot(x);) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = fa[x], z = fa[y];</span><br><span class="line">            <span class="keyword">if</span> (!isroot(y))</span><br><span class="line">                (son[y][<span class="number">1</span>] == x) ^ (son[z][<span class="number">1</span>] == y) ? rotate(x) : rotate(y);</span><br><span class="line">            rotate(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x; t = x, x = fa[x]) splay(x), son[x][<span class="number">1</span>] = t, update(x);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; fa[v] = u; &#125;<span class="comment">//因为先有cut所以可以不access</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        access(u);</span><br><span class="line">        splay(u);</span><br><span class="line">        fa[son[u][<span class="number">0</span>]] = <span class="number">0</span>, son[u][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Sum = <span class="number">0</span>;</span><br><span class="line">        access(x);</span><br><span class="line">        splay(x);</span><br><span class="line">        Sum += sum[x];</span><br><span class="line">        <span class="keyword">int</span> lca = access(y);</span><br><span class="line">        splay(y);</span><br><span class="line">        Sum += sum[y];</span><br><span class="line">        access(lca);</span><br><span class="line">        splay(lca);</span><br><span class="line">        Sum -= sum[lca] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changefa</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>  <span class="comment">// xxc's fahter was hje before,but now his father is me</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cut(x);</span><br><span class="line">        link(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        access(x);</span><br><span class="line">        splay(x);</span><br><span class="line">        <span class="keyword">return</span> son[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">new_node</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sum[++cnt] = x, val[cnt] = x;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; lct;</span><br><span class="line"><span class="keyword">int</span> to[maxn];</span><br><span class="line"><span class="keyword">int</span> cl[maxn], cr[maxn], ans[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, p, r, cnt, QwQ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, w, x, y, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query &amp;B) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (w &lt; B.w) || (w == B.w &amp;&amp; op &lt; B.op);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    to[<span class="number">1</span>] = lct.new_node(<span class="number">1</span>);</span><br><span class="line">    lct.link(<span class="number">1</span>, lct.new_node(<span class="number">0</span>));</span><br><span class="line">    cl[<span class="number">1</span>] = <span class="number">1</span>, cr[<span class="number">1</span>] = n;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">2</span>, w = <span class="number">1</span>;</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">            cl[++w] = rd(), cr[w] = rd();</span><br><span class="line">            lct.link(now, to[w] = lct.new_node(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd(), pre = now;</span><br><span class="line">            l = <span class="built_in">std</span>::max(l, cl[x]), r = <span class="built_in">std</span>::min(r, cr[x]);</span><br><span class="line">            <span class="keyword">if</span> (l &gt; r) <span class="keyword">continue</span>;</span><br><span class="line">            now = lct.new_node(<span class="number">0</span>);</span><br><span class="line">            Q[++cnt].op = <span class="number">1</span>, Q[cnt].w = l, Q[cnt].x = now, Q[cnt].y = to[x];</span><br><span class="line">            Q[++cnt].op = <span class="number">1</span>, Q[cnt].w = r + <span class="number">1</span>, Q[cnt].x = now, Q[cnt].y = pre;</span><br><span class="line">            lct.link(pre, now);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Q[++cnt].w = rd();</span><br><span class="line">            <span class="keyword">int</span> x = rd(), y = rd();</span><br><span class="line">            Q[cnt].op = <span class="number">2</span>, Q[cnt].x = x, Q[cnt].y = y;</span><br><span class="line">            Q[cnt].id = ++QwQ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(Q + <span class="number">1</span>, Q + <span class="number">1</span> + cnt);</span><br><span class="line">    rep(i, <span class="number">1</span>, cnt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[i].op == <span class="number">1</span>)</span><br><span class="line">            lct.changefa(Q[i].x, Q[i].y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans[Q[i].id] = lct.dis(to[Q[i].x], to[Q[i].y]);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">1</span>, QwQ) wrt(ans[i], <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> LCT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[about-zxy]]></title>
        <url>http://zxy-hhhh.cn/2018/12/06/about-zxy/</url>
        <content type="html"><![CDATA[<p>博客运行一段时间了，也有了一点文章了，该来个about me了<br><a id="more"></a></p>
<h2 id="about我的ID"><a href="#about我的ID" class="headerlink" title="about我的ID"></a>about我的ID</h2><p>我常以<strong>zxy_hhhh</strong>及<strong>地狱小鬼366</strong>(无法输入中文时为<strong>dyxg</strong>)的ID游荡于各大OJ、社交网站&amp;&amp;<del>游戏</del></p>
<h2 id="关于OI生涯"><a href="#关于OI生涯" class="headerlink" title="关于OI生涯"></a>关于OI生涯</h2><p>去年拿了个pj1=，今天tg GG了<del>不过1=还是有的</del>；<br>之后的么。。。待续</p>
<h2 id="关于博客内容"><a href="#关于博客内容" class="headerlink" title="关于博客内容"></a>关于博客内容</h2><p>一般是一些<strong>题解</strong>或者<strong>对算法/数据结构的理解</strong>。</p>
<h2 id="一些解释"><a href="#一些解释" class="headerlink" title="一些解释"></a>一些解释</h2><p>关于加密文章<del>虽然前端的加密是扯淡</del>，因为一些政治原因无法公开</p>
<p>关于访问速度问题，因为我部署在github上的，国内访问速度就。。。<br>不过，过几天我说不定会往coding上部署一份，届时访问速度就会好多了</p>
<p>头像什么的还在搞。。。</p>
<p>评论系统的话因为主题的一些原因，用了disqus，可能对不能科学上网的童鞋有些不友好。</p>
<p>还有本人码风各种变换，原因有两个</p>
<pre><code>1. 有时候我会用vscode格式化代码
2. 最近在改码风
</code></pre><h2 id="如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份）"><a href="#如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份）" class="headerlink" title="如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份）"></a>如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份）</h2><hr>
<p>先写这么多吧，其他的想到了再补</p>
]]></content>
        
        
    </entry>
    
    <entry>
        <title><![CDATA[不勤劳的图书管理员]]></title>
        <url>http://zxy-hhhh.cn/2018/12/05/bzoj3110/</url>
        <content type="html"><![CDATA[<p><del>暴力可以AC</del></p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3759" target="_blank" rel="noopener">题目链接</a></p>
<p>先算出不修改时的答案；</p>
<p>对于的位置i贡献就是</p>
<p>$\Sigma_{j=1}^{j&lt;i} a[j]+a[i] (v[j]&gt;v[i])$</p>
<p>然后对于每一次修改，考虑对答案的影响就是y移到x减少的和x移到y增加的<br>而影响只会出现在(x,y)</p>
<p>具体就是：</p>
<p>(x,y)对x产生的逆序对，y对(x,y)产生的逆序对会失去</p>
<p>(x,y)对y产生的逆序对，x对(x,y)产生的逆序对会增加入答案</p>
<p>如何维护a[i]+a[j]?</p>
<p>用树套树维护<strong>(x,y)大于等于x的数</strong>的<strong>个数</strong>和<strong>这些数的和</strong></p>
<hr>
<p>不能用指针，不然空间会GG</p>
<p>要外层<strong>树状数组</strong>内层<strong>线段树</strong>，不然空间GG</p>
<p>外层<strong>线段树</strong>内层<strong>平衡树</strong>空间OK的，不过时间就呵呵了<br><del>机房某大佬卡了一上午常之后彻底弃疗，写了暴力</del></p>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/05</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lb(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], w[maxn], m, Ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span> ? (x + mod) : (x &gt;= mod ? x - mod : x); &#125;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum,ls,rs;</span><br><span class="line">&#125;tr[<span class="number">20000000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u) u = ++cnt;</span><br><span class="line">    tr[u].sum = Mod(tr[u].sum + k);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        insert(tr[u].ls, l, mid, x, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(tr[u].rs, mid + <span class="number">1</span>, r, x, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="keyword">return</span> (query(tr[u].ls, l, mid, ql, qr) + query(tr[u].rs, mid + <span class="number">1</span>, r, ql, qr)) %</span><br><span class="line">           mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> tr[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt;= n; x += lb(x)) xtree::insert(tr[x], <span class="number">1</span>, n, k, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x; x -= lb(x)) ans = Mod(ans + xtree::query(tr[x], <span class="number">1</span>, n, L, R));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mod(query(R, l, r) - query(L - <span class="number">1</span>, l, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tr1, tr2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    rep(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        w[i] = rd(), a[i] = rd();</span><br><span class="line">        tr1.update(i, w[i], a[i]), tr2.update(i, w[i], <span class="number">1</span>);</span><br><span class="line">        Ans = Mod(Ans + tr1.query(i - <span class="number">1</span>, w[i], n)),</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(i - <span class="number">1</span>, w[i], n) * a[i] % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = rd(), y = rd();</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) swap(x, y);</span><br><span class="line">        <span class="keyword">if</span> (x==y) &#123;wrt(Ans,<span class="string">'\n'</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        Ans = Mod(Ans - tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[y], n));</span><br><span class="line">        Ans = Mod(Ans + tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[x], n));</span><br><span class="line">        Ans = Mod(Ans - tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[x]));</span><br><span class="line">        Ans = Mod(Ans + tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[y]));</span><br><span class="line">        Ans = Mod(Ans - <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[y], n) * a[y] % mod);</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[x], n) * a[x] % mod);</span><br><span class="line">        Ans = Mod(Ans - <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[x]) * a[x] % mod);</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[y]) * a[y] % mod);</span><br><span class="line">        <span class="keyword">if</span> (w[x] &gt; w[y])</span><br><span class="line">            Ans -= a[x] + a[y];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Ans += a[x] + a[y];</span><br><span class="line">        Ans=Mod(Ans);</span><br><span class="line">        tr1.update(x, w[x], -a[x]), tr1.update(x, w[y], a[y]);</span><br><span class="line">        tr1.update(y, w[y], -a[y]), tr1.update(y, w[x], a[x]);</span><br><span class="line">        tr2.update(x, w[x], <span class="number">-1</span>), tr2.update(x, w[y], <span class="number">1</span>);</span><br><span class="line">        tr2.update(y, w[y], <span class="number">-1</span>), tr2.update(y, w[x], <span class="number">1</span>);</span><br><span class="line">        swap(w[x], w[y]), swap(a[x], a[y]);</span><br><span class="line">        wrt(Ans, <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//wrt(xtree::cnt,'\n');</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[初学树套树]]></title>
        <url>http://zxy-hhhh.cn/2018/12/05/tree-tao-tree/</url>
        <content type="html"><![CDATA[<p>最近写了点树套树，感觉也没那么可怕</p>
<a id="more"></a>
<h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><p>很多用于动态维护区间的一些东西，比如：区间内大于等于x的数的个数、区间前驱后继等等</p>
<p>主要思想很简单，就是 对外层树的<strong>每一个节点</strong>建一个内层树</p>
<p>具体实现方式可见例题</p>
<h2 id="来几个-栗子"><a href="#来几个-栗子" class="headerlink" title="来几个 栗子"></a>来几个 栗子</h2><p><a href="http://zxy-hhhh.cn/2018/12/03/luogu-3759/">K大数查询</a><br><a href="http://zxy-hhhh.cn/2018/12/03/bzoj3196/">二逼平衡树</a><br><a href="http://zxy-hhhh.cn/2018/12/05/bzoj3110/">不勤劳的图书管理员</a><br>先写到这里吧</p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[K大数查询]]></title>
        <url>http://zxy-hhhh.cn/2018/12/03/luogu-3759/</url>
        <content type="html"><![CDATA[<p>模板题</p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3759" target="_blank" rel="noopener">题目链接</a></p>
<p>因为有区间修改，所以外层建权值线段树，内层建区间树</p>
<p>处理修改：对所有包含c的外层树节点所对应的内层树的a~b区间+1</p>
<p>处理询问：在外层树上二分，若当前节点的<strong>右子树的内层树</strong>a~b区间和&gt;c就往左子树走，否则往右</p>
<hr>
<p>注意:</p>
<p>   区间树要<strong>标记永久化</strong>，不然如果写的不够优秀会 MLE or TLE</p>
<p>   此题luogu上时限只有1s，大部分代码<del>包括本人代码</del>会被卡常，获得0~100不等的分数。</p>
<p>   在往左子树走时要减掉右子树a~b区间和带来的贡献</p>
<hr>
<p>在具体实现的时候，我为了图方便用了<strong>指针</strong>和<strong>namespace</strong></p>
<p>如果你看不懂指针，可以往下翻，有无指针的代码</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/01</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, a, b) for (int x = int(a); x &lt;= (int)(b); x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x, a, b) for (int x = int(a); x &gt;= (int)(b); x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x, a) for (int x = hd[a]; x; x = nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> lazy;</span><br><span class="line">    ll sum;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="literal">NULL</span>) u = <span class="keyword">new</span> node;</span><br><span class="line">    <span class="keyword">if</span> (ql == l &amp;&amp; r == qr) &#123;</span><br><span class="line">        u-&gt;lazy++, u-&gt;sum += r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    u-&gt;sum += qr - ql + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        insert(u-&gt;ls, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        insert(u-&gt;rs, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(u-&gt;ls, l, mid, ql, mid), insert(u-&gt;rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(node *u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql == l &amp;&amp; qr == r) <span class="keyword">return</span> u-&gt;sum;</span><br><span class="line">    ll ans = (qr - ql + <span class="number">1</span>) * u-&gt;lazy;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> ans + query(u-&gt;ls, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> ans + query(u-&gt;rs, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(u-&gt;ls, l, mid, ql, mid) + ans +</span><br><span class="line">               query(u-&gt;rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="keyword">namespace</span> ytree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    xtree::node *rt;</span><br><span class="line">&#125; tr[<span class="number">400005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    xtree::insert(tr[pos].rt, <span class="number">1</span>, n, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        insert(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">    ll sum = xtree::query(tr[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rt, <span class="number">1</span>, n, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= x)</span><br><span class="line">        <span class="keyword">return</span> query(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x - sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace ytree</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, l, r;</span><br><span class="line">    ll c;</span><br><span class="line">&#125; Q[maxn];</span><br><span class="line"><span class="keyword">int</span> H[maxn], tot;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd(), l = rd(), r = rd();</span><br><span class="line">        ll x = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) ytree::insert(<span class="number">1</span>, -n, n, l, r, x);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">2</span>) wrt(ytree::query(<span class="number">1</span>, -n, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[二逼平衡树]]></title>
        <url>http://zxy-hhhh.cn/2018/12/03/bzoj3196/</url>
        <content type="html"><![CDATA[<p>码量稍微有大，不过思路清晰还是好写的</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3196" target="_blank" rel="noopener">题目链接</a></p>
<p>外层线段树，内层平衡树</p>
<p>操作1 4 5就是在线段树上取出区间，然后平衡树内求答案，合并答案</p>
<p>修改也没什么好讲的，和上一题比较相似</p>
<p>操作2要<strong>二分答案</strong>，然后转化为1</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">	date: 2018/12/03</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">	<span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">	<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">	<span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ( (l + r) &gt;&gt; 1 </span></span><br><span class="line"><span class="keyword">int</span> a[maxn], n, m;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">nil</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sz, val, fix;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">    node(<span class="keyword">int</span> x) : sz(<span class="number">1</span>), val(x), fix(rand()) &#123; ls = rs = nil; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123; sz = ls-&gt;sz + rs-&gt;sz + <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nil = <span class="keyword">new</span> node(<span class="number">0</span>);</span><br><span class="line">    nil-&gt;ls = nil-&gt;rs = nil;</span><br><span class="line">    nil-&gt;sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(node *now, <span class="keyword">int</span> k, node *&amp;x, node *&amp;y, <span class="keyword">int</span> op = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (now == nil) &#123;</span><br><span class="line">        x = y = nil;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span> ? now-&gt;val &lt; k : now-&gt;ls-&gt;sz &lt; k) &#123;</span><br><span class="line">        x = now;</span><br><span class="line">        split(now-&gt;rs, (op == <span class="number">1</span> ? k : k - now-&gt;ls-&gt;sz - <span class="number">1</span>), x-&gt;rs, y, op);</span><br><span class="line">        x-&gt;update();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = now;</span><br><span class="line">        split(now-&gt;ls, k, x, y-&gt;ls, op);</span><br><span class="line">        y-&gt;update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node *<span class="title">merge</span><span class="params">(node *x, node *y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == nil) <span class="keyword">return</span> y;</span><br><span class="line">    <span class="keyword">if</span> (y == nil) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;fix &lt; y-&gt;fix) &#123;</span><br><span class="line">        x-&gt;rs = merge(x-&gt;rs, y);</span><br><span class="line">        <span class="keyword">return</span> x-&gt;update(), x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y-&gt;ls = merge(x, y-&gt;ls);</span><br><span class="line">        <span class="keyword">return</span> y-&gt;update(), y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    rt = merge(x, merge(<span class="keyword">new</span> node(val), y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    split(y, <span class="number">1</span>, y, z, <span class="number">2</span>);</span><br><span class="line">    rt = merge(x, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val, x, y), split(x, x-&gt;sz - <span class="number">1</span>, x, z, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (z == nil)</span><br><span class="line">        ans = -inf;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = (z-&gt;val);</span><br><span class="line">    rt = merge(x, merge(z, y));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nxt</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val + <span class="number">1</span>, x, y), split(y, <span class="number">1</span>, y, z, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (y == nil)</span><br><span class="line">        ans = inf;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = y-&gt;val;</span><br><span class="line">    rt = merge(x, merge(y, z));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    <span class="keyword">if</span> (x == nil)</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = x-&gt;sz;</span><br><span class="line">    rt = merge(x, y);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="keyword">namespace</span> ytree &#123;</span><br><span class="line">xtree::node *tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> -inf;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::pre(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> max(pre(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x),</span><br><span class="line">               pre(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::nxt(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> min(nxt(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x),</span><br><span class="line">               nxt(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::rank(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> rank(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x) +</span><br><span class="line">           rank(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    xtree::del(tr[pos], a[x]), xtree::insert(tr[pos], v);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        change(pos &lt;&lt; <span class="number">1</span>, l, mid, x, v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        change(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">atrank</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">100000000</span>, ans;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rank(<span class="number">1</span>, <span class="number">1</span>, n, L, R, mid) &lt; k)</span><br><span class="line">            ans = mid, l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[pos] = xtree::nil;</span><br><span class="line">    rep(i, l, r) xtree::insert(tr[pos], a[i]);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    build(pos &lt;&lt; <span class="number">1</span>, l, mid), build(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace ytree</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd();</span><br><span class="line">    m = rd();</span><br><span class="line">    xtree::init();</span><br><span class="line">    rep(i, <span class="number">1</span>, n) a[i] = rd();</span><br><span class="line">    ytree::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::rank(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x) + <span class="number">1</span>, <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::atrank(l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = rd(), k = rd();</span><br><span class="line">            ytree::change(<span class="number">1</span>, <span class="number">1</span>, n, x, k);</span><br><span class="line">            a[x] = k;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::pre(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::nxt(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[ss]]></title>
        <url>http://zxy-hhhh.cn/1028/12/06/my-ss/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        
    </entry>
    
    
    
</search>
