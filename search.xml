<?xml version="1.0" encoding="utf-8"?>
<search>
    
    
    <entry>
        <title><![CDATA[图的价值]]></title>
        <url>http://zxy-hhhh.cn/2019/03/06/bzoj5093/</url>
        <content type="html"><![CDATA[<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=5093" target="_blank" rel="noopener">题目</a></p>
<p>首先可以单独计算一个点的贡献，最后乘上$n$。</p>
<p>那么我们可以列出柿子：</p>
<script type="math/tex; mode=display">
ans=n2^{\binom{n-1}{2}}\sum\limits_{i=0}^{n-1}\binom{n-1}{i}i^k</script><p>考虑它的意义：取出一个点，枚举它的度数，其他点可以随便连</p>
<p>然后这个式子并过不来这题</p>
<p>这个$\sum$前面部分处理起来比较方便，考虑化后面部分。</p>
<p>考虑一个柿子：</p>
<script type="math/tex; mode=display">
n^k=\sum\limits_{i=0}^kS(k,i)\binom{n}{i}i!</script><p>证明：左边表示把$k$个球放入n个不同的盒子中的方案数，右边表示枚举有$i$个盒子非空的方案，两者相等。（组合意义）</p>
<p>实际上这个式子的枚举上界因为$n$，但是改为$k$结果不变</p>
<p>知道这个柿子之后就可以化简</p>
<script type="math/tex; mode=display">
\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\sum\limits_{j=0}^kS(k,j)\binom{i}{j}j!\\
=\sum\limits_{j=0}^kS(k,j)j!\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\binom{i}{j}</script><p>然后</p>
<script type="math/tex; mode=display">
\sum\limits_{i=0}^{n-1}\binom{n-1}{i}\binom{i}{j}=\binom{n-1}{j}2^{n-1-j}</script><p>证明：左边为$n-1$个人中选$i$个，$i$个中再轩$j$个，右边为先选出$j$个人，然后其他人是否被选择皆可（组合意义）</p>
<p>然后</p>
<script type="math/tex; mode=display">
\sum\limits_{j=0}^kS(k,j)j!\binom{n-1}{j}2^{n-1-j}\\
=\sum\limits_{j=0}^k S(k,j)\frac{(n-1)!}{(n-1-j)!}2^{n-1-j}</script><p>然后用$NTT$算出斯特林数后即可</p>
<p>复杂度$O(klogk)$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/03/06</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">-1</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f*_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 800005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inv2 499122177</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g 3</span></span><br><span class="line"><span class="keyword">int</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> lim,l,r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> type = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (type) &#123;</span><br><span class="line">        lim = <span class="number">1</span>, l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (lim &lt;= len) lim &lt;&lt;= <span class="number">1</span>, l++;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        lim = <span class="number">1</span> &lt;&lt; len, l = len;</span><br><span class="line">    rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) r[i] = ((r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span> ? x + mod : (x &gt;= mod ? x - mod : x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, ll k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, x = <span class="number">1l</span>l * x * x % mod)</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = <span class="number">1l</span>l * ans * x % mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">    rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) <span class="keyword">if</span> (i &lt; r[i]) swap(a[i], a[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; lim; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> Wn = qpow(g, (mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">-1</span>) Wn = qpow(Wn, mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> R = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lim; j += R)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, w = <span class="number">1</span>; k &lt; mid; k++, w = <span class="number">1l</span>l * w * Wn % mod) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[j + k], y = <span class="number">1l</span>l * w * a[j + mid + k] % mod;</span><br><span class="line">                a[j + k] = Mod(x + y);</span><br><span class="line">                a[j + mid + k] = Mod(x - y);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = qpow(lim, mod - <span class="number">2</span>);</span><br><span class="line">        rep(i, <span class="number">0</span>, lim - <span class="number">1</span>) a[i] = <span class="number">1l</span>l * a[i] * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> F[maxn],G[maxn],fac[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n=rd(),k=rd();</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,k) fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    rep(i,<span class="number">0</span>,k) &#123;</span><br><span class="line">        F[i]=<span class="number">1l</span>l*((i&amp;<span class="number">1</span>)?<span class="number">998244352</span>:<span class="number">1</span>)*qpow(fac[i],mod<span class="number">-2</span>)%mod;</span><br><span class="line">        G[i]=<span class="number">1l</span>l*qpow(i,k)*qpow(fac[i],mod<span class="number">-2</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    init(k+k);</span><br><span class="line">    NTT(F,<span class="number">1</span>),NTT(G,<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) s[i]=<span class="number">1l</span>l*F[i]*G[i]%mod;</span><br><span class="line">    NTT(s,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,sn=<span class="number">1</span>,s2=qpow(<span class="number">2</span>,n<span class="number">-1</span>);</span><br><span class="line">    ans=<span class="number">1l</span>l*s[<span class="number">0</span>]*s2%mod;</span><br><span class="line">    rep(i,<span class="number">1</span>,k) &#123;</span><br><span class="line">        s2=<span class="number">1l</span>l*s2*inv2%mod;</span><br><span class="line">        sn=<span class="number">1l</span>l*sn*(n-i)%mod;</span><br><span class="line">        ans=(ans+<span class="number">1l</span>l*s[i]*sn%mod*s2)%mod;</span><br><span class="line">       <span class="comment">// wrt(ans,'\n');</span></span><br><span class="line">    &#125;</span><br><span class="line">    wrt(<span class="number">1l</span>l*ans*n%mod*qpow(<span class="number">2</span>,<span class="number">1l</span>l*(n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">2</span>)%mod,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0211]]></title>
        <url>http://zxy-hhhh.cn/2019/02/11/contest0211/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[杜教筛]]></title>
        <url>http://zxy-hhhh.cn/2019/01/17/dujiaoshai/</url>
        <content type="html"><![CDATA[<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>内容总结自</p>
<p><a href="https://acfcacfca.blog.luogu.org/dls-tql(AcF&#39;s" target="_blank" rel="noopener">https://acfcacfca.blog.luogu.org/dls-tql(AcF&#39;s</a> Blog)</p>
<h2 id="常规做法"><a href="#常规做法" class="headerlink" title="常规做法"></a>常规做法</h2><p>杜教筛用于解决求$S(n)=\sum\limits_{i=1}^nf(i)$的问题</p>
<p>有一种常规做法：</p>
<p>找一个数论函数$g$，</p>
<script type="math/tex; mode=display">
\begin{align}
\sum\limits_{i=1}^n (f*g)i\\
=\sum\limits_{i=1}^n\sum\limits_{d|i}f(\frac{i}{d})g(d)\\
=\sum\limits_{d=1}^n g(d) \sum\limits_{i=1}^{\lfloor\frac{n}{d}\rfloor} f(i)\\
=\sum\limits_{d=1}^n g(d)S(\frac{n}{d})\\
=g(1)S(n)+\sum\limits_{d=2}^n g(d)S(\frac{n}{d})
\end{align}</script><p>我们要求的是$S(n)$，</p>
<p>$\sum\limits_{i=1}^n (f*g)i=g(1)S(n)+\sum\limits_{d=2}^n g(d)S(\frac{n}{d})$</p>
<p>$g(1)S(n)=\sum\limits_{i=1}^n (f*g)i-\sum\limits_{d=2}^n g(d)S(\frac{n}{d})$</p>
<p>只要能找到可以快速求$\sum\limits_{i=1}^n(f*g)i$和$g$的前缀和的$g$即可。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><script type="math/tex; mode=display">
\begin{align}
S(n)=\sum\limits_{i=1}^n\mu(i)\\
\mu*I=e\\
\text{求}I\text{和}e\text{的前缀和}
\end{align}</script><script type="math/tex; mode=display">
\begin{align}
S(n)=\sum\limits_{i=1}^n\varphi(i)\\
\varphi*I=id
\text{求}id\text{和}id\text{的前缀和}
\end{align}</script><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    ll ans=sum_f_g<span class="comment">//算f*g前缀和</span></span><br><span class="line">    <span class="keyword">for</span>(ll l=<span class="number">2</span>;r&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">        r=n/(n/l);</span><br><span class="line">        ans-=(sum_g(r)-sum_g(l<span class="number">-1</span>))*calc(n/l);</span><br><span class="line">        <span class="comment">//sum_g用于算g的前缀和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以先筛出前$n^{\frac{2}{3}}$个答案</p>
<p>复杂度为$O(n^{\frac{2}{3}})$</p>
<p>可以使用$hash$记忆化来有化复杂度</p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 杜教筛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0111]]></title>
        <url>http://zxy-hhhh.cn/2019/01/11/contest0111/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[contest0110]]></title>
        <url>http://zxy-hhhh.cn/2019/01/10/contest0110/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟赛 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[多项式]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/Polynomial/</url>
        <content type="html"><![CDATA[<p>这里是一些模板<del>然而并不会写教程</del></p>
<a id="more"></a>
<h1 id="一些求法"><a href="#一些求法" class="headerlink" title="一些求法"></a>一些求法</h1><h2 id="FFT"><a href="#FFT" class="headerlink" title="$FFT$"></a>$FFT$</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">complex</span> (<span class="keyword">double</span> xx=<span class="number">0</span>,<span class="keyword">double</span> yy=<span class="number">0</span>)&#123;x=xx,y=yy;&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x+B.x,y+B.y);&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x-B.x,y-B.y);&#125;</span><br><span class="line">    <span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;B)</span><br><span class="line">    &#123;<span class="keyword">return</span> <span class="keyword">complex</span>(x*B.x-y*B.y,B.x*y+x*B.y);&#125;</span><br><span class="line">&#125;a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,r[maxn],l,lim;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(<span class="keyword">complex</span> *A,<span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">if</span> (i&lt;r[i]) swap(A[i],A[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;lim;mid&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">complex</span> <span class="title">Wn</span><span class="params">(<span class="built_in">cos</span>(Pi/mid),type*<span class="built_in">sin</span>(Pi/mid))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> R=mid&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=R)&#123;</span><br><span class="line">            <span class="function"><span class="keyword">complex</span> <span class="title">w</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k++,w=w*Wn)&#123;</span><br><span class="line">                <span class="keyword">complex</span> x=A[j+k],y=w*A[j+mid+k];</span><br><span class="line">                A[j+k]=x+y;</span><br><span class="line">                A[j+mid+k]=x-y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NTT"><a href="#NTT" class="headerlink" title="$NTT$"></a>$NTT$</h2><p>把单位根换成原根</p>
<h2 id="分治NTT"><a href="#分治NTT" class="headerlink" title="分治NTT"></a>分治NTT</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NTT(a,<span class="number">1</span>),NTT(b,<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) a[i]=<span class="number">1l</span>l*a[i]*b[i]%mod;</span><br><span class="line">    NTT(a,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lim=<span class="number">1</span>,l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;=n)lim=lim&lt;&lt;<span class="number">1</span>,++l;</span><br><span class="line">    rep(i,<span class="number">0</span>,lim<span class="number">-1</span>) r[i]=((r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(l<span class="number">-1</span>))),A[i]=B[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdqNTT</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    cdqNTT(l,mid);</span><br><span class="line">    init(r-l+<span class="number">1</span>);</span><br><span class="line">    rep(i,l,mid) A[i-l]=a[i];</span><br><span class="line">    rep(i,<span class="number">0</span>,r-l) B[i]=b[i];</span><br><span class="line">    mul(A,B);</span><br><span class="line">    rep(i,mid+<span class="number">1</span>,r) a[i]-=A[i-l],a[i]=a[i]&lt;<span class="number">0</span>?a[i]+mod:a[i];</span><br><span class="line">    cdqNTT(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a>多项式求逆</h2><script type="math/tex; mode=display">
n==1:
\\
f(x) \equiv c (mod\ x)\ \ \ \ \ \ c为常数
\\
f^{-1} \equiv c^{-1} (mod\ x)
\\
n>1:
\\
f(x)g(x) \equiv 1 (mod\ x^n)
\\
设
f(x)g'(x) \equiv 1 (mod\ x^{\lceil\frac{n}{2}\rceil})
\\
f(x)g(x) \equiv 1 (mod\ x^{\lceil\frac{n}{2}\rceil})
\\
以上两式相减
\\
g(x)-g'(x) \equiv 0 (mod\ x^{\lceil\frac{n}{2}\rceil})
\\
两边平方
\\
g^2(x)-2g'(x)g(x)+g'^2(x)\equiv 0(mod\ x^n)
\\
同乘f(x)
\\
g(x)\equiv 2g'(x)-f(x)g'^2(x)(mod x^n)
\\
时间复杂度:
T(n)=T(\frac{n}{2})+O(n log n)=O(n log n)</script><h2 id="MTT"><a href="#MTT" class="headerlink" title="$MTT$"></a>$MTT$</h2><p>此坑待填<del>暂时就不填了吧</del></p>
<h2 id="多项式求导"><a href="#多项式求导" class="headerlink" title="多项式求导"></a>多项式求导</h2><script type="math/tex; mode=display">
f(x)=\sum\limits_{i=0}^{\infty} a_ix^i\\
f'(x)=\sum\limits_{i=0}^{\infty} a_{i+1}*(i+1)x^i</script><h2 id="多项式积分"><a href="#多项式积分" class="headerlink" title="多项式积分"></a>多项式积分</h2><script type="math/tex; mode=display">
f(x)=\sum\limits_{i=0}^{\infty} a_ix^i\\
\int f(x)dx=\sum\limits_{i=1}^{\infty} \frac{a_{i-1}}{i}x^i</script><h2 id="多项式求对数函数"><a href="#多项式求对数函数" class="headerlink" title="多项式求对数函数"></a>多项式求对数函数</h2><script type="math/tex; mode=display">
设f(x)=ln\ x\\

B(x)=f(A(x))\\

B'(x)=f'(A(x))A'(x)=\frac{A'(x)}{A(x)}\\

B(x)=\int B'(x)dx\\</script><h2 id="多项式除法"><a href="#多项式除法" class="headerlink" title="多项式除法"></a>多项式除法</h2><p><a href="https://www.luogu.org/blog/user7035/solution-p4512" target="_blank" rel="noopener">来源</a></p>
<p>$f(x)$为$n$次多项式<br>设$f_R(x)=x^nf(\frac{1}{x})$<br>容易发现$f_R(x)$为$f(x)$翻转得来，即$f_R[i]=f[n-i]​$</p>
<p>下面开始推柿子</p>
<script type="math/tex; mode=display">
F(x)=Q(x)*G(x)+R(x)\\
x^nF(\frac{1}{x})=x^{n-m}Q(\frac{1}{x})*x^mG(\frac{1}{x})+x^nR(\frac{1}{x})\\
F_R(x)=Q_R(x)*G_R(x)+x^{n-m+1}R_R(x)\\
F_R(x)\equiv Q_R(x)*G_R(x)(\bmod x^{n-m+1})\\
Q_R(x)=F_R(x)*G_R(x)^{-1}\\
R_R=F(x)-G(x)*Q(x)</script><h2 id="多项式开根"><a href="#多项式开根" class="headerlink" title="多项式开根"></a>多项式开根</h2><p><a href="https://www.luogu.org/blog/Owencodeisking/solution-p5205" target="_blank" rel="noopener">来源</a></p>
<script type="math/tex; mode=display">
设H(x)^2 \equiv A(x) (\mod x^{\lceil \frac{n}{2} \rceil} )\\
G(x)-H(x) \equiv 0 (\mod x^{\lceil \frac{n}{2} \rceil} )\\
(G(x)-H(x))^2 \equiv 0 (\mod x^n)\\
G(x)^2-2H(x)G(x)+H(x)^2 \equiv 0(\mod x^n)\\
F(x)-2H(x)G(x)+H(x)^2\equiv 0 (\mod x^n)\\
G(x)=\frac{F(x)+H(x)^2}{2H(x)} (\mod x^n)</script><h2 id="多项式exp"><a href="#多项式exp" class="headerlink" title="多项式exp"></a>多项式exp</h2><p><a href="https://www.luogu.org/problemnew/solution/P4726" target="_blank" rel="noopener">具体看这里</a></p>
<script type="math/tex; mode=display">
设H_1(x)=e^{A(x)}(\mod x^{\lceil \frac{n}{2} \rceil})\\
牛顿迭代公式得\\
H=H_1(1-Ln(H_1)+A) (\mod x^n)</script><h1 id="一个综合的板子"><a href="#一个综合的板子" class="headerlink" title="一个综合的板子"></a>一个综合的板子</h1><p>写的很naive</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 900005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> g 3</span></span><br><span class="line"><span class="keyword">namespace</span> Polynomial &#123;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k=mod<span class="number">-2</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, x = <span class="number">1l</span>l * x * x % mod)</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = <span class="number">1l</span>l * ans * x % mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x&gt;=mod?x-mod:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> lim;</span><br><span class="line"><span class="keyword">int</span> _a[maxn],_b[maxn],_c[maxn];</span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    lim=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lim &lt;= len) lim &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;lim; i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        w[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> t=qpow(<span class="number">3</span>, (mod<span class="number">-1</span>)/i/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> j=<span class="number">1</span>; j&lt;i; ++j) w[i+j]=<span class="number">1l</span>l*w[i+j<span class="number">-1</span>]*t%mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DFT</span><span class="params">(<span class="keyword">int</span> *f, <span class="keyword">int</span> n=lim)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> F[maxn];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">        F[i]=f[j];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=n&gt;&gt;<span class="number">1</span>; (j^=k)&lt;k; k&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i&lt;&lt;=<span class="number">1</span>) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j+=i&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> *W=w+i;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> *F0=F+j, *F1=F+j+i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j; k&lt;j+i; ++k, ++W, ++F0, ++F1)&#123;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t=(*F1)*(*W)%mod;</span><br><span class="line">                (*F1)=*F0+mod-t, (*F0)+=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) f[i]=F[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IDFT</span><span class="params">(<span class="keyword">int</span> *f, <span class="keyword">int</span> n=lim)</span></span>&#123;</span><br><span class="line">    reverse(f+<span class="number">1</span>, f+n);</span><br><span class="line">    DFT(f, n);</span><br><span class="line">    <span class="keyword">int</span> I=qpow(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i) f[i]=<span class="number">1l</span>l*f[i]*I%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span> *A,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vt,<span class="keyword">int</span> sz,<span class="keyword">int</span> L)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sz&gt;<span class="keyword">int</span>(vt.size())) sz=vt.size();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sz;i++) A[i]=vt[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=sz;i&lt;L;i++) A[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *A,<span class="keyword">int</span> *B)</span> </span>&#123;</span><br><span class="line">	DFT(A),DFT(B);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++) A[i]=<span class="number">1l</span>l*A[i]*B[i]%mod;</span><br><span class="line">	IDFT(A);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; intmul(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; x, pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; y,<span class="keyword">int</span> f)&#123;</span><br><span class="line">    <span class="keyword">return</span> make_pair((<span class="number">1l</span>l*x.first*y.first+<span class="number">1l</span>l*x.second*y.second%mod*f)%mod,</span><br><span class="line">                     (<span class="number">1l</span>l*x.second*y.first+<span class="number">1l</span>l*x.first*y.second)%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">intsqrt</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=<span class="number">1</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span>(qpow(a, (mod<span class="number">-1</span>)/<span class="number">2</span>)!=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> x, f;</span><br><span class="line">    <span class="keyword">do</span> x=(rand())%(a<span class="number">-1</span>)+<span class="number">1</span>; <span class="keyword">while</span>(qpow(f=(<span class="number">1l</span>l*x*x-a+mod)%mod, (mod<span class="number">-1</span>)/<span class="number">2</span>)==<span class="number">1</span>);</span><br><span class="line">    pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ans=make_pair(<span class="number">1</span>, <span class="number">0</span>), t=make_pair(x, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=(mod+<span class="number">1</span>)/<span class="number">2</span>; i; i&gt;&gt;=<span class="number">1</span>, t=intmul(t, t, f)) </span><br><span class="line">        <span class="keyword">if</span>(i&amp;<span class="number">1</span>) ans=intmul(ans, t, f);</span><br><span class="line">    <span class="keyword">return</span> min(ans.first, mod-ans.first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Poly</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; F;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> Poly &amp;B) &#123;F=B.F;&#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> + (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        res.F.resize(<span class="built_in">std</span>::max(F.size(),B.F.size()));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++) </span><br><span class="line">            res.F[i]=F[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            res.F[i]=Mod(res.F[i]+B.F[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> +=(<span class="keyword">const</span> Poly &amp;B) &#123;</span><br><span class="line">        <span class="keyword">if</span>(B.F.size()&gt;F.size()) F.resize(B.F.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            F[i]=Mod(B.F[i]+F[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> - (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        res.F.resize(<span class="built_in">std</span>::max(F.size(),B.F.size()));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++) </span><br><span class="line">            res.F[i]=F[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            res.F[i]=Mod(res.F[i]-B.F[i]+mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> -=(<span class="keyword">const</span> Poly &amp;B) &#123;</span><br><span class="line">        <span class="keyword">if</span>(B.F.size()&gt;F.size()) F.resize(B.F.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.F.size();i++) </span><br><span class="line">            F[i]=Mod(F[i]-B.F[i]+mod);</span><br><span class="line">	&#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> * (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">int</span> N=F.size()+B.F.size()<span class="number">-1</span>;</span><br><span class="line">        Init(N);</span><br><span class="line">        copy(_a,F,N,lim),copy(_b,B.F,N,lim);</span><br><span class="line">		mul(_a,_b);</span><br><span class="line">        res.F.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++) res.F.push_back(_a[i]);</span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> *= (<span class="keyword">const</span> Poly &amp;B) &#123;</span><br><span class="line">        *<span class="keyword">this</span>=*<span class="keyword">this</span>*B;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++) </span><br><span class="line">            res.F.push_back(<span class="number">1l</span>l*F[i]*x%mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> *= (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++)</span><br><span class="line">            F[i]=<span class="number">1l</span>l*F[i]*x%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (*<span class="keyword">this</span>)*(qpow(x,mod<span class="number">-2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="keyword">int</span> p=qpow(x,mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size();i++)</span><br><span class="line">            F[i]=<span class="number">1l</span>l*F[i]*p%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res=*<span class="keyword">this</span>;</span><br><span class="line">        res.F[<span class="number">0</span>]=Mod(res.F[<span class="number">0</span>]+x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;F[<span class="number">0</span>]=Mod(F[<span class="number">0</span>]+x);&#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">int</span> x) <span class="keyword">const</span>&#123;</span><br><span class="line">        Poly res=*<span class="keyword">this</span>;</span><br><span class="line">        res.F[<span class="number">0</span>]=Mod(res.F[<span class="number">0</span>]-x+mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> -= (<span class="keyword">const</span> <span class="keyword">int</span> x) &#123;F[<span class="number">0</span>]=Mod(F[<span class="number">0</span>]-x+mod);&#125;</span><br><span class="line">    <span class="keyword">void</span> __Inv(<span class="keyword">int</span> n) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            _b[<span class="number">0</span>]=qpow(F[<span class="number">0</span>],mod<span class="number">-2</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        __Inv((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        Init((n<span class="number">-1</span>)*<span class="number">2</span>);</span><br><span class="line">        copy(_a,F,n,lim);</span><br><span class="line">        DFT(_a),DFT(_b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line">            _b[i]=<span class="number">1l</span>l*Mod(<span class="number">2</span><span class="number">-1l</span>l*_a[i]*_b[i]%mod+mod)*_b[i]%mod;</span><br><span class="line">        IDFT(_b);</span><br><span class="line">        rep(i,n,lim<span class="number">-1</span>) _b[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        <span class="built_in">memset</span>(_a,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(n&lt;&lt;<span class="number">2</span>));</span><br><span class="line">        <span class="built_in">memset</span>(_b,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(n&lt;&lt;<span class="number">2</span>));</span><br><span class="line">        __Inv(n);</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) res.F.push_back(_b[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;      <span class="comment">//多项式求逆</span></span><br><span class="line">    Poly <span class="keyword">operator</span> / (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span> &#123;</span><br><span class="line">        Poly Gr=B,Q=*<span class="keyword">this</span>;</span><br><span class="line">        Q.R(),Gr.R();</span><br><span class="line">        <span class="keyword">int</span> N=F.size()-B.F.size()+<span class="number">1</span>;</span><br><span class="line">        Gr.F.resize(N);</span><br><span class="line">        Gr=Gr.Inv();</span><br><span class="line">        Q=Q*Gr;</span><br><span class="line">        Q.F.resize(N);</span><br><span class="line">        Q.R();</span><br><span class="line">        <span class="keyword">return</span> Q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> /= (<span class="keyword">const</span> Poly &amp;B) &#123;*<span class="keyword">this</span>=*<span class="keyword">this</span>/B;&#125;</span><br><span class="line">    Poly <span class="keyword">operator</span> % (<span class="keyword">const</span> Poly &amp;B) <span class="keyword">const</span> &#123;</span><br><span class="line">        Poly Q=*<span class="keyword">this</span>/B;</span><br><span class="line">        Q*=B;</span><br><span class="line">        Q=*<span class="keyword">this</span>-Q;</span><br><span class="line">        Q.F.resize(B.F.size()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> Q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> %= (<span class="keyword">const</span> Poly &amp;B) &#123;*<span class="keyword">this</span>=*<span class="keyword">this</span>%B;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">R</span><span class="params">()</span> </span>&#123;reverse(F.begin(),F.end());&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">IN</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        F.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) F.push_back(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">OUT</span><span class="params">(<span class="keyword">int</span> len=<span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (len==<span class="number">-1</span>) len=F.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,F[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Derivative</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;F.size()<span class="number">-1</span>;i++)</span><br><span class="line">            res.F.push_back(<span class="number">1l</span>l*(i+<span class="number">1</span>)*F[i+<span class="number">1</span>]%mod);</span><br><span class="line">        <span class="comment">//res.F.push_back(0);</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;      <span class="comment">//多项式求导</span></span><br><span class="line">    <span class="function">Poly <span class="title">Integral</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        Poly res;</span><br><span class="line">        res.F.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;F.size();i++)</span><br><span class="line">            res.F.push_back(<span class="number">1l</span>l*qpow((i),mod<span class="number">-2</span>)*F[i<span class="number">-1</span>]%mod);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;    <span class="comment">//多项式积分</span></span><br><span class="line">    <span class="function">Poly <span class="title">Ln</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        Poly res;</span><br><span class="line">        res=Derivative()*Inv(n);</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        res=res.Integral();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;    <span class="comment">//多项式对数函数</span></span><br><span class="line">    Poly __Sqrt(<span class="keyword">int</span> n) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">            Poly res;</span><br><span class="line">            res.F.push_back(intsqrt(F[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Poly res,H;</span><br><span class="line">        res=__Sqrt((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        H=res.Inv(n);</span><br><span class="line">        Init(n+n);</span><br><span class="line">        copy(_a,F,n,lim),copy(_b,H.F,n,lim);</span><br><span class="line">        mul(_a,_b);</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            res.F[i]=<span class="number">1l</span>l*(_a[i]+res.F[i])*<span class="number">499122177</span>%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Sqrt</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        <span class="keyword">return</span> __Sqrt(n);</span><br><span class="line">    &#125;</span><br><span class="line">    Poly __Exp(<span class="keyword">int</span> n) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</span><br><span class="line">            Poly res;</span><br><span class="line">            res.F.push_back(intsqrt(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> Poly res,B;</span><br><span class="line">        res=__Exp((n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        B=res.Ln(n);</span><br><span class="line">        B.F.resize(n);</span><br><span class="line">        B.F[<span class="number">0</span>]=Mod(F[<span class="number">0</span>]-B.F[<span class="number">0</span>]+<span class="number">1</span>+mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) B.F[i]=Mod(F[i]-B.F[i]+mod);</span><br><span class="line">        res*=B;</span><br><span class="line">        res.F.resize(n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125; <span class="comment">//多项式指数函数</span></span><br><span class="line">    <span class="function">Poly <span class="title">Exp</span><span class="params">(<span class="keyword">int</span> n=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">-1</span>) n=F.size();</span><br><span class="line">        <span class="keyword">return</span> __Exp(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Poly <span class="title">Pow</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> md=<span class="number">-1</span>)</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (md==<span class="number">-1</span>) md=F.size();</span><br><span class="line">        <span class="keyword">return</span> (Ln(md)*k).Exp(md);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; :: iterator it=F.end()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1l</span>l*x*(*it)%mod;</span><br><span class="line">        --it,res=Mod(res+*it);</span><br><span class="line">        <span class="keyword">for</span>(--it;it!=F.begin();--it)</span><br><span class="line">            res=(<span class="number">1l</span>l*res*x+*it)%mod;</span><br><span class="line">        res=(<span class="number">1l</span>l*res*x+(*it))%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;<span class="comment">//事实上这只是一只重载了运算符的vector</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请在有氧环境下使用</span></span><br><span class="line"><span class="keyword">using</span> Polynomial::Poly;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[最短路]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/bzoj2125/</url>
        <content type="html"><![CDATA[<p>圆方树</p>
<a id="more"></a>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2125" target="_blank" rel="noopener">题目链接</a></p>
<p>建出圆方树，圆点到方点的距离为它爬到这个方点在圆方树的父亲的距离，圆点到圆点之间的距离为边长。</p>
<p>两个点的最短路长度分两种情况讨论：</p>
<p>$Lca$为圆点，那么就是树上距离</p>
<p>$Lca$为方点，那两个点就都爬到这个方点对应的环上，再求一个环上距离</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/09</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 500005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m,a[maxn],Q;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> len(x,y) (mp[make_pair(x,y)])</span></span><br><span class="line"><span class="built_in">map</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span> &gt; mp;</span><br><span class="line"><span class="keyword">namespace</span> Tree &#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(v,'\n');</span></span><br><span class="line">        nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    ll sum1[maxn&lt;&lt;<span class="number">1</span>],sum2[maxn&lt;&lt;<span class="number">1</span>],sum[maxn&lt;&lt;<span class="number">1</span>],Dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> f[maxn&lt;&lt;<span class="number">1</span>][<span class="number">20</span>],dep[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        dep[u]=dep[f[u][<span class="number">0</span>]]+<span class="number">1</span>,Dep[u]=Dep[f[u][<span class="number">0</span>]]+sum[u];</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(sum[u],' '),wrt(Dep[u],'\n');</span></span><br><span class="line">        rep(i,<span class="number">1</span>,<span class="number">16</span>) f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">        cross(i,u) f[to[i]][<span class="number">0</span>]=u,dfs(to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">int</span> _lca(<span class="keyword">int</span> u,<span class="keyword">int</span> v) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (dep[f[u][i]]&gt;=dep[v]) u=f[u][i];</span><br><span class="line">        <span class="keyword">if</span> (u==v) <span class="keyword">return</span> u;</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (f[u][i]!=f[v][i]) u=f[u][i],v=f[v][i];</span><br><span class="line">        <span class="keyword">return</span> f[u][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        drp(i,<span class="number">16</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> (dep[f[u][i]]&gt;dep[v]) u=f[u][i];</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Lca=_lca(x,y);</span><br><span class="line">        <span class="keyword">if</span> (Lca&lt;=n) <span class="keyword">return</span> (Dep[x]+Dep[y]<span class="number">-2</span>*Dep[Lca]);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> xx=jump(x,Lca),yy=jump(y,Lca);</span><br><span class="line">            <span class="keyword">if</span> (sum1[xx]&lt;sum1[yy]) swap(xx,yy);</span><br><span class="line">            <span class="keyword">return</span> Dep[x]-Dep[xx]+Dep[y]-Dep[yy]+</span><br><span class="line">                min(sum1[xx]-sum1[yy],sum2[xx]+sum1[yy]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;</span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],val[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> L)</span> </span>&#123;</span><br><span class="line">    nx[++cnt]=hd[u],val[cnt]=L,to[cnt]=v,hd[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;dfn[u]) &#123;</span><br><span class="line">                Tree::add(u,v),top--;</span><br><span class="line">                Tree::sum[v]=val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (low[v]==dfn[u]) &#123;</span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">int</span> x=top;</span><br><span class="line">                <span class="keyword">while</span>(sta[x]!=v) Tree::add(n+tot,sta[x]),x--;</span><br><span class="line">                Tree::add(n+tot,sta[x]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">                Tree::sum1[sta[x]]=val[i];</span><br><span class="line">                rep(j,x+<span class="number">1</span>,top)</span><br><span class="line">                    Tree::sum1[sta[j]]=</span><br><span class="line">                        Tree::sum1[sta[j<span class="number">-1</span>]]+len(sta[j<span class="number">-1</span>],sta[j]);</span><br><span class="line">                Tree::sum2[sta[top]]=len(sta[top],u);</span><br><span class="line">                Tree::sum[sta[top]]=</span><br><span class="line">                    min(Tree::sum1[sta[top]],Tree::sum2[sta[top]]);</span><br><span class="line">                drp(j,top<span class="number">-1</span>,x)&#123;</span><br><span class="line">                    Tree::sum2[sta[j]]=</span><br><span class="line">                        Tree::sum2[sta[j+<span class="number">1</span>]]+len(sta[j+<span class="number">1</span>],sta[j]);</span><br><span class="line">                    Tree::sum[sta[j]]=</span><br><span class="line">                        min(Tree::sum1[sta[j]],Tree::sum2[sta[j]]);</span><br><span class="line">                &#125;</span><br><span class="line">                top=x<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"test.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"test.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    n=rd(),m=rd();Q=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd(),z=rd();</span><br><span class="line">        add(x,y,z),add(y,x,z);</span><br><span class="line">        len(x,y)=len(y,x)=z;</span><br><span class="line">    &#125;</span><br><span class="line">    tarjan(<span class="number">1</span>,<span class="number">0</span>);Tree::dfs(<span class="number">1</span>);</span><br><span class="line">    rep(i,<span class="number">1</span>,Q)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        wrt(Tree::dis(x,y),<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[小C的独立集]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/bzoj4316/</url>
        <content type="html"><![CDATA[<p>圆方树入门</p>
<a id="more"></a>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4316" target="_blank" rel="noopener">题目链接</a></p>
<p>建出圆方树，圆点和圆点之间按正常转移，遇到圆点和方点时，把整个环拉出来，单独跑一遍$DP$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/09</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 500005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 500005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m,a[maxn];</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//wrt(u,' '),wrt(v,'\n');</span></span><br><span class="line">        nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mx;</span><br><span class="line">    <span class="keyword">int</span> dp[maxn][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> Dp[maxn][<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> A,<span class="keyword">int</span> B,<span class="built_in">vector</span> &lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; x)</span> </span>&#123; </span><br><span class="line">        Dp[<span class="number">0</span>][<span class="number">0</span>]=A,Dp[<span class="number">0</span>][<span class="number">1</span>]=B;</span><br><span class="line">        rep(i,<span class="number">1</span>,x.size()<span class="number">-1</span>)&#123;</span><br><span class="line">            Dp[i][<span class="number">0</span>]=max(Dp[i<span class="number">-1</span>][<span class="number">0</span>],Dp[i<span class="number">-1</span>][<span class="number">1</span>])+x[i].second;</span><br><span class="line">            Dp[i][<span class="number">1</span>]=Dp[i<span class="number">-1</span>][<span class="number">0</span>]+x[i].first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        cross(i,u)<span class="keyword">if</span> (to[i]!=fa)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=to[i];</span><br><span class="line">            <span class="keyword">if</span> (v&gt;n) &#123;</span><br><span class="line">                pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ans;</span><br><span class="line">                <span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; vt;</span><br><span class="line">                <span class="keyword">int</span> tt=<span class="number">0</span>;</span><br><span class="line">                cross(j,v) &#123;</span><br><span class="line">                    dfs(to[j],v);</span><br><span class="line">                    vt.push_back(make_pair(dp[to[j]][<span class="number">1</span>],dp[to[j]][<span class="number">0</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> xx=vt[<span class="number">0</span>].first,yy=vt[<span class="number">0</span>].second;</span><br><span class="line">                tt=vt.size()<span class="number">-1</span>;</span><br><span class="line">                DP(yy,xx,vt),dp[u][<span class="number">0</span>]+=max(Dp[tt][<span class="number">0</span>],Dp[tt][<span class="number">1</span>]);</span><br><span class="line">                DP(yy,<span class="number">-2333333</span>,vt),dp[u][<span class="number">1</span>]+=Dp[tt][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[u][<span class="number">0</span>]+=max(dp[v][<span class="number">0</span>],dp[v][<span class="number">1</span>]);</span><br><span class="line">                dp[u][<span class="number">1</span>]+=dp[v][<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[u][<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(u,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> max(dp[u][<span class="number">0</span>],dp[u][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;  </span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]==dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v) </span><br><span class="line">                    Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">        Tree::mx=<span class="number">0</span>;</span><br><span class="line">        tarjan(i,<span class="number">0</span>),ans+=Tree::calc(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd(),m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y),add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    init(n);</span><br><span class="line">    wrt(ans,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[铁人两项]]></title>
        <url>http://zxy-hhhh.cn/2019/01/09/luogu-4630/</url>
        <content type="html"><![CDATA[<p>圆方树入门</p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P4630" target="_blank" rel="noopener">题目链接</a></p>
<p>转化一下题意，等价于求$\sum\limits_x\sum\limits_y S_{x,y}$</p>
<p>$S_{x,y}$表示$x$到$y$的所有<strong>不经过重复点的路径</strong>可能经过的点的个数</p>
<p>建出圆方树，方点权值为点双大小，圆点权值为$-1$，问题就变成了求树上所有<strong>圆点</strong>对的<strong>路径长度</strong>之和</p>
<p>路径长度定义为树上两点路径经过点的权值和（包含这两点）。</p>
<p>每个点的贡献就是经过它的路径数$×$它的权值</p>
<p><strong>注意：图不一定联通</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 600005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 600005</span></span><br><span class="line"><span class="keyword">int</span> tot,n,m;</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line">    <span class="keyword">int</span> g[maxn&lt;&lt;<span class="number">1</span>],mx;</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=u&lt;=n;</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">            <span class="keyword">int</span> x=dfs(to[i],u);</span><br><span class="line">            ans+=<span class="number">2l</span>l*g[u]*x*sum;</span><br><span class="line">            sum+=x;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=<span class="number">2l</span>l*g[u]*sum*(mx-sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],id;</span><br><span class="line"><span class="keyword">int</span> sta[maxn],top;  </span><br><span class="line"><span class="keyword">int</span> nx[maxm],to[maxm],hd[maxn],cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;=dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;Tree::g[n+tot]=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v) </span><br><span class="line">                    Tree::g[n+tot]++,Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) Tree::g[i]=<span class="number">-1</span>;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (!dfn[i]) &#123;</span><br><span class="line">        Tree::mx=<span class="number">0</span>;</span><br><span class="line">        tarjan(i,<span class="number">0</span>),Tree::dfs(i,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd(),m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y),add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    init(n);</span><br><span class="line">    wrt(Tree::ans,<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 圆方树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[圆方树]]></title>
        <url>http://zxy-hhhh.cn/2019/01/08/yuanfangshu/</url>
        <content type="html"><![CDATA[<p>出题人把序列上的题加个树剖放到树上是错误的<del>应该加个圆方树放到仙人掌上</del></p>
<p>圆方树题的整理和一个模板</p>
<a id="more"></a>
<h1 id="圆方树"><a href="#圆方树" class="headerlink" title="圆方树"></a>圆方树</h1><p>初学的话点<a href="https://www.cnblogs.com/cjyyb/p/9098400.html" target="_blank" rel="noopener">这里</a></p>
<p>然后放个建树模板</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Tree::mx++;</span><br><span class="line">    dfn[u]=low[u]=++id;</span><br><span class="line">    sta[++top]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=hd[u];i;i=nx[i]) <span class="keyword">if</span> (to[i]!=fa) &#123;</span><br><span class="line">        <span class="keyword">int</span> v=to[i];</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])&#123;</span><br><span class="line">            tarjan(v,u);</span><br><span class="line">            low[u]=min(low[u],low[v]);</span><br><span class="line">            <span class="comment">//if (low[v]&gt;dfn[u]) Tree::add(u,v);else </span></span><br><span class="line">            <span class="comment">//仙人掌时加上句</span></span><br><span class="line">            <span class="keyword">if</span> (low[v]&gt;=dfn[u]) &#123;   <span class="comment">//对于一般图，此处为&gt;=；对于仙人掌，此处为==</span></span><br><span class="line">                tot++;</span><br><span class="line">                <span class="keyword">while</span>(sta[top]!=v)</span><br><span class="line">                    Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(n+tot,sta[top--]);</span><br><span class="line">                Tree::add(u,n+tot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="problems"><a href="#problems" class="headerlink" title="problems"></a>problems</h2><p><a href="http://zxy-hhhh.cn/2019/01/09/luogu-4630/">铁人两项</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/bzoj4316/">小C的独立集</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/bzoj2125">最短路</a></p>
<p><a href="http://zxy-hhhh.cn/2019/01/09/CF487E">tourists</a></p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[小清新数据结构题]]></title>
        <url>http://zxy-hhhh.cn/2019/01/06/luogu-3676/</url>
        <content type="html"><![CDATA[<p><del>真是小清新</del></p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3676" target="_blank" rel="noopener">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>查询以$x$为根时的所有子树的权值和的平方和，带单点修改、</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p><strong>为了表达方便，记$q$为询问的点，我们用$x$表示$1$到$q$路径上的点</strong></p>
<h3 id="可以先-O-n-的处理出以-1-为根时："><a href="#可以先-O-n-的处理出以-1-为根时：" class="headerlink" title="可以先$O(n)$的处理出以$1$为根时："></a>可以先$O(n)$的处理出以$1$为根时：</h3><p>​    答案，记为$Ans$</p>
<p>​    每颗子树的权值和，记为$S_i$</p>
<p>​    所有点权值和，记为$Sum$</p>
<p>​    点的深度，记为$dep_i$，$dep_1=1$</p>
<h3 id="考虑修改"><a href="#考虑修改" class="headerlink" title="考虑修改"></a>考虑修改</h3><p>修改点$q$，记原来值和当前值差为$d$</p>
<p>$Sum=Sum+dep_x*d$</p>
<p>$Ans=Ans-\sum\limits_x(S_x)^2+\sum\limits_x(S_x+d)^2$</p>
<p>$=Ans-\sum\limits_x(S_x)^2+\sum\limits_x(S_x)^2+2S_xd+d^2$</p>
<p>$=Ans+\sum\limits_{x}2S_xd+d^2$</p>
<p>$=Ans+2 d\sum\limits_x S_x+dep_x d^2$</p>
<p>所有$S_x=S_x+d$</p>
<h3 id="当根换为-q-时"><a href="#当根换为-q-时" class="headerlink" title="当根换为$q$时"></a>当根换为$q$时</h3><p>此时点$x$，不含点$q$，$S_x$会变为$Sum-S_{son}$，$S_{son}$表示$x$的包含点$q$的子树的大小</p>
<p>其余点不变</p>
<p>所以答案为</p>
<p>$Ans-\sum\limits_x(S_x)^2+Sum^2+\sum\limits_x(Sum-S_x)^2$</p>
<p>$=Ans+\sum\limits_x(Sum-S_x)^2-(S_x)^2+Sum^2$</p>
<p>平方差公式展开</p>
<p>$=Ans+Sum^2+\sum\limits Sum(Sum-2S_x)$</p>
<p>$=Ans+Sum^2+Sum\sum\limits Sum-2S_x$</p>
<p>$=Ans+Sum^2+Sum^2dep_x+2Sum\sum\limits S_x$</p>
<p>用树剖+树状数组维护<strong>链上加</strong>，<strong>链上求和</strong>就好了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>时间复杂度$O(nlog^2n)$</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    &gt;Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    &gt;blog: zxy-hhhh.cn</span></span><br><span class="line"><span class="comment">    &gt;date: 2019/01/04</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">namespace</span> Tree_Array</span><br><span class="line">&#123;</span><br><span class="line">    ll sum[maxn],Sum[maxn];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=i&amp;(-i))</span><br><span class="line">            sum[i]+=val,Sum[i]+=<span class="number">1l</span>l*x*val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=i&amp;(-i))</span><br><span class="line">            ans+=(x+<span class="number">1</span>)*sum[i]-Sum[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span> </span>&#123;add(l,x),add(r+<span class="number">1</span>,-x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> getsum(r)-getsum(l<span class="number">-1</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> Tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> nx[maxn&lt;&lt;<span class="number">1</span>],to[maxn&lt;&lt;<span class="number">1</span>],hd[maxn],cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;nx[++cnt]=hd[u],to[cnt]=v,hd[u]=cnt;&#125;</span><br><span class="line">    <span class="keyword">int</span> top[maxn],sz[maxn],fa[maxn],son[maxn],dep[maxn];</span><br><span class="line">    <span class="keyword">int</span> val[maxn],a[maxn];</span><br><span class="line">    <span class="keyword">int</span> sum[maxn];</span><br><span class="line">    ll Ans,S;</span><br><span class="line">    <span class="keyword">int</span> idx[maxn],id;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dep[u]=dep[fa[u]]+<span class="number">1</span>,sz[u]=<span class="number">1</span>;sum[u]=a[u];</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa[u])&#123;</span><br><span class="line">            fa[to[i]]=u,dfs(to[i]);</span><br><span class="line">            sz[u]+=sz[to[i]],sum[u]+=sum[to[i]];</span><br><span class="line">            <span class="keyword">if</span> (sz[son[u]]&lt;sz[to[i]]) son[u]=to[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx[u]=++id;val[id]=a[u];</span><br><span class="line">        top[u]=tp;</span><br><span class="line">        <span class="keyword">if</span> (son[u]) dfs(son[u],tp);</span><br><span class="line">        cross(i,u) <span class="keyword">if</span> (to[i]!=fa[u]&amp;&amp;to[i]!=son[u]) dfs(to[i],to[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dfs(<span class="number">1</span>),dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        Tree_Array::n=id;</span><br><span class="line">        rep(i,<span class="number">1</span>,id) Tree_Array::update(idx[i],idx[i],sum[i]),Ans+=sum[i]*sum[i];</span><br><span class="line">        S=sum[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link_update</span><span class="params">(<span class="keyword">int</span> x,ll val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            Tree_Array::update(idx[top[x]],idx[x],val);</span><br><span class="line">            <span class="keyword">if</span> (top[x]==<span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">            x=fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">sigma</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            ans+=Tree_Array::query(idx[top[x]],idx[x]);</span><br><span class="line">            <span class="keyword">if</span> (top[x]==<span class="number">1</span>) <span class="keyword">return</span> ans;</span><br><span class="line">            x=fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> Ans+S*S+<span class="number">1l</span>l*dep[x]*S*S<span class="number">-2l</span>l*S*sigma(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,ll val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll delta=val-a[x],s1=sigma(x),s2=dep[x];</span><br><span class="line">        Ans+=<span class="number">2</span>*s1*delta+delta*delta*dep[x];</span><br><span class="line">        S+=delta;</span><br><span class="line">        link_update(x,delta);</span><br><span class="line">        a[x]=val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Tree;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=rd();</span><br><span class="line">    <span class="keyword">int</span> m=rd();</span><br><span class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x=rd(),y=rd();</span><br><span class="line">        add(x,y);add(y,x);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i,<span class="number">1</span>,n) a[i]=rd();</span><br><span class="line">    init();</span><br><span class="line">    rep(_i,<span class="number">1</span>,m)&#123;</span><br><span class="line">        <span class="keyword">int</span> op=rd();</span><br><span class="line">        <span class="keyword">if</span> (op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> x=rd(),val=rd();</span><br><span class="line">            update(x,val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> x=rd();</span><br><span class="line">            wrt(query(x),<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[大森林]]></title>
        <url>http://zxy-hhhh.cn/2018/12/13/bzoj4573/</url>
        <content type="html"><![CDATA[<p>有趣的LCT题<br><a id="more"></a></p>
<p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4573" target="_blank" rel="noopener">题目链接</a></p>
<h2 id="写在前面的一些结论："><a href="#写在前面的一些结论：" class="headerlink" title="写在前面的一些结论："></a>写在前面的一些结论：</h2><ol>
<li><p>合法的$2$操作只会在一段连续的区间内发生，所以合法$2$操作也只会在一段区间内发生，因此我们可以把更换生长节点的区间，和加点区间取并，使$2$操作一定合法</p>
</li>
<li><p>如果$2$操作一定合法，加点操作区间从l~r变为1~n并不影响答案</p>
</li>
<li><p>一个询问在该询问进入时处理，和之后处理，答案并不改变，并且只有涉及到该树的操作才会对这个询问产生影响</p>
</li>
</ol>
<p><del>结论是显然的</del></p>
<p>知道这些之后，来考虑如何解决；</p>
<h2 id="一个想法"><a href="#一个想法" class="headerlink" title="一个想法"></a>一个想法</h2><p>可以基于上面结论，产生一个<del>愚蠢的</del>想法</p>
<p>设$x$为$2$操作后的生长节点，$y$为之前的</p>
<p>将$2$操作拆成两次：</p>
<ol>
<li>在$l$处，将之后加入所有点，换到$x$下面</li>
<li>在$r+1$处,将之后加入所有点，换回$y$下面</li>
</ol>
<p>然后将询问和$2$操作按位置排序，从1~n扫一遍，依次处理就得到了$O(n^{2})$的优秀做法</p>
<h2 id="那么如何优化"><a href="#那么如何优化" class="headerlink" title="那么如何优化"></a>那么如何优化</h2><h3 id="虚点"><a href="#虚点" class="headerlink" title="虚点!!!"></a>虚点!!!</h3><p>对每一个$2$操作建一个虚点，每个虚点的父节点是前一个虚点，第一个虚点的父亲是1</p>
<p>每一次加点就加到当前最后一个虚点下面就好了。</p>
<p>每次移动就直接将该$2$操作对应的虚点及其子树移到新的生长节点下<del>然而还是T</del></p>
<h3 id="统计答案"><a href="#统计答案" class="headerlink" title="统计答案"></a>统计答案</h3><p>我们让虚点权值为0，实点为1</p>
<p>设一个点i到根路径上权值和为 $S_{i}$(包含自身权值)</p>
<p>$dis(u,v)=S_{u}+S_{v}-2S_{lca}$</p>
<p>大家举几个栗子，想象一下，就知道这是对的。<del>我不会证</del></p>
<h3 id="LCT大法吼！！！"><a href="#LCT大法吼！！！" class="headerlink" title="LCT大法吼！！！"></a>LCT大法吼！！！</h3><p>移动子树相当于换父亲，LCT就可以了。</p>
<p>但是此处<strong>LCT 不能换根</strong>，因为有虚点，不同于普通树上路径，所以根的位置对答案会产生影响。</p>
<p>此处cut操作一定是儿子cut父亲，所以直接cut掉就可以了，like this<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(u);splay(u);fa[son[u][<span class="number">0</span>]]=<span class="number">0</span>,son[u][<span class="number">0</span>]=<span class="number">0</span>;</span><br></pre></td></tr></table></figure></p>
<p>而link操作也一定是一颗树的根去link，所以也直接link就好了，像这样<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access(v),splay(v),fa[v]=u;</span><br></pre></td></tr></table></figure></p>
<p>然后就愉快的A了此题，时间复杂度$O(nlogn)$</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/07</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, a, b) for (int x = int(a); x &lt;= (int)(b); x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x, a, b) for (int x = int(a); x &gt;= (int)(b); x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x, a) for (int x = hd[a]; x; x = nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll _x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> _ch = getchar(), _f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; !<span class="built_in">isdigit</span>(_ch) &amp;&amp; (_ch != <span class="string">'-'</span>) &amp;&amp; (_ch != EOF); _ch = getchar())</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">if</span> (_ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">        _f = <span class="number">0</span>;</span><br><span class="line">        _ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(_ch); _ch = getchar()) _x = _x * <span class="number">10</span> + _ch - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f ? _x : -_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_x &gt;= <span class="number">10</span>)</span><br><span class="line">        write(_x / <span class="number">10</span>), <span class="built_in">putchar</span>(_x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">putchar</span>(_x + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x, <span class="keyword">char</span> _p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), _x = -_x;</span><br><span class="line">    write(_x);</span><br><span class="line">    <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 400005</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LCT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> son[maxn][<span class="number">2</span>], val[maxn], sum[maxn], fa[maxn], cnt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> son[fa[x]][<span class="number">1</span>] != x &amp;&amp; son[fa[x]][<span class="number">0</span>] != x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sum[x] = sum[son[x][<span class="number">0</span>]] + sum[son[x][<span class="number">1</span>]] + val[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = fa[x], z = fa[y], d = son[y][<span class="number">1</span>] == x;</span><br><span class="line">        <span class="keyword">if</span> (!isroot(y)) son[z][son[z][<span class="number">1</span>] == y] = x;</span><br><span class="line">        fa[y] = x, fa[x] = z;</span><br><span class="line">        fa[son[x][!d]] = y, son[y][d] = son[x][!d];</span><br><span class="line">        son[x][!d] = y;</span><br><span class="line">        update(y), update(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; !isroot(x);) &#123;</span><br><span class="line">            <span class="keyword">int</span> y = fa[x], z = fa[y];</span><br><span class="line">            <span class="keyword">if</span> (!isroot(y))</span><br><span class="line">                (son[y][<span class="number">1</span>] == x) ^ (son[z][<span class="number">1</span>] == y) ? rotate(x) : rotate(y);</span><br><span class="line">            rotate(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x; t = x, x = fa[x]) splay(x), son[x][<span class="number">1</span>] = t, update(x);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; fa[v] = u; &#125;<span class="comment">//因为先有cut所以可以不access</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        access(u);</span><br><span class="line">        splay(u);</span><br><span class="line">        fa[son[u][<span class="number">0</span>]] = <span class="number">0</span>, son[u][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Sum = <span class="number">0</span>;</span><br><span class="line">        access(x);</span><br><span class="line">        splay(x);</span><br><span class="line">        Sum += sum[x];</span><br><span class="line">        <span class="keyword">int</span> lca = access(y);</span><br><span class="line">        splay(y);</span><br><span class="line">        Sum += sum[y];</span><br><span class="line">        access(lca);</span><br><span class="line">        splay(lca);</span><br><span class="line">        Sum -= sum[lca] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">changefa</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>  <span class="comment">// xxc's fahter was hje before,but now his father is me</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cut(x);</span><br><span class="line">        link(y, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getfather</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        access(x);</span><br><span class="line">        splay(x);</span><br><span class="line">        <span class="keyword">return</span> son[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">new_node</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        sum[++cnt] = x, val[cnt] = x;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; lct;</span><br><span class="line"><span class="keyword">int</span> to[maxn];</span><br><span class="line"><span class="keyword">int</span> cl[maxn], cr[maxn], ans[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, p, r, cnt, QwQ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, w, x, y, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Query &amp;B) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (w &lt; B.w) || (w == B.w &amp;&amp; op &lt; B.op);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Q[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    to[<span class="number">1</span>] = lct.new_node(<span class="number">1</span>);</span><br><span class="line">    lct.link(<span class="number">1</span>, lct.new_node(<span class="number">0</span>));</span><br><span class="line">    cl[<span class="number">1</span>] = <span class="number">1</span>, cr[<span class="number">1</span>] = n;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">2</span>, w = <span class="number">1</span>;</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">0</span>) &#123;</span><br><span class="line">            cl[++w] = rd(), cr[w] = rd();</span><br><span class="line">            lct.link(now, to[w] = lct.new_node(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd(), pre = now;</span><br><span class="line">            l = <span class="built_in">std</span>::max(l, cl[x]), r = <span class="built_in">std</span>::min(r, cr[x]);</span><br><span class="line">            <span class="keyword">if</span> (l &gt; r) <span class="keyword">continue</span>;</span><br><span class="line">            now = lct.new_node(<span class="number">0</span>);</span><br><span class="line">            Q[++cnt].op = <span class="number">1</span>, Q[cnt].w = l, Q[cnt].x = now, Q[cnt].y = to[x];</span><br><span class="line">            Q[++cnt].op = <span class="number">1</span>, Q[cnt].w = r + <span class="number">1</span>, Q[cnt].x = now, Q[cnt].y = pre;</span><br><span class="line">            lct.link(pre, now);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Q[++cnt].w = rd();</span><br><span class="line">            <span class="keyword">int</span> x = rd(), y = rd();</span><br><span class="line">            Q[cnt].op = <span class="number">2</span>, Q[cnt].x = x, Q[cnt].y = y;</span><br><span class="line">            Q[cnt].id = ++QwQ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(Q + <span class="number">1</span>, Q + <span class="number">1</span> + cnt);</span><br><span class="line">    rep(i, <span class="number">1</span>, cnt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Q[i].op == <span class="number">1</span>)</span><br><span class="line">            lct.changefa(Q[i].x, Q[i].y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ans[Q[i].id] = lct.dis(to[Q[i].x], to[Q[i].y]);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">1</span>, QwQ) wrt(ans[i], <span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> LCT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[about-zxy]]></title>
        <url>http://zxy-hhhh.cn/2018/12/06/about-zxy/</url>
        <content type="html"><![CDATA[<p>博客运行一段时间了，也有了一点文章了，该来个about me了<br><a id="more"></a></p>
<h2 id="about我的ID"><a href="#about我的ID" class="headerlink" title="about我的ID"></a>about我的ID</h2><p>我常以<strong>zxy_hhhh</strong>及<strong>地狱小鬼366</strong>(无法输入中文时为<strong>dyxg</strong>)的ID游荡于各大OJ、社交网站&amp;&amp;<del>游戏</del></p>
<h2 id="关于OI生涯"><a href="#关于OI生涯" class="headerlink" title="关于OI生涯"></a>关于OI生涯</h2><p>去年拿了个pj1=，今天tg GG了<del>不过1=还是有的</del>；<br>之后的么。。。待续</p>
<h2 id="关于博客内容"><a href="#关于博客内容" class="headerlink" title="关于博客内容"></a>关于博客内容</h2><p>一般是一些<strong>题解</strong>或者<strong>对算法/数据结构的理解</strong>。</p>
<h2 id="一些解释"><a href="#一些解释" class="headerlink" title="一些解释"></a>一些解释</h2><p>关于加密文章<del>虽然前端的加密是扯淡</del>，因为一些政治原因无法公开</p>
<p>关于访问速度问题，因为我部署在github上的，国内访问速度就。。。<br>不过，过几天我说不定会往coding上部署一份，届时访问速度就会好多了</p>
<p>头像什么的还在搞。。。</p>
<p>评论系统的话因为主题的一些原因，用了disqus，可能对不能科学上网的童鞋有些不友好。</p>
<p>还有本人码风各种变换，原因有两个</p>
<pre><code>   1. 有时候我会用vscode格式化代码
   2. 最近在改码风
</code></pre><p>过段时间去提交一下网站链接，做一下SEO吧，到时候goolge那里一定会有的<del>baidu就看心情吧</del></p>
<h2 id="如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））"><a href="#如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））" class="headerlink" title="如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））"></a>如果有建议或意见或者要换友联，请用QQ或邮箱找我，留言的话也可以，不过有我可能无法第一时间看到（如果QQ找我请说明身份（主流oj的id就可以））</h2><hr>
<p>先写这么多吧，其他的想到了再补</p>
]]></content>
        
        
    </entry>
    
    <entry>
        <title><![CDATA[不勤劳的图书管理员]]></title>
        <url>http://zxy-hhhh.cn/2018/12/05/bzoj3110/</url>
        <content type="html"><![CDATA[<p><del>暴力可以AC</del></p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3759" target="_blank" rel="noopener">题目链接</a></p>
<p>先算出不修改时的答案；</p>
<p>对于的位置i贡献就是</p>
<p>$\Sigma_{j=1}^{j<i} a[j]+a[i]="" (v[j]="">v[i])$</i}></p>
<p>然后对于每一次修改，考虑对答案的影响就是y移到x减少的和x移到y增加的<br>而影响只会出现在(x,y)</p>
<p>具体就是：</p>
<p>(x,y)对x产生的逆序对，y对(x,y)产生的逆序对会失去</p>
<p>(x,y)对y产生的逆序对，x对(x,y)产生的逆序对会增加入答案</p>
<p>如何维护a[i]+a[j]?</p>
<p>用树套树维护<strong>(x,y)大于等于x的数</strong>的<strong>个数</strong>和<strong>这些数的和</strong></p>
<hr>
<p>不能用指针，不然空间会GG</p>
<p>要外层<strong>树状数组</strong>内层<strong>线段树</strong>，不然空间GG</p>
<p>外层<strong>线段树</strong>内层<strong>平衡树</strong>空间OK的，不过时间就呵呵了<br><del>机房某大佬卡了一上午常之后彻底弃疗，写了暴力</del></p>
<hr>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/05</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lb(x) (x &amp; -x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], w[maxn], m, Ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span> ? (x + mod) : (x &gt;= mod ? x - mod : x); &#125;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sum,ls,rs;</span><br><span class="line">&#125;tr[<span class="number">20000000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u) u = ++cnt;</span><br><span class="line">    tr[u].sum = Mod(tr[u].sum + k);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        insert(tr[u].ls, l, mid, x, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(tr[u].rs, mid + <span class="number">1</span>, r, x, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="keyword">return</span> (query(tr[u].ls, l, mid, ql, qr) + query(tr[u].rs, mid + <span class="number">1</span>, r, ql, qr)) %</span><br><span class="line">           mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> tr[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; x &lt;= n; x += lb(x)) xtree::insert(tr[x], <span class="number">1</span>, n, k, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; x; x -= lb(x)) ans = Mod(ans + xtree::query(tr[x], <span class="number">1</span>, n, L, R));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Mod(query(R, l, r) - query(L - <span class="number">1</span>, l, r));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tr1, tr2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    rep(i, <span class="number">1</span>, n) &#123;</span><br><span class="line">        w[i] = rd(), a[i] = rd();</span><br><span class="line">        tr1.update(i, w[i], a[i]), tr2.update(i, w[i], <span class="number">1</span>);</span><br><span class="line">        Ans = Mod(Ans + tr1.query(i - <span class="number">1</span>, w[i], n)),</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(i - <span class="number">1</span>, w[i], n) * a[i] % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = rd(), y = rd();</span><br><span class="line">        <span class="keyword">if</span> (x &gt; y) swap(x, y);</span><br><span class="line">        <span class="keyword">if</span> (x==y) &#123;wrt(Ans,<span class="string">'\n'</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        Ans = Mod(Ans - tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[y], n));</span><br><span class="line">        Ans = Mod(Ans + tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[x], n));</span><br><span class="line">        Ans = Mod(Ans - tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[x]));</span><br><span class="line">        Ans = Mod(Ans + tr1.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[y]));</span><br><span class="line">        Ans = Mod(Ans - <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[y], n) * a[y] % mod);</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, w[x], n) * a[x] % mod);</span><br><span class="line">        Ans = Mod(Ans - <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[x]) * a[x] % mod);</span><br><span class="line">        Ans = Mod(Ans + <span class="number">1l</span>l * tr2.query(x + <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">1</span>, w[y]) * a[y] % mod);</span><br><span class="line">        <span class="keyword">if</span> (w[x] &gt; w[y])</span><br><span class="line">            Ans -= a[x] + a[y];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Ans += a[x] + a[y];</span><br><span class="line">        Ans=Mod(Ans);</span><br><span class="line">        tr1.update(x, w[x], -a[x]), tr1.update(x, w[y], a[y]);</span><br><span class="line">        tr1.update(y, w[y], -a[y]), tr1.update(y, w[x], a[x]);</span><br><span class="line">        tr2.update(x, w[x], <span class="number">-1</span>), tr2.update(x, w[y], <span class="number">1</span>);</span><br><span class="line">        tr2.update(y, w[y], <span class="number">-1</span>), tr2.update(y, w[x], <span class="number">1</span>);</span><br><span class="line">        swap(w[x], w[y]), swap(a[x], a[y]);</span><br><span class="line">        wrt(Ans, <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//wrt(xtree::cnt,'\n');</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[初学树套树]]></title>
        <url>http://zxy-hhhh.cn/2018/12/05/tree-tao-tree/</url>
        <content type="html"><![CDATA[<p>最近写了点树套树，感觉也没那么可怕</p>
<a id="more"></a>
<h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><p>很多用于动态维护区间的一些东西，比如：区间内大于等于x的数的个数、区间前驱后继等等</p>
<p>主要思想很简单，就是 对外层树的<strong>每一个节点</strong>建一个内层树</p>
<p>具体实现方式可见例题</p>
<h2 id="来几个-栗子"><a href="#来几个-栗子" class="headerlink" title="来几个 栗子"></a>来几个 栗子</h2><p><a href="http://zxy-hhhh.cn/2018/12/03/luogu-3759/">K大数查询</a><br><a href="http://zxy-hhhh.cn/2018/12/03/bzoj3196/">二逼平衡树</a><br><a href="http://zxy-hhhh.cn/2018/12/05/bzoj3110/">不勤劳的图书管理员</a><br>先写到这里吧</p>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[K大数查询]]></title>
        <url>http://zxy-hhhh.cn/2018/12/03/luogu-3759/</url>
        <content type="html"><![CDATA[<p>模板题</p>
<a id="more"></a>
<p><a href="https://www.luogu.org/problemnew/show/P3759" target="_blank" rel="noopener">题目链接</a></p>
<p>因为有区间修改，所以外层建权值线段树，内层建区间树</p>
<p>处理修改：对所有包含c的外层树节点所对应的内层树的a~b区间+1</p>
<p>处理询问：在外层树上二分，若当前节点的<strong>右子树的内层树</strong>a~b区间和&gt;c就往左子树走，否则往右</p>
<hr>
<p>注意:</p>
<p>   区间树要<strong>标记永久化</strong>，不然如果写的不够优秀会 MLE or TLE</p>
<p>   此题luogu上时限只有1s，大部分代码<del>包括本人代码</del>会被卡常，获得0~100不等的分数。</p>
<p>   在往左子树走时要减掉右子树a~b区间和带来的贡献</p>
<hr>
<p>在具体实现的时候，我为了图方便用了<strong>指针</strong>和<strong>namespace</strong></p>
<p>如果你看不懂指针，可以往下翻，有无指针的代码</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">    date: 2018/12/01</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x, a, b) for (int x = int(a); x &lt;= (int)(b); x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x, a, b) for (int x = int(a); x &gt;= (int)(b); x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x, a) for (int x = hd[a]; x; x = nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">    <span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> lazy;</span><br><span class="line">    ll sum;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="literal">NULL</span>) u = <span class="keyword">new</span> node;</span><br><span class="line">    <span class="keyword">if</span> (ql == l &amp;&amp; r == qr) &#123;</span><br><span class="line">        u-&gt;lazy++, u-&gt;sum += r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    u-&gt;sum += qr - ql + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        insert(u-&gt;ls, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        insert(u-&gt;rs, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(u-&gt;ls, l, mid, ql, mid), insert(u-&gt;rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(node *u, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql == l &amp;&amp; qr == r) <span class="keyword">return</span> u-&gt;sum;</span><br><span class="line">    ll ans = (qr - ql + <span class="number">1</span>) * u-&gt;lazy;</span><br><span class="line">    <span class="keyword">if</span> (qr &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> ans + query(u-&gt;ls, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ql &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> ans + query(u-&gt;rs, mid + <span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(u-&gt;ls, l, mid, ql, mid) + ans +</span><br><span class="line">               query(u-&gt;rs, mid + <span class="number">1</span>, r, mid + <span class="number">1</span>, qr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="keyword">namespace</span> ytree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    xtree::node *rt;</span><br><span class="line">&#125; tr[<span class="number">400005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    xtree::insert(tr[pos].rt, <span class="number">1</span>, n, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        insert(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        insert(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, ll x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">    ll sum = xtree::query(tr[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].rt, <span class="number">1</span>, n, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= x)</span><br><span class="line">        <span class="keyword">return</span> query(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> query(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x - sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;  <span class="comment">// namespace ytree</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> op, l, r;</span><br><span class="line">    ll c;</span><br><span class="line">&#125; Q[maxn];</span><br><span class="line"><span class="keyword">int</span> H[maxn], tot;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd(), m = rd();</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd(), l = rd(), r = rd();</span><br><span class="line">        ll x = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) ytree::insert(<span class="number">1</span>, -n, n, l, r, x);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">2</span>) wrt(ytree::query(<span class="number">1</span>, -n, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[二逼平衡树]]></title>
        <url>http://zxy-hhhh.cn/2018/12/03/bzoj3196/</url>
        <content type="html"><![CDATA[<p>码量稍微有大，不过思路清晰还是好写的</p>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3196" target="_blank" rel="noopener">题目链接</a></p>
<p>外层线段树，内层平衡树</p>
<p>操作1 4 5就是在线段树上取出区间，然后平衡树内求答案，合并答案</p>
<p>修改也没什么好讲的，和上一题比较相似</p>
<p>操作2要<strong>二分答案</strong>，然后转化为1</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Author: zxy_hhhh</span></span><br><span class="line"><span class="comment">	date: 2018/12/03</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for (int x=int(a);x&lt;=(int)(b);x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(x,a,b) for (int x=int(a);x&gt;=(int)(b);x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cross(x,a) for (int x=hd[a];x;x=nx[x])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ll _x=<span class="number">0</span>;<span class="keyword">int</span> _ch=getchar(),_f=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(_ch)&amp;&amp;(_ch!=<span class="string">'-'</span>)&amp;&amp;(_ch!=EOF);_ch=getchar());</span><br><span class="line">	<span class="keyword">if</span> (_ch==<span class="string">'-'</span>)&#123;_f=<span class="number">0</span>;_ch=getchar();&#125;</span><br><span class="line">	<span class="keyword">for</span>(;<span class="built_in">isdigit</span>(_ch);_ch=getchar()) _x=_x*<span class="number">10</span>+_ch-<span class="string">'0'</span>;</span><br><span class="line">	<span class="keyword">return</span> _f?_x:-_x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(ll _x)</span></span>&#123;<span class="keyword">if</span> (_x&gt;=<span class="number">10</span>) write(_x/<span class="number">10</span>),<span class="built_in">putchar</span>(_x%<span class="number">10</span>+<span class="string">'0'</span>); <span class="keyword">else</span> <span class="built_in">putchar</span>(_x+<span class="string">'0'</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">wrt</span><span class="params">(ll _x,<span class="keyword">char</span> _p)</span></span>&#123;<span class="keyword">if</span> (_x&lt;<span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>),_x=-_x; write(_x); <span class="keyword">if</span> (_p) <span class="built_in">putchar</span>(_p);&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ( (l + r) &gt;&gt; 1 </span></span><br><span class="line"><span class="keyword">int</span> a[maxn], n, m;</span><br><span class="line"><span class="keyword">namespace</span> xtree &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">nil</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sz, val, fix;</span><br><span class="line">    node *ls, *rs;</span><br><span class="line">    node(<span class="keyword">int</span> x) : sz(<span class="number">1</span>), val(x), fix(rand()) &#123; ls = rs = nil; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123; sz = ls-&gt;sz + rs-&gt;sz + <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nil = <span class="keyword">new</span> node(<span class="number">0</span>);</span><br><span class="line">    nil-&gt;ls = nil-&gt;rs = nil;</span><br><span class="line">    nil-&gt;sz = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(node *now, <span class="keyword">int</span> k, node *&amp;x, node *&amp;y, <span class="keyword">int</span> op = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (now == nil) &#123;</span><br><span class="line">        x = y = nil;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (op == <span class="number">1</span> ? now-&gt;val &lt; k : now-&gt;ls-&gt;sz &lt; k) &#123;</span><br><span class="line">        x = now;</span><br><span class="line">        split(now-&gt;rs, (op == <span class="number">1</span> ? k : k - now-&gt;ls-&gt;sz - <span class="number">1</span>), x-&gt;rs, y, op);</span><br><span class="line">        x-&gt;update();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y = now;</span><br><span class="line">        split(now-&gt;ls, k, x, y-&gt;ls, op);</span><br><span class="line">        y-&gt;update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node *<span class="title">merge</span><span class="params">(node *x, node *y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == nil) <span class="keyword">return</span> y;</span><br><span class="line">    <span class="keyword">if</span> (y == nil) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span> (x-&gt;fix &lt; y-&gt;fix) &#123;</span><br><span class="line">        x-&gt;rs = merge(x-&gt;rs, y);</span><br><span class="line">        <span class="keyword">return</span> x-&gt;update(), x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        y-&gt;ls = merge(x, y-&gt;ls);</span><br><span class="line">        <span class="keyword">return</span> y-&gt;update(), y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    rt = merge(x, merge(<span class="keyword">new</span> node(val), y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    split(y, <span class="number">1</span>, y, z, <span class="number">2</span>);</span><br><span class="line">    rt = merge(x, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val, x, y), split(x, x-&gt;sz - <span class="number">1</span>, x, z, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (z == nil)</span><br><span class="line">        ans = -inf;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = (z-&gt;val);</span><br><span class="line">    rt = merge(x, merge(z, y));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nxt</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y, *z;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val + <span class="number">1</span>, x, y), split(y, <span class="number">1</span>, y, z, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (y == nil)</span><br><span class="line">        ans = inf;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = y-&gt;val;</span><br><span class="line">    rt = merge(x, merge(y, z));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(node *&amp;rt, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    node *x, *y;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    split(rt, val, x, y);</span><br><span class="line">    <span class="keyword">if</span> (x == nil)</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ans = x-&gt;sz;</span><br><span class="line">    rt = merge(x, y);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace xtree</span></span><br><span class="line"><span class="keyword">namespace</span> ytree &#123;</span><br><span class="line">xtree::node *tr[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> -inf;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::pre(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> max(pre(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x),</span><br><span class="line">               pre(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::nxt(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> min(nxt(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x),</span><br><span class="line">               nxt(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r &lt; ql || l &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> x = xtree::rank(tr[pos], x);</span><br><span class="line">    <span class="keyword">return</span> rank(pos &lt;&lt; <span class="number">1</span>, l, mid, ql, qr, x) +</span><br><span class="line">           rank(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, ql, qr, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    xtree::del(tr[pos], a[x]), xtree::insert(tr[pos], v);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">        change(pos &lt;&lt; <span class="number">1</span>, l, mid, x, v);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        change(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">atrank</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">100000000</span>, ans;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rank(<span class="number">1</span>, <span class="number">1</span>, n, L, R, mid) &lt; k)</span><br><span class="line">            ans = mid, l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    tr[pos] = xtree::nil;</span><br><span class="line">    rep(i, l, r) xtree::insert(tr[pos], a[i]);</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    build(pos &lt;&lt; <span class="number">1</span>, l, mid), build(pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace ytree</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = rd();</span><br><span class="line">    m = rd();</span><br><span class="line">    xtree::init();</span><br><span class="line">    rep(i, <span class="number">1</span>, n) a[i] = rd();</span><br><span class="line">    ytree::build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    rep(i, <span class="number">1</span>, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> op = rd();</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::rank(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x) + <span class="number">1</span>, <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::atrank(l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = rd(), k = rd();</span><br><span class="line">            ytree::change(<span class="number">1</span>, <span class="number">1</span>, n, x, k);</span><br><span class="line">            a[x] = k;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::pre(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = rd(), r = rd(), x = rd();</span><br><span class="line">            wrt(ytree::nxt(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x), <span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
        
        <categories>
            
            <category> OI </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
        <title><![CDATA[ss]]></title>
        <url>http://zxy-hhhh.cn/1028/12/06/my-ss/</url>
        <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />
    <label for="pass">Please enter the password to read the blog.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
        
        
    </entry>
    
    
    
</search>
